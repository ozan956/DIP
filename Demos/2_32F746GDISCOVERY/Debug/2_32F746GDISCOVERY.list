
2_32F746GDISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d98  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003f6a0  08006f60  08006f60  00016f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08046600  08046600  0006000c  2**0
                  CONTENTS
  4 .ARM          00000008  08046600  08046600  00056600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08046608  08046608  0006000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08046608  08046608  00056608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804660c  0804660c  0005660c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08046610  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  0804661c  0006000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  0804661c  000601ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0006000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0006003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f3f  00000000  00000000  0006007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000276e  00000000  00000000  00071fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00074730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a12  00000000  00000000  00075460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ed4  00000000  00000000  00075e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013254  00000000  00000000  0009dd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1337  00000000  00000000  000b0f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a18  00000000  00000000  001a22d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001a5cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006f48 	.word	0x08006f48

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006f48 	.word	0x08006f48

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <createImage>:
uint32_t allocatedSize = 0;

// Macro for comparing float values
#define COMPARE_FLOAT(a, b) (fabs((a) - (b)) < FLT_EPSILON ? 0 : ((a) < (b) ? -1 : 1))

Image* createImage(uint8_t size, uint8_t format) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]

	//test;
	Image *image = SDRAM_BANK_ADDR + WRITE_READ_ADDR + allocatedSize;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <createImage+0x100>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <createImage+0x104>)
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
	allocatedSize += sizeof(Image);
 8000eba:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <createImage+0x100>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	331c      	adds	r3, #28
 8000ec0:	4a37      	ldr	r2, [pc, #220]	; (8000fa0 <createImage+0x100>)
 8000ec2:	6013      	str	r3, [r2, #0]

	if (image == NULL) {
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <createImage+0x2e>
		return NULL;  // Failed to allocate memory
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e061      	b.n	8000f92 <createImage+0xf2>
	}

	switch (size) {
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d82c      	bhi.n	8000f2e <createImage+0x8e>
 8000ed4:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <createImage+0x3c>)
 8000ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eda:	bf00      	nop
 8000edc:	08000eed 	.word	0x08000eed
 8000ee0:	08000efb 	.word	0x08000efb
 8000ee4:	08000f0b 	.word	0x08000f0b
 8000ee8:	08000f1d 	.word	0x08000f1d
	case IMAGE_RES_QQVGA: {
		image->width = IMAGE_RES_QQVGA_Width;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	22a0      	movs	r2, #160	; 0xa0
 8000ef0:	601a      	str	r2, [r3, #0]
		image->height = IMAGE_RES_QQVGA_Height;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2278      	movs	r2, #120	; 0x78
 8000ef6:	605a      	str	r2, [r3, #4]
		break;
 8000ef8:	e01b      	b.n	8000f32 <createImage+0x92>
	}
	case IMAGE_RES_QVGA: {
		image->width = IMAGE_RES_QVGA_Width;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f00:	601a      	str	r2, [r3, #0]
		image->height = IMAGE_RES_QVGA_Height;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	22f0      	movs	r2, #240	; 0xf0
 8000f06:	605a      	str	r2, [r3, #4]
		break;
 8000f08:	e013      	b.n	8000f32 <createImage+0x92>
	}
	case IMAGE_RES_480x272: {
		image->width = IMAGE_RES_480x272_Width;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f10:	601a      	str	r2, [r3, #0]
		image->height = IMAGE_RES_480x272_Height;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000f18:	605a      	str	r2, [r3, #4]
		break;
 8000f1a:	e00a      	b.n	8000f32 <createImage+0x92>
	}
	case IMAGE_RES_VGA: {
		image->width = IMAGE_RES_VGA_Width;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000f22:	601a      	str	r2, [r3, #0]
		image->height = IMAGE_RES_VGA_Height;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f2a:	605a      	str	r2, [r3, #4]
		break;
 8000f2c:	e001      	b.n	8000f32 <createImage+0x92>
	}
	default: {
		//should not be go in here
		return NULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e02f      	b.n	8000f92 <createImage+0xf2>
	}
	}

	switch (format) {
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d002      	beq.n	8000f3e <createImage+0x9e>
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d00d      	beq.n	8000f58 <createImage+0xb8>
 8000f3c:	e018      	b.n	8000f70 <createImage+0xd0>
	case IMAGE_FORMAT_RGB565: {
		image->size = image->width * image->height * 2;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	6852      	ldr	r2, [r2, #4]
 8000f46:	fb02 f303 	mul.w	r3, r2, r3
 8000f4a:	005a      	lsls	r2, r3, #1
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	60da      	str	r2, [r3, #12]
		image->format = IMAGE_FORMAT_RGB565;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2201      	movs	r2, #1
 8000f54:	741a      	strb	r2, [r3, #16]
		break;
 8000f56:	e00d      	b.n	8000f74 <createImage+0xd4>
	}
	case IMAGE_FORMAT_GRAYSCALE: {
		image->size = image->width * image->height;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	6852      	ldr	r2, [r2, #4]
 8000f60:	fb03 f202 	mul.w	r2, r3, r2
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	60da      	str	r2, [r3, #12]
		image->format = IMAGE_FORMAT_GRAYSCALE;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	741a      	strb	r2, [r3, #16]
		break;
 8000f6e:	e001      	b.n	8000f74 <createImage+0xd4>
	}
	default: {
		//should not be go in here
		return NULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e00e      	b.n	8000f92 <createImage+0xf2>
	}
	}

	image->pixels = SDRAM_BANK_ADDR + WRITE_READ_ADDR + allocatedSize;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <createImage+0x100>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <createImage+0x104>)
 8000f7a:	4413      	add	r3, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	609a      	str	r2, [r3, #8]
	allocatedSize += image->size;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <createImage+0x100>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <createImage+0x100>)
 8000f8e:	6013      	str	r3, [r2, #0]

	return image;
 8000f90:	68fb      	ldr	r3, [r7, #12]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000028 	.word	0x20000028
 8000fa4:	c0001000 	.word	0xc0001000

08000fa8 <DIP_filter2D>:
int compare_uint8(const void *a, const void *b) {
	return (*(uint8_t*) a - *(uint8_t*) b);
}

void DIP_filter2D(const Image *inImg, Image *outImg, int size,
		float filter[size][size]) {
 8000fa8:	b4b0      	push	{r4, r5, r7}
 8000faa:	b08d      	sub	sp, #52	; 0x34
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	1e4b      	subs	r3, r1, #1
void DIP_filter2D(const Image *inImg, Image *outImg, int size,
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	461d      	mov	r5, r3
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	016b      	lsls	r3, r5, #5
 8000fce:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000fd2:	0162      	lsls	r2, r4, #5

	int filtersize = size;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	613b      	str	r3, [r7, #16]

	for (int y = 0; y < inImg->height; y++) {
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fdc:	e0a0      	b.n	8001120 <DIP_filter2D+0x178>
		for (int x = 0; x < inImg->width; x++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe2:	e094      	b.n	800110e <DIP_filter2D+0x166>
			int sum = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
			for (int fy = -filtersize / 2; fy <= filtersize / 2; ++fy) {
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da00      	bge.n	8000ff0 <DIP_filter2D+0x48>
 8000fee:	3301      	adds	r3, #1
 8000ff0:	105b      	asrs	r3, r3, #1
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	623b      	str	r3, [r7, #32]
 8000ff6:	e067      	b.n	80010c8 <DIP_filter2D+0x120>
				for (int fx = -filtersize / 2; fx <= filtersize / 2; ++fx) {
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da00      	bge.n	8001000 <DIP_filter2D+0x58>
 8000ffe:	3301      	adds	r3, #1
 8001000:	105b      	asrs	r3, r3, #1
 8001002:	425b      	negs	r3, r3
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e053      	b.n	80010b0 <DIP_filter2D+0x108>
					int pixelValue = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
					if (y + fy > inImg->height - 1 || x + fx > inImg->width - 1
 800100c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	4413      	add	r3, r2
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	3b01      	subs	r3, #1
 800101a:	429a      	cmp	r2, r3
 800101c:	d812      	bhi.n	8001044 <DIP_filter2D+0x9c>
 800101e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	4413      	add	r3, r2
 8001024:	461a      	mov	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	3b01      	subs	r3, #1
 800102c:	429a      	cmp	r2, r3
 800102e:	d809      	bhi.n	8001044 <DIP_filter2D+0x9c>
							|| y + fy < 0 || x + fx < 0) {
 8001030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001032:	6a3b      	ldr	r3, [r7, #32]
 8001034:	4413      	add	r3, r2
 8001036:	2b00      	cmp	r3, #0
 8001038:	db04      	blt.n	8001044 <DIP_filter2D+0x9c>
 800103a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	4413      	add	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	da02      	bge.n	800104a <DIP_filter2D+0xa2>
						pixelValue = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	e010      	b.n	800106c <DIP_filter2D+0xc4>
					} else {
						pixelValue = inImg->pixels[(y + fy) * inImg->width
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	4403      	add	r3, r0
 8001054:	4618      	mov	r0, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	fb00 f303 	mul.w	r3, r0, r3
								+ (x + fx)];
 800105e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001060:	69f8      	ldr	r0, [r7, #28]
 8001062:	4420      	add	r0, r4
 8001064:	4403      	add	r3, r0
						pixelValue = inImg->pixels[(y + fy) * inImg->width
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	61bb      	str	r3, [r7, #24]
					}
					sum += ((float) pixelValue * filter[fy][fx]);
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001076:	460a      	mov	r2, r1
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	441a      	add	r2, r3
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a4:	ee17 3a90 	vmov	r3, s15
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
				for (int fx = -filtersize / 2; fx <= filtersize / 2; ++fx) {
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	da00      	bge.n	80010b8 <DIP_filter2D+0x110>
 80010b6:	3301      	adds	r3, #1
 80010b8:	105b      	asrs	r3, r3, #1
 80010ba:	461a      	mov	r2, r3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	4293      	cmp	r3, r2
 80010c0:	dda2      	ble.n	8001008 <DIP_filter2D+0x60>
			for (int fy = -filtersize / 2; fy <= filtersize / 2; ++fy) {
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	3301      	adds	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da00      	bge.n	80010d0 <DIP_filter2D+0x128>
 80010ce:	3301      	adds	r3, #1
 80010d0:	105b      	asrs	r3, r3, #1
 80010d2:	461a      	mov	r2, r3
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	4293      	cmp	r3, r2
 80010d8:	dd8e      	ble.n	8000ff8 <DIP_filter2D+0x50>
				}
			}

			sum = sum < 0 ? 0 : (sum > 255 ? 255 : sum);
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db04      	blt.n	80010ea <DIP_filter2D+0x142>
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	bfa8      	it	ge
 80010e6:	23ff      	movge	r3, #255	; 0xff
 80010e8:	e000      	b.n	80010ec <DIP_filter2D+0x144>
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
			outImg->pixels[y * inImg->width + x] = (uint8_t) sum; // Normalize by dividing by 9 for a 3x3 filter
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010f8:	fb03 f000 	mul.w	r0, r3, r0
 80010fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fe:	4403      	add	r3, r0
 8001100:	4413      	add	r3, r2
 8001102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
		for (int x = 0; x < inImg->width; x++) {
 8001108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110a:	3301      	adds	r3, #1
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001114:	429a      	cmp	r2, r3
 8001116:	f63f af65 	bhi.w	8000fe4 <DIP_filter2D+0x3c>
	for (int y = 0; y < inImg->height; y++) {
 800111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111c:	3301      	adds	r3, #1
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001126:	429a      	cmp	r2, r3
 8001128:	f63f af59 	bhi.w	8000fde <DIP_filter2D+0x36>
		}
	}

}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3734      	adds	r7, #52	; 0x34
 8001132:	46bd      	mov	sp, r7
 8001134:	bcb0      	pop	{r4, r5, r7}
 8001136:	4770      	bx	lr

08001138 <translate>:


// affine transforms

// Function to perform translation
void translate(const Image *inImg, Image *outImg, int dx, int dy) {
 8001138:	b480      	push	{r7}
 800113a:	b08b      	sub	sp, #44	; 0x2c
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < inImg->size; i++)outImg->pixels[i] = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
 800114a:	e008      	b.n	800115e <translate+0x26>
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	4413      	add	r3, r2
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	3301      	adds	r3, #1
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f1      	bhi.n	800114c <translate+0x14>

    for (int i = 0; i < inImg->height; i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
 800116c:	e03b      	b.n	80011e6 <translate+0xae>
        for (int j = 0; j < inImg->width; j++) {
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e030      	b.n	80011d6 <translate+0x9e>
            int newX = j - dx;
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	61bb      	str	r3, [r7, #24]
            int newY = i - dy;
 800117c:	6a3a      	ldr	r2, [r7, #32]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]

            if (newX >= 0 && newX < inImg->width && newY >= 0 && newY < inImg->height) {
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db22      	blt.n	80011d0 <translate+0x98>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	429a      	cmp	r2, r3
 8001192:	d91d      	bls.n	80011d0 <translate+0x98>
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db1a      	blt.n	80011d0 <translate+0x98>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d915      	bls.n	80011d0 <translate+0x98>
                outImg->pixels[newY * inImg->width + newX] = inImg->pixels[i * inImg->width + j];
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6a39      	ldr	r1, [r7, #32]
 80011ae:	fb03 f101 	mul.w	r1, r3, r1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	440b      	add	r3, r1
 80011b6:	441a      	add	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	6899      	ldr	r1, [r3, #8]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6978      	ldr	r0, [r7, #20]
 80011c2:	fb03 f000 	mul.w	r0, r3, r0
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4403      	add	r3, r0
 80011ca:	440b      	add	r3, r1
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < inImg->width; j++) {
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	3301      	adds	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8c9      	bhi.n	8001174 <translate+0x3c>
    for (int i = 0; i < inImg->height; i++) {
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	3301      	adds	r3, #1
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8be      	bhi.n	800116e <translate+0x36>
            }
        }
    }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	372c      	adds	r7, #44	; 0x2c
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <DIP_scale>:


// Function to perform scaling
void DIP_scale(const Image *inImg, Image *outImg, float scaleX, float scaleY) {
 80011fe:	b480      	push	{r7}
 8001200:	b08b      	sub	sp, #44	; 0x2c
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	ed87 0a01 	vstr	s0, [r7, #4]
 800120c:	edc7 0a00 	vstr	s1, [r7]

	for (int i = 0; i < inImg->size; i++)outImg->pixels[i] = 0x00;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
 8001214:	e008      	b.n	8001228 <DIP_scale+0x2a>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	4413      	add	r3, r2
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	3301      	adds	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	429a      	cmp	r2, r3
 8001230:	d8f1      	bhi.n	8001216 <DIP_scale+0x18>

    for (int i = 0; i < inImg->height; i++) {
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
 8001236:	e04f      	b.n	80012d8 <DIP_scale+0xda>
        for (int j = 0; j < inImg->width; j++) {
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	e044      	b.n	80012c8 <DIP_scale+0xca>
            int newX = (int)((float)j * (float)scaleX);
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001248:	edd7 7a01 	vldr	s15, [r7, #4]
 800124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001254:	ee17 3a90 	vmov	r3, s15
 8001258:	61bb      	str	r3, [r7, #24]
            int newY = (int)((float)i * (float)scaleY);
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001264:	edd7 7a00 	vldr	s15, [r7]
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001270:	ee17 3a90 	vmov	r3, s15
 8001274:	617b      	str	r3, [r7, #20]

            if (newX >= 0 && newX < inImg->width && newY >= 0 && newY < inImg->height) {
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	db22      	blt.n	80012c2 <DIP_scale+0xc4>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	429a      	cmp	r2, r3
 8001284:	d91d      	bls.n	80012c2 <DIP_scale+0xc4>
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db1a      	blt.n	80012c2 <DIP_scale+0xc4>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	429a      	cmp	r2, r3
 8001294:	d915      	bls.n	80012c2 <DIP_scale+0xc4>
            	outImg->pixels[newY * inImg->width + newX] = inImg->pixels[i * inImg->width + j];
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a39      	ldr	r1, [r7, #32]
 80012a0:	fb03 f101 	mul.w	r1, r3, r1
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	440b      	add	r3, r1
 80012a8:	441a      	add	r2, r3
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	6899      	ldr	r1, [r3, #8]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	fb03 f000 	mul.w	r0, r3, r0
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	4403      	add	r3, r0
 80012bc:	440b      	add	r3, r1
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < inImg->width; j++) {
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3301      	adds	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d8b5      	bhi.n	800123e <DIP_scale+0x40>
    for (int i = 0; i < inImg->height; i++) {
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	3301      	adds	r3, #1
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d8aa      	bhi.n	8001238 <DIP_scale+0x3a>
            }
        }
    }
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	372c      	adds	r7, #44	; 0x2c
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DIP_rotate>:

// Function to perform rotation
void DIP_rotate(const Image *inImg, Image *outImg, float angle) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08e      	sub	sp, #56	; 0x38
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	ed87 0a01 	vstr	s0, [r7, #4]
    float cosAngle = cos(angle);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff f8e6 	bl	80004d0 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	ec43 2b10 	vmov	d0, r2, r3
 800130c:	f004 fd88 	bl	8005e20 <cos>
 8001310:	ec53 2b10 	vmov	r2, r3, d0
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fbf4 	bl	8000b04 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    float sinAngle = sin(angle);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff f8d5 	bl	80004d0 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	ec43 2b10 	vmov	d0, r2, r3
 800132e:	f004 fdcb 	bl	8005ec8 <sin>
 8001332:	ec53 2b10 	vmov	r2, r3, d0
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fbe3 	bl	8000b04 <__aeabi_d2f>
 800133e:	4603      	mov	r3, r0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24

	for (int i = 0; i < inImg->size; i++)outImg->pixels[i] = 0x00;
 8001342:	2300      	movs	r3, #0
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
 8001346:	e008      	b.n	800135a <DIP_rotate+0x6a>
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134e:	4413      	add	r3, r2
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001356:	3301      	adds	r3, #1
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f1      	bhi.n	8001348 <DIP_rotate+0x58>

    int centerX = inImg->width / 2;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	623b      	str	r3, [r7, #32]
    int centerY = inImg->height / 2;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	085b      	lsrs	r3, r3, #1
 8001372:	61fb      	str	r3, [r7, #28]

    for (int i = 0; i < inImg->height; i++) {
 8001374:	2300      	movs	r3, #0
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
 8001378:	e071      	b.n	800145e <DIP_rotate+0x16e>
        for (int j = 0; j < inImg->width; j++) {
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800137e:	e066      	b.n	800144e <DIP_rotate+0x15e>
            int newX = (int)((j - centerX) * cosAngle - (i - centerY) * sinAngle) + centerX;
 8001380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b4:	ee17 2a90 	vmov	r2, s15
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	4413      	add	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
            int newY = (int)((j - centerX) * sinAngle + (i - centerY) * cosAngle) + centerY;
 80013be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80013e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f2:	ee17 2a90 	vmov	r2, s15
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]

            if (newX >= 0 && newX < inImg->width && newY >= 0 && newY < inImg->height) {
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db22      	blt.n	8001448 <DIP_rotate+0x158>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	429a      	cmp	r2, r3
 800140a:	d91d      	bls.n	8001448 <DIP_rotate+0x158>
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db1a      	blt.n	8001448 <DIP_rotate+0x158>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	429a      	cmp	r2, r3
 800141a:	d915      	bls.n	8001448 <DIP_rotate+0x158>
            	outImg->pixels[newY * inImg->width + newX] = inImg->pixels[i * inImg->width + j];
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001426:	fb03 f101 	mul.w	r1, r3, r1
 800142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142c:	440b      	add	r3, r1
 800142e:	441a      	add	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	6899      	ldr	r1, [r3, #8]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6978      	ldr	r0, [r7, #20]
 800143a:	fb03 f000 	mul.w	r0, r3, r0
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4403      	add	r3, r0
 8001442:	440b      	add	r3, r1
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < inImg->width; j++) {
 8001448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144a:	3301      	adds	r3, #1
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	429a      	cmp	r2, r3
 8001456:	d893      	bhi.n	8001380 <DIP_rotate+0x90>
    for (int i = 0; i < inImg->height; i++) {
 8001458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145a:	3301      	adds	r3, #1
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001464:	429a      	cmp	r2, r3
 8001466:	d888      	bhi.n	800137a <DIP_rotate+0x8a>
            }
        }
    }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3738      	adds	r7, #56	; 0x38
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <DIP_shear>:

// Function to perform shear
void DIP_shear(const Image *inImg, Image *outImg, float shx, float shy) {
 8001472:	b480      	push	{r7}
 8001474:	b08b      	sub	sp, #44	; 0x2c
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001480:	edc7 0a00 	vstr	s1, [r7]

	for (int i = 0; i < inImg->size; i++)outImg->pixels[i] = 0x00;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
 8001488:	e008      	b.n	800149c <DIP_shear+0x2a>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	4413      	add	r3, r2
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	3301      	adds	r3, #1
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d8f1      	bhi.n	800148a <DIP_shear+0x18>

    for (int i = 0; i < inImg->height; i++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
 80014aa:	e053      	b.n	8001554 <DIP_shear+0xe2>
        for (int j = 0; j < inImg->width; j++) {
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	e048      	b.n	8001544 <DIP_shear+0xd2>
            int newX = j + (int)(shx * i);
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c8:	ee17 2a90 	vmov	r2, s15
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
            int newY = i + (int)(shy * j);
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014dc:	edd7 7a00 	vldr	s15, [r7]
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e8:	ee17 2a90 	vmov	r2, s15
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]

            if (newX >= 0 && newX < inImg->width && newY >= 0 && newY < inImg->height) {
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db22      	blt.n	800153e <DIP_shear+0xcc>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d91d      	bls.n	800153e <DIP_shear+0xcc>
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db1a      	blt.n	800153e <DIP_shear+0xcc>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	429a      	cmp	r2, r3
 8001510:	d915      	bls.n	800153e <DIP_shear+0xcc>
            	outImg->pixels[newY * inImg->width + newX] = inImg->pixels[i * inImg->width + j];
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a39      	ldr	r1, [r7, #32]
 800151c:	fb03 f101 	mul.w	r1, r3, r1
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	440b      	add	r3, r1
 8001524:	441a      	add	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	6899      	ldr	r1, [r3, #8]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	fb03 f000 	mul.w	r0, r3, r0
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	4403      	add	r3, r0
 8001538:	440b      	add	r3, r1
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < inImg->width; j++) {
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3301      	adds	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	429a      	cmp	r2, r3
 800154c:	d8b1      	bhi.n	80014b2 <DIP_shear+0x40>
    for (int i = 0; i < inImg->height; i++) {
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	3301      	adds	r3, #1
 8001552:	623b      	str	r3, [r7, #32]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	429a      	cmp	r2, r3
 800155c:	d8a6      	bhi.n	80014ac <DIP_shear+0x3a>
            }
        }
    }
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	372c      	adds	r7, #44	; 0x2c
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LTDC_showImage>:
 *  Created on: Apr 22, 2024
 *      Author: ozand
 */
#include "DIP_LTDC.h"

uint8_t LTDC_showImage(Image *test){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

	switch(test->format){
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7c1b      	ldrb	r3, [r3, #16]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d002      	beq.n	8001582 <LTDC_showImage+0x16>
 800157c:	2b03      	cmp	r3, #3
 800157e:	d006      	beq.n	800158e <LTDC_showImage+0x22>
 8001580:	e00b      	b.n	800159a <LTDC_showImage+0x2e>
	case IMAGE_FORMAT_RGB565: {
		HAL_LTDC_SetPixelFormat(&hltdc, LTDC_PIXEL_FORMAT_RGB565, 0);break;
 8001582:	2200      	movs	r2, #0
 8001584:	2102      	movs	r1, #2
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <LTDC_showImage+0x54>)
 8001588:	f002 fa30 	bl	80039ec <HAL_LTDC_SetPixelFormat>
 800158c:	e007      	b.n	800159e <LTDC_showImage+0x32>
	}
	case IMAGE_FORMAT_GRAYSCALE: {
		HAL_LTDC_SetPixelFormat(&hltdc, LTDC_PIXEL_FORMAT_L8, 0);break;
 800158e:	2200      	movs	r2, #0
 8001590:	2105      	movs	r1, #5
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <LTDC_showImage+0x54>)
 8001594:	f002 fa2a 	bl	80039ec <HAL_LTDC_SetPixelFormat>
 8001598:	e001      	b.n	800159e <LTDC_showImage+0x32>
	}
	default:{
		// should not go there
		return -1;
 800159a:	23ff      	movs	r3, #255	; 0xff
 800159c:	e00b      	b.n	80015b6 <LTDC_showImage+0x4a>
	}
	}

	HAL_LTDC_SetAddress(&hltdc, (uint32_t) test->pixels,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2200      	movs	r2, #0
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <LTDC_showImage+0x54>)
 80015a8:	f002 fa56 	bl	8003a58 <HAL_LTDC_SetAddress>
	LTDC_LAYER_1);
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_IMMEDIATE);
 80015ac:	2101      	movs	r1, #1
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <LTDC_showImage+0x54>)
 80015b0:	f002 fa88 	bl	8003ac4 <HAL_LTDC_Reload>

	return 0;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000080 	.word	0x20000080

080015c4 <SERIAL_imageCapture>:
 *      Author: ozand
 */
#include "DIP.h"
#include "DIP_SERIAL.h"

void SERIAL_imageCapture(Image *img) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

	uint8_t request_start_sequence[3] = "STR";
 80015cc:	4a40      	ldr	r2, [pc, #256]	; (80016d0 <SERIAL_imageCapture+0x10c>)
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	4611      	mov	r1, r2
 80015d6:	8019      	strh	r1, [r3, #0]
 80015d8:	3302      	adds	r3, #2
 80015da:	0c12      	lsrs	r2, r2, #16
 80015dc:	701a      	strb	r2, [r3, #0]

	uint16_t _blocksize = 65535, _lastblocksize = 0;
 80015de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80015e4:	2300      	movs	r3, #0
 80015e6:	83fb      	strh	r3, [r7, #30]
	uint32_t i = 0, _blockCount = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]

	HAL_Delay(6000);
 80015f0:	f241 7070 	movw	r0, #6000	; 0x1770
 80015f4:	f001 fbd6 	bl	8002da4 <HAL_Delay>
	uint16_t sizear[3] = { img->width, img->height, img->format };
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	813b      	strh	r3, [r7, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	b29b      	uxth	r3, r3
 8001606:	817b      	strh	r3, [r7, #10]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7c1b      	ldrb	r3, [r3, #16]
 800160c:	b29b      	uxth	r3, r3
 800160e:	81bb      	strh	r3, [r7, #12]
	int size = 480 * 270;
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <SERIAL_imageCapture+0x110>)
 8001612:	617b      	str	r3, [r7, #20]

	if (size < 65536)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161a:	da01      	bge.n	8001620 <SERIAL_imageCapture+0x5c>
		_blocksize = size;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	84fb      	strh	r3, [r7, #38]	; 0x26

	_blockCount = size / _blocksize;
 8001620:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	fb92 f3f3 	sdiv	r3, r2, r3
 8001628:	61bb      	str	r3, [r7, #24]
	_lastblocksize = (uint16_t) (size % _blocksize);
 800162a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001632:	fb01 f202 	mul.w	r2, r1, r2
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	83fb      	strh	r3, [r7, #30]

	HAL_UART_Transmit(&huart1, request_start_sequence, 3, 100);
 800163a:	f107 0110 	add.w	r1, r7, #16
 800163e:	2364      	movs	r3, #100	; 0x64
 8001640:	2203      	movs	r2, #3
 8001642:	4825      	ldr	r0, [pc, #148]	; (80016d8 <SERIAL_imageCapture+0x114>)
 8001644:	f003 fd89 	bl	800515a <HAL_UART_Transmit>
	HAL_Delay(1);
 8001648:	2001      	movs	r0, #1
 800164a:	f001 fbab 	bl	8002da4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) (&img->width), sizeof(uint16_t), 100);
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	2202      	movs	r2, #2
 8001654:	4820      	ldr	r0, [pc, #128]	; (80016d8 <SERIAL_imageCapture+0x114>)
 8001656:	f003 fd80 	bl	800515a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) (&img->height), sizeof(uint16_t),
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	1d19      	adds	r1, r3, #4
 800165e:	2364      	movs	r3, #100	; 0x64
 8001660:	2202      	movs	r2, #2
 8001662:	481d      	ldr	r0, [pc, #116]	; (80016d8 <SERIAL_imageCapture+0x114>)
 8001664:	f003 fd79 	bl	800515a <HAL_UART_Transmit>
			100);
	HAL_UART_Transmit(&huart1, (uint8_t*) (&img->format), sizeof(uint16_t),
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f103 0110 	add.w	r1, r3, #16
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	2202      	movs	r2, #2
 8001672:	4819      	ldr	r0, [pc, #100]	; (80016d8 <SERIAL_imageCapture+0x114>)
 8001674:	f003 fd71 	bl	800515a <HAL_UART_Transmit>
			100);

	for (i = 0; i < _blockCount; i++)
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	e00f      	b.n	800169e <SERIAL_imageCapture+0xda>
		HAL_UART_Receive(&huart1, img->pixels + (i * _blocksize), _blocksize,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001684:	6a39      	ldr	r1, [r7, #32]
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	18d1      	adds	r1, r2, r3
 800168c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800168e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001692:	4811      	ldr	r0, [pc, #68]	; (80016d8 <SERIAL_imageCapture+0x114>)
 8001694:	f003 fde4 	bl	8005260 <HAL_UART_Receive>
	for (i = 0; i < _blockCount; i++)
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	3301      	adds	r3, #1
 800169c:	623b      	str	r3, [r7, #32]
 800169e:	6a3a      	ldr	r2, [r7, #32]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d3eb      	bcc.n	800167e <SERIAL_imageCapture+0xba>
				10000);

	if (_lastblocksize)
 80016a6:	8bfb      	ldrh	r3, [r7, #30]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00d      	beq.n	80016c8 <SERIAL_imageCapture+0x104>
		HAL_UART_Receive(&huart1, img->pixels + (i * _blocksize),
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016b2:	6a39      	ldr	r1, [r7, #32]
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	18d1      	adds	r1, r2, r3
 80016ba:	8bfa      	ldrh	r2, [r7, #30]
 80016bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <SERIAL_imageCapture+0x114>)
 80016c2:	f003 fdcd 	bl	8005260 <HAL_UART_Receive>
				_lastblocksize, 10000);

	return;
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
}
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	08006f60 	.word	0x08006f60
 80016d4:	0001fa40 	.word	0x0001fa40
 80016d8:	20000128 	.word	0x20000128

080016dc <SERIAL_imageSend>:

void SERIAL_imageSend(Image *img) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	uint8_t request_start_sequence[3] = "STW";
 80016e4:	4a3c      	ldr	r2, [pc, #240]	; (80017d8 <SERIAL_imageSend+0xfc>)
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	4611      	mov	r1, r2
 80016ee:	8019      	strh	r1, [r3, #0]
 80016f0:	3302      	adds	r3, #2
 80016f2:	0c12      	lsrs	r2, r2, #16
 80016f4:	701a      	strb	r2, [r3, #0]

	uint16_t _blocksize = 65535, _lastblocksize = 0;
 80016f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016fa:	83fb      	strh	r3, [r7, #30]
 80016fc:	2300      	movs	r3, #0
 80016fe:	82fb      	strh	r3, [r7, #22]
	uint32_t i = 0, _blockCount = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]

	if (img->size < 65536)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d202      	bcs.n	8001718 <SERIAL_imageSend+0x3c>
		_blocksize = img->size;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	83fb      	strh	r3, [r7, #30]

	_blockCount = img->size / _blocksize;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	8bfb      	ldrh	r3, [r7, #30]
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	613b      	str	r3, [r7, #16]
	_lastblocksize = (uint16_t) (img->size % _blocksize);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	8bfa      	ldrh	r2, [r7, #30]
 800172a:	fbb3 f1f2 	udiv	r1, r3, r2
 800172e:	fb01 f202 	mul.w	r2, r1, r2
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	82fb      	strh	r3, [r7, #22]

	HAL_UART_Transmit(&huart1, request_start_sequence, 3, 100);
 8001736:	f107 010c 	add.w	r1, r7, #12
 800173a:	2364      	movs	r3, #100	; 0x64
 800173c:	2203      	movs	r2, #3
 800173e:	4827      	ldr	r0, [pc, #156]	; (80017dc <SERIAL_imageSend+0x100>)
 8001740:	f003 fd0b 	bl	800515a <HAL_UART_Transmit>
	HAL_Delay(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f001 fb2d 	bl	8002da4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) (&img->width), sizeof(uint16_t), 100);
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	2364      	movs	r3, #100	; 0x64
 800174e:	2202      	movs	r2, #2
 8001750:	4822      	ldr	r0, [pc, #136]	; (80017dc <SERIAL_imageSend+0x100>)
 8001752:	f003 fd02 	bl	800515a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) (&img->height), sizeof(uint16_t),
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	1d19      	adds	r1, r3, #4
 800175a:	2364      	movs	r3, #100	; 0x64
 800175c:	2202      	movs	r2, #2
 800175e:	481f      	ldr	r0, [pc, #124]	; (80017dc <SERIAL_imageSend+0x100>)
 8001760:	f003 fcfb 	bl	800515a <HAL_UART_Transmit>
			100);
	HAL_UART_Transmit(&huart1, (uint8_t*) (&img->format), sizeof(uint8_t),
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f103 0110 	add.w	r1, r3, #16
 800176a:	2364      	movs	r3, #100	; 0x64
 800176c:	2201      	movs	r2, #1
 800176e:	481b      	ldr	r0, [pc, #108]	; (80017dc <SERIAL_imageSend+0x100>)
 8001770:	f003 fcf3 	bl	800515a <HAL_UART_Transmit>
			100);
	HAL_Delay(200);
 8001774:	20c8      	movs	r0, #200	; 0xc8
 8001776:	f001 fb15 	bl	8002da4 <HAL_Delay>
	for (i = 0; i < _blockCount; i++)
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	e00f      	b.n	80017a0 <SERIAL_imageSend+0xc4>
		HAL_UART_Transmit(&huart1, img->pixels + (i * _blocksize), _blocksize,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	8bfb      	ldrh	r3, [r7, #30]
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	18d1      	adds	r1, r2, r3
 800178e:	8bfa      	ldrh	r2, [r7, #30]
 8001790:	f242 7310 	movw	r3, #10000	; 0x2710
 8001794:	4811      	ldr	r0, [pc, #68]	; (80017dc <SERIAL_imageSend+0x100>)
 8001796:	f003 fce0 	bl	800515a <HAL_UART_Transmit>
	for (i = 0; i < _blockCount; i++)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	3301      	adds	r3, #1
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d3eb      	bcc.n	8001780 <SERIAL_imageSend+0xa4>
				10000);

	if (_lastblocksize)
 80017a8:	8afb      	ldrh	r3, [r7, #22]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00c      	beq.n	80017c8 <SERIAL_imageSend+0xec>
		HAL_UART_Transmit(&huart1, img->pixels + (i * _blocksize),
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	8bfb      	ldrh	r3, [r7, #30]
 80017b4:	69b9      	ldr	r1, [r7, #24]
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	18d1      	adds	r1, r2, r3
 80017bc:	8afa      	ldrh	r2, [r7, #22]
 80017be:	f242 7310 	movw	r3, #10000	; 0x2710
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <SERIAL_imageSend+0x100>)
 80017c4:	f003 fcc9 	bl	800515a <HAL_UART_Transmit>
				_lastblocksize, 10000);
	HAL_Delay(200);
 80017c8:	20c8      	movs	r0, #200	; 0xc8
 80017ca:	f001 faeb 	bl	8002da4 <HAL_Delay>
}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	08006f64 	.word	0x08006f64
 80017dc:	20000128 	.word	0x20000128

080017e0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017e4:	f3bf 8f4f 	dsb	sy
}
 80017e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017ea:	f3bf 8f6f 	isb	sy
}
 80017ee:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80017f0:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <SCB_EnableICache+0x48>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80017f8:	f3bf 8f4f 	dsb	sy
}
 80017fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017fe:	f3bf 8f6f 	isb	sy
}
 8001802:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <SCB_EnableICache+0x48>)
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <SCB_EnableICache+0x48>)
 800180a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001810:	f3bf 8f4f 	dsb	sy
}
 8001814:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001816:	f3bf 8f6f 	isb	sy
}
 800181a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <SCB_EnableDCache+0x84>)
 8001834:	2200      	movs	r2, #0
 8001836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800183a:	f3bf 8f4f 	dsb	sy
}
 800183e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <SCB_EnableDCache+0x84>)
 8001842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001846:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	0b5b      	lsrs	r3, r3, #13
 800184c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001850:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800185a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	015a      	lsls	r2, r3, #5
 8001860:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001864:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800186a:	4911      	ldr	r1, [pc, #68]	; (80018b0 <SCB_EnableDCache+0x84>)
 800186c:	4313      	orrs	r3, r2
 800186e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1e5a      	subs	r2, r3, #1
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ef      	bne.n	800185c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1e5a      	subs	r2, r3, #1
 8001880:	60fa      	str	r2, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1e5      	bne.n	8001852 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001886:	f3bf 8f4f 	dsb	sy
}
 800188a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <SCB_EnableDCache+0x84>)
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <SCB_EnableDCache+0x84>)
 8001892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001896:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001898:	f3bf 8f4f 	dsb	sy
}
 800189c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189e:	f3bf 8f6f 	isb	sy
}
 80018a2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <BSP_SDRAM_Initialization_Sequence>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram,
		FMC_SDRAM_CommandTypeDef *Command) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]

	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018be:	4b4d      	ldr	r3, [pc, #308]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 80018c0:	4a4d      	ldr	r2, [pc, #308]	; (80019f8 <BSP_SDRAM_Initialization_Sequence+0x144>)
 80018c2:	601a      	str	r2, [r3, #0]
	FMC_SDRAM_TimingTypeDef SDRAM_Timing;

	SDRAM_Timing.LoadToActiveDelay = 2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	60fb      	str	r3, [r7, #12]
	SDRAM_Timing.ExitSelfRefreshDelay = 6;
 80018c8:	2306      	movs	r3, #6
 80018ca:	613b      	str	r3, [r7, #16]
	SDRAM_Timing.SelfRefreshTime = 4;
 80018cc:	2304      	movs	r3, #4
 80018ce:	617b      	str	r3, [r7, #20]
	SDRAM_Timing.RowCycleDelay = 6;
 80018d0:	2306      	movs	r3, #6
 80018d2:	61bb      	str	r3, [r7, #24]
	SDRAM_Timing.WriteRecoveryTime = 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61fb      	str	r3, [r7, #28]
	SDRAM_Timing.RPDelay = 2;
 80018d8:	2302      	movs	r3, #2
 80018da:	623b      	str	r3, [r7, #32]
	SDRAM_Timing.RCDDelay = 2;
 80018dc:	2302      	movs	r3, #2
 80018de:	627b      	str	r3, [r7, #36]	; 0x24

	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80018e0:	4b44      	ldr	r3, [pc, #272]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80018e6:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80018ec:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 80018ee:	2204      	movs	r2, #4
 80018f0:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 80018f4:	2210      	movs	r2, #16
 80018f6:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018f8:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 80018fa:	2240      	movs	r2, #64	; 0x40
 80018fc:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80018fe:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 8001900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001904:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001906:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = SDCLOCK_PERIOD;
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 800190e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001912:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001914:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 8001916:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	; 0x28

	/* Initialize the SDRAM controller */
	if (HAL_SDRAM_Init(&hsdram1, &SDRAM_Timing) != HAL_OK) {
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4619      	mov	r1, r3
 8001928:	4832      	ldr	r0, [pc, #200]	; (80019f4 <BSP_SDRAM_Initialization_Sequence+0x140>)
 800192a:	f003 fb5f 	bl	8004fec <HAL_SDRAM_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <BSP_SDRAM_Initialization_Sequence+0x84>
		/* Initialization Error */
		Error_Handler();
 8001934:	f000 fef2 	bl	800271c <Error_Handler>
	}

	__IO uint32_t tmpmrd = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
	/* Step 3:  Configure a clock configuration enable command */
	Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]
	Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2210      	movs	r2, #16
 8001946:	605a      	str	r2, [r3, #4]
	Command->AutoRefreshNumber = 1;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2201      	movs	r2, #1
 800194c:	609a      	str	r2, [r3, #8]
	Command->ModeRegisterDefinition = 0;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001958:	6839      	ldr	r1, [r7, #0]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f003 fb7a 	bl	8005054 <HAL_SDRAM_SendCommand>

	/* Step 4: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8001960:	2001      	movs	r0, #1
 8001962:	f001 fa1f 	bl	8002da4 <HAL_Delay>

	/* Step 5: Configure a PALL (precharge all) command */
	Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2202      	movs	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
	Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2210      	movs	r2, #16
 8001970:	605a      	str	r2, [r3, #4]
	Command->AutoRefreshNumber = 1;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	609a      	str	r2, [r3, #8]
	Command->ModeRegisterDefinition = 0;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800197e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f003 fb65 	bl	8005054 <HAL_SDRAM_SendCommand>

	/* Step 6 : Configure a Auto-Refresh command */
	Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2203      	movs	r2, #3
 800198e:	601a      	str	r2, [r3, #0]
	Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2210      	movs	r2, #16
 8001994:	605a      	str	r2, [r3, #4]
	Command->AutoRefreshNumber = 8;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2208      	movs	r2, #8
 800199a:	609a      	str	r2, [r3, #8]
	Command->ModeRegisterDefinition = 0;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80019a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a6:	6839      	ldr	r1, [r7, #0]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f003 fb53 	bl	8005054 <HAL_SDRAM_SendCommand>

	/* Step 7: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 80019ae:	f44f 7308 	mov.w	r3, #544	; 0x220
 80019b2:	60bb      	str	r3, [r7, #8]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2204      	movs	r2, #4
 80019b8:	601a      	str	r2, [r3, #0]
	Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2210      	movs	r2, #16
 80019be:	605a      	str	r2, [r3, #4]
	Command->AutoRefreshNumber = 1;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	609a      	str	r2, [r3, #8]
	Command->ModeRegisterDefinition = tmpmrd;
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80019cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f003 fb3e 	bl	8005054 <HAL_SDRAM_SendCommand>

	/* Step 8: Set the refresh rate counter */
	/* (15.62 us x Freq) - 20 */
	/* Set the device refresh counter */
	hsdram->Instance->SDRTR |= ((uint32_t) ((1292) << 1));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6959      	ldr	r1, [r3, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	f640 2318 	movw	r3, #2584	; 0xa18
 80019e6:	430b      	orrs	r3, r1
 80019e8:	6153      	str	r3, [r2, #20]

}
 80019ea:	bf00      	nop
 80019ec:	3728      	adds	r7, #40	; 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200001b0 	.word	0x200001b0
 80019f8:	a0000140 	.word	0xa0000140

080019fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019fc:	b5b0      	push	{r4, r5, r7, lr}
 80019fe:	b094      	sub	sp, #80	; 0x50
 8001a00:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8001a02:	f7ff feed 	bl	80017e0 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8001a06:	f7ff ff11 	bl	800182c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a0a:	f001 f96e 	bl	8002cea <HAL_Init>

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8001a0e:	f000 fe2b 	bl	8002668 <MPU_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a12:	f000 f8cd 	bl	8001bb0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a16:	f000 fa6b 	bl	8001ef0 <MX_GPIO_Init>
	MX_LTDC_Init();
 8001a1a:	f000 f967 	bl	8001cec <MX_LTDC_Init>
	MX_DMA2D_Init();
 8001a1e:	f000 f933 	bl	8001c88 <MX_DMA2D_Init>
	MX_FMC_Init();
 8001a22:	f000 fa15 	bl	8001e50 <MX_FMC_Init>
	MX_USART1_UART_Init();
 8001a26:	f000 f9e3 	bl	8001df0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8001a2a:	4958      	ldr	r1, [pc, #352]	; (8001b8c <main+0x190>)
 8001a2c:	4858      	ldr	r0, [pc, #352]	; (8001b90 <main+0x194>)
 8001a2e:	f7ff ff41 	bl	80018b4 <BSP_SDRAM_Initialization_Sequence>

	/* Write data to the SDRAM memory */

	Image *test_sdram = createImage(IMAGE_RES_480x272, IMAGE_FORMAT_RGB565);
 8001a32:	2101      	movs	r1, #1
 8001a34:	2002      	movs	r0, #2
 8001a36:	f7ff fa33 	bl	8000ea0 <createImage>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	64fb      	str	r3, [r7, #76]	; 0x4c

	for (uwIndex = 0; uwIndex < 480 * 270 / 2; uwIndex++) {
 8001a3e:	4b55      	ldr	r3, [pc, #340]	; (8001b94 <main+0x198>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e01d      	b.n	8001a82 <main+0x86>
		uint32_t towrite = (t1_480x270_map[uwIndex * 2 + 0] << 0)
 8001a46:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <main+0x198>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <main+0x19c>)
 8001a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a52:	4619      	mov	r1, r3
				| (t1_480x270_map[uwIndex * 2 + 1] << 16);
 8001a54:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <main+0x198>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <main+0x19c>)
 8001a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a62:	041b      	lsls	r3, r3, #16
 8001a64:	430b      	orrs	r3, r1
		uint32_t towrite = (t1_480x270_map[uwIndex * 2 + 0] << 0)
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
		*(__IO uint32_t*) (test_sdram->pixels + 4 * uwIndex) = towrite;
 8001a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <main+0x198>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a76:	601a      	str	r2, [r3, #0]
	for (uwIndex = 0; uwIndex < 480 * 270 / 2; uwIndex++) {
 8001a78:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <main+0x198>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <main+0x198>)
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <main+0x198>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f64f 521f 	movw	r2, #64799	; 0xfd1f
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d9db      	bls.n	8001a46 <main+0x4a>
	}

	LTDC_showImage(test_sdram);
 8001a8e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a90:	f7ff fd6c 	bl	800156c <LTDC_showImage>

	Image *test = (Image*) createImage(IMAGE_RES_480x272,
 8001a94:	2103      	movs	r1, #3
 8001a96:	2002      	movs	r0, #2
 8001a98:	f7ff fa02 	bl	8000ea0 <createImage>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	64bb      	str	r3, [r7, #72]	; 0x48
	IMAGE_FORMAT_GRAYSCALE);

	SERIAL_imageCapture(test);
 8001aa0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001aa2:	f7ff fd8f 	bl	80015c4 <SERIAL_imageCapture>

	LTDC_showImage(test);
 8001aa6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001aa8:	f7ff fd60 	bl	800156c <LTDC_showImage>

	SERIAL_imageSend(test);
 8001aac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001aae:	f7ff fe15 	bl	80016dc <SERIAL_imageSend>

	 SERIAL_imageSend(labeling);


	 */
	Image *trans = (Image*) createImage(IMAGE_RES_480x272,
 8001ab2:	2103      	movs	r1, #3
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f7ff f9f3 	bl	8000ea0 <createImage>
 8001aba:	4603      	mov	r3, r0
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
	IMAGE_FORMAT_GRAYSCALE);

	translate(test, trans, 10, 10);  // Translate by dx = 10, dy = 10
 8001abe:	230a      	movs	r3, #10
 8001ac0:	220a      	movs	r2, #10
 8001ac2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ac4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ac6:	f7ff fb37 	bl	8001138 <translate>

	LTDC_showImage(trans);
 8001aca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001acc:	f7ff fd4e 	bl	800156c <LTDC_showImage>

	SERIAL_imageSend(trans);
 8001ad0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ad2:	f7ff fe03 	bl	80016dc <SERIAL_imageSend>

	Image *scale = (Image*) createImage(IMAGE_RES_480x272,
 8001ad6:	2103      	movs	r1, #3
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7ff f9e1 	bl	8000ea0 <createImage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	643b      	str	r3, [r7, #64]	; 0x40
	IMAGE_FORMAT_GRAYSCALE);

	float scaleX = 1.2f;
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <main+0x1a0>)
 8001ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
	float scaleY = 1.2f;
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <main+0x1a0>)
 8001ae8:	63bb      	str	r3, [r7, #56]	; 0x38
	DIP_scale(test, scale, scaleX, scaleY); // Scale by 1.5 in both x and y directions
 8001aea:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8001aee:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001af2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001af4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001af6:	f7ff fb82 	bl	80011fe <DIP_scale>

	LTDC_showImage(scale);
 8001afa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001afc:	f7ff fd36 	bl	800156c <LTDC_showImage>

	SERIAL_imageSend(scale);
 8001b00:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001b02:	f7ff fdeb 	bl	80016dc <SERIAL_imageSend>

	Image *rotate = (Image*) createImage(IMAGE_RES_480x272,
 8001b06:	2103      	movs	r1, #3
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f7ff f9c9 	bl	8000ea0 <createImage>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
	IMAGE_FORMAT_GRAYSCALE);

	DIP_rotate(test, rotate, 45);
 8001b12:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001ba0 <main+0x1a4>
 8001b16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b18:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b1a:	f7ff fbe9 	bl	80012f0 <DIP_rotate>

	LTDC_showImage(rotate);
 8001b1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b20:	f7ff fd24 	bl	800156c <LTDC_showImage>

	SERIAL_imageSend(rotate);
 8001b24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b26:	f7ff fdd9 	bl	80016dc <SERIAL_imageSend>


	 float filter[3][3] = {{1.0/9,1.0/9,1.0/9},
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <main+0x1a8>)
 8001b2c:	1d3c      	adds	r4, r7, #4
 8001b2e:	461d      	mov	r5, r3
 8001b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b38:	682b      	ldr	r3, [r5, #0]
 8001b3a:	6023      	str	r3, [r4, #0]
	 {1.0/9,1.0/9,1.0/9},
	 {1.0/9,1.0/9,1.0/9}};

	 Image *idealtest = (Image*) createImage(IMAGE_RES_480x272,
 8001b3c:	2103      	movs	r1, #3
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f7ff f9ae 	bl	8000ea0 <createImage>
 8001b44:	4603      	mov	r3, r0
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
	 IMAGE_FORMAT_GRAYSCALE);

	 DIP_filter2D(test, idealtest,3,filter);
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b50:	f7ff fa2a 	bl	8000fa8 <DIP_filter2D>

	 LTDC_showImage(idealtest);
 8001b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b56:	f7ff fd09 	bl	800156c <LTDC_showImage>

	 SERIAL_imageSend(idealtest);
 8001b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b5c:	f7ff fdbe 	bl	80016dc <SERIAL_imageSend>

	Image *shear = (Image*) createImage(IMAGE_RES_480x272,
 8001b60:	2103      	movs	r1, #3
 8001b62:	2002      	movs	r0, #2
 8001b64:	f7ff f99c 	bl	8000ea0 <createImage>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	IMAGE_FORMAT_GRAYSCALE);

	DIP_shear(test, shear, 0.2, 0.1);     // Shear along x and y axes
 8001b6c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8001ba8 <main+0x1ac>
 8001b70:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001bac <main+0x1b0>
 8001b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b76:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b78:	f7ff fc7b 	bl	8001472 <DIP_shear>

	LTDC_showImage(shear);
 8001b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b7e:	f7ff fcf5 	bl	800156c <LTDC_showImage>

	SERIAL_imageSend(shear);
 8001b82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b84:	f7ff fdaa 	bl	80016dc <SERIAL_imageSend>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001b88:	e7fe      	b.n	8001b88 <main+0x18c>
 8001b8a:	bf00      	nop
 8001b8c:	2000002c 	.word	0x2000002c
 8001b90:	200001b0 	.word	0x200001b0
 8001b94:	2000003c 	.word	0x2000003c
 8001b98:	08006fa4 	.word	0x08006fa4
 8001b9c:	3f99999a 	.word	0x3f99999a
 8001ba0:	42340000 	.word	0x42340000
 8001ba4:	08006f68 	.word	0x08006f68
 8001ba8:	3dcccccd 	.word	0x3dcccccd
 8001bac:	3e4ccccd 	.word	0x3e4ccccd

08001bb0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b094      	sub	sp, #80	; 0x50
 8001bb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	2230      	movs	r2, #48	; 0x30
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 f900 	bl	8005dc4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <SystemClock_Config+0xd0>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <SystemClock_Config+0xd0>)
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <SystemClock_Config+0xd0>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <SystemClock_Config+0xd4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <SystemClock_Config+0xd4>)
 8001bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <SystemClock_Config+0xd4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c04:	2302      	movs	r3, #2
 8001c06:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c10:	2302      	movs	r3, #2
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c14:	2300      	movs	r3, #0
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001c1c:	23d8      	movs	r3, #216	; 0xd8
 8001c1e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c20:	2302      	movs	r3, #2
 8001c22:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c28:	f107 0320 	add.w	r3, r7, #32
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 f963 	bl	8003ef8 <HAL_RCC_OscConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <SystemClock_Config+0x8c>
		Error_Handler();
 8001c38:	f000 fd70 	bl	800271c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001c3c:	f002 f90c 	bl	8003e58 <HAL_PWREx_EnableOverDrive>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0x9a>
		Error_Handler();
 8001c46:	f000 fd69 	bl	800271c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c5a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c60:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2107      	movs	r1, #7
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 fbe9 	bl	8004440 <HAL_RCC_ClockConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <SystemClock_Config+0xc8>
		Error_Handler();
 8001c74:	f000 fd52 	bl	800271c <Error_Handler>
	}
}
 8001c78:	bf00      	nop
 8001c7a:	3750      	adds	r7, #80	; 0x50
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000

08001c88 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <MX_DMA2D_Init+0x5c>)
 8001c8e:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <MX_DMA2D_Init+0x60>)
 8001c90:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_DMA2D_Init+0x5c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <MX_DMA2D_Init+0x5c>)
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_DMA2D_Init+0x5c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_DMA2D_Init+0x5c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_DMA2D_Init+0x5c>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_DMA2D_Init+0x5c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_DMA2D_Init+0x5c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8001cbc:	4809      	ldr	r0, [pc, #36]	; (8001ce4 <MX_DMA2D_Init+0x5c>)
 8001cbe:	f001 fa23 	bl	8003108 <HAL_DMA2D_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_DMA2D_Init+0x44>
		Error_Handler();
 8001cc8:	f000 fd28 	bl	800271c <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_DMA2D_Init+0x5c>)
 8001cd0:	f001 fa64 	bl	800319c <HAL_DMA2D_ConfigLayer>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_DMA2D_Init+0x56>
		Error_Handler();
 8001cda:	f000 fd1f 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000040 	.word	0x20000040
 8001ce8:	4002b000 	.word	0x4002b000

08001cec <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08e      	sub	sp, #56	; 0x38
 8001cf0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	2234      	movs	r2, #52	; 0x34
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 f863 	bl	8005dc4 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d00:	4a3a      	ldr	r2, [pc, #232]	; (8001dec <MX_LTDC_Init+0x100>)
 8001d02:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d04:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001d10:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 50;
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d1e:	2232      	movs	r2, #50	; 0x32
 8001d20:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 15;
 8001d22:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d24:	220f      	movs	r2, #15
 8001d26:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 93;
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d2a:	225d      	movs	r2, #93	; 0x5d
 8001d2c:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 27;
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d30:	221b      	movs	r2, #27
 8001d32:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 573;
 8001d34:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d36:	f240 223d 	movw	r2, #573	; 0x23d
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 299;
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d3e:	f240 122b 	movw	r2, #299	; 0x12b
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 581;
 8001d44:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d46:	f240 2245 	movw	r2, #581	; 0x245
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 303;
 8001d4c:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d4e:	f240 122f 	movw	r2, #303	; 0x12f
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8001d6c:	481e      	ldr	r0, [pc, #120]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001d6e:	f001 fc6d 	bl	800364c <HAL_LTDC_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_LTDC_Init+0x90>
		Error_Handler();
 8001d78:	f000 fcd0 	bl	800271c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001d80:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001d84:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 270;
 8001d8a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001d8e:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001d90:	2302      	movs	r3, #2
 8001d92:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001d94:	23ff      	movs	r3, #255	; 0xff
 8001d96:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da0:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001da2:	2305      	movs	r3, #5
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001daa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 270;
 8001db0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <MX_LTDC_Init+0xfc>)
 8001dd0:	f001 fdce 	bl	8003970 <HAL_LTDC_ConfigLayer>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_LTDC_Init+0xf2>
		Error_Handler();
 8001dda:	f000 fc9f 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3738      	adds	r7, #56	; 0x38
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000080 	.word	0x20000080
 8001dec:	40016800 	.word	0x40016800

08001df0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001df6:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <MX_USART1_UART_Init+0x58>)
 8001df8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 2000000;
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001dfc:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <MX_USART1_UART_Init+0x5c>)
 8001dfe:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001e14:	220c      	movs	r2, #12
 8001e16:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001e30:	4804      	ldr	r0, [pc, #16]	; (8001e44 <MX_USART1_UART_Init+0x54>)
 8001e32:	f003 f944 	bl	80050be <HAL_UART_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_USART1_UART_Init+0x50>
		Error_Handler();
 8001e3c:	f000 fc6e 	bl	800271c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000128 	.word	0x20000128
 8001e48:	40011000 	.word	0x40011000
 8001e4c:	001e8480 	.word	0x001e8480

08001e50 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
 8001e64:	615a      	str	r2, [r3, #20]
 8001e66:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001e6a:	4a20      	ldr	r2, [pc, #128]	; (8001eec <MX_FMC_Init+0x9c>)
 8001e6c:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001e88:	2240      	movs	r2, #64	; 0x40
 8001e8a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e92:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea0:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 6;
 8001eb4:	2306      	movs	r3, #6
 8001eb6:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 6;
 8001ebc:	2306      	movs	r3, #6
 8001ebe:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_FMC_Init+0x98>)
 8001ed2:	f003 f88b 	bl	8004fec <HAL_SDRAM_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_FMC_Init+0x90>
		Error_Handler();
 8001edc:	f000 fc1e 	bl	800271c <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8001ee0:	bf00      	nop
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200001b0 	.word	0x200001b0
 8001eec:	a0000140 	.word	0xa0000140

08001ef0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b090      	sub	sp, #64	; 0x40
 8001ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001f06:	4bae      	ldr	r3, [pc, #696]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4aad      	ldr	r2, [pc, #692]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f0c:	f043 0310 	orr.w	r3, r3, #16
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4bab      	ldr	r3, [pc, #684]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001f1e:	4ba8      	ldr	r3, [pc, #672]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4aa7      	ldr	r2, [pc, #668]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4ba5      	ldr	r3, [pc, #660]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	4ba2      	ldr	r3, [pc, #648]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4aa1      	ldr	r2, [pc, #644]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b9f      	ldr	r3, [pc, #636]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4e:	4b9c      	ldr	r3, [pc, #624]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a9b      	ldr	r2, [pc, #620]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b99      	ldr	r3, [pc, #612]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f66:	4b96      	ldr	r3, [pc, #600]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a95      	ldr	r2, [pc, #596]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b93      	ldr	r3, [pc, #588]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	4b90      	ldr	r3, [pc, #576]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a8f      	ldr	r2, [pc, #572]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b8d      	ldr	r3, [pc, #564]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f96:	4b8a      	ldr	r3, [pc, #552]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a89      	ldr	r2, [pc, #548]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b87      	ldr	r3, [pc, #540]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001fae:	4b84      	ldr	r3, [pc, #528]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a83      	ldr	r2, [pc, #524]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b81      	ldr	r3, [pc, #516]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8001fc6:	4b7e      	ldr	r3, [pc, #504]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a7d      	ldr	r2, [pc, #500]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b7b      	ldr	r3, [pc, #492]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001fde:	4b78      	ldr	r3, [pc, #480]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a77      	ldr	r2, [pc, #476]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff6:	4b72      	ldr	r3, [pc, #456]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a71      	ldr	r2, [pc, #452]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8001ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <MX_GPIO_Init+0x2d0>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800200e:	2201      	movs	r2, #1
 8002010:	2120      	movs	r1, #32
 8002012:	486c      	ldr	r0, [pc, #432]	; (80021c4 <MX_GPIO_Init+0x2d4>)
 8002014:	f001 fb00 	bl	8003618 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	210c      	movs	r1, #12
 800201c:	486a      	ldr	r0, [pc, #424]	; (80021c8 <MX_GPIO_Init+0x2d8>)
 800201e:	f001 fafb 	bl	8003618 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	2108      	movs	r1, #8
 8002026:	4869      	ldr	r0, [pc, #420]	; (80021cc <MX_GPIO_Init+0x2dc>)
 8002028:	f001 faf6 	bl	8003618 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002032:	4865      	ldr	r0, [pc, #404]	; (80021c8 <MX_GPIO_Init+0x2d8>)
 8002034:	f001 faf0 	bl	8003618 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800203e:	4864      	ldr	r0, [pc, #400]	; (80021d0 <MX_GPIO_Init+0x2e0>)
 8002040:	f001 faea 	bl	8003618 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 8002044:	2200      	movs	r2, #0
 8002046:	21c8      	movs	r1, #200	; 0xc8
 8002048:	4862      	ldr	r0, [pc, #392]	; (80021d4 <MX_GPIO_Init+0x2e4>)
 800204a:	f001 fae5 	bl	8003618 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800204e:	2308      	movs	r3, #8
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002052:	2300      	movs	r3, #0
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800205e:	4619      	mov	r1, r3
 8002060:	485d      	ldr	r0, [pc, #372]	; (80021d8 <MX_GPIO_Init+0x2e8>)
 8002062:	f001 f92d 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002066:	2304      	movs	r3, #4
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002076:	2309      	movs	r3, #9
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800207e:	4619      	mov	r1, r3
 8002080:	4855      	ldr	r0, [pc, #340]	; (80021d8 <MX_GPIO_Init+0x2e8>)
 8002082:	f001 f91d 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 8002086:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002098:	230b      	movs	r3, #11
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800209c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a0:	4619      	mov	r1, r3
 80020a2:	484c      	ldr	r0, [pc, #304]	; (80021d4 <MX_GPIO_Init+0x2e4>)
 80020a4:	f001 f90c 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 80020a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ae:	2312      	movs	r3, #18
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ba:	2304      	movs	r3, #4
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c2:	4619      	mov	r1, r3
 80020c4:	4845      	ldr	r0, [pc, #276]	; (80021dc <MX_GPIO_Init+0x2ec>)
 80020c6:	f001 f8fb 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 80020ca:	f643 4323 	movw	r3, #15395	; 0x3c23
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80020dc:	230a      	movs	r3, #10
 80020de:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e4:	4619      	mov	r1, r3
 80020e6:	483d      	ldr	r0, [pc, #244]	; (80021dc <MX_GPIO_Init+0x2ec>)
 80020e8:	f001 f8ea 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80020ec:	2310      	movs	r3, #16
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020fc:	2302      	movs	r3, #2
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002100:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002104:	4619      	mov	r1, r3
 8002106:	4835      	ldr	r0, [pc, #212]	; (80021dc <MX_GPIO_Init+0x2ec>)
 8002108:	f001 f8da 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800211c:	2308      	movs	r3, #8
 800211e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002124:	4619      	mov	r1, r3
 8002126:	4827      	ldr	r0, [pc, #156]	; (80021c4 <MX_GPIO_Init+0x2d4>)
 8002128:	f001 f8ca 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
	 PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 800212c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800213e:	230c      	movs	r3, #12
 8002140:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002146:	4619      	mov	r1, r3
 8002148:	4825      	ldr	r0, [pc, #148]	; (80021e0 <MX_GPIO_Init+0x2f0>)
 800214a:	f001 f8b9 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800214e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002160:	2301      	movs	r3, #1
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002168:	4619      	mov	r1, r3
 800216a:	481e      	ldr	r0, [pc, #120]	; (80021e4 <MX_GPIO_Init+0x2f4>)
 800216c:	f001 f8a8 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 8002170:	2360      	movs	r3, #96	; 0x60
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002180:	230d      	movs	r3, #13
 8002182:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002188:	4619      	mov	r1, r3
 800218a:	4813      	ldr	r0, [pc, #76]	; (80021d8 <MX_GPIO_Init+0x2e8>)
 800218c:	f001 f898 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002190:	2340      	movs	r3, #64	; 0x40
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021a0:	230a      	movs	r3, #10
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a8:	4619      	mov	r1, r3
 80021aa:	480c      	ldr	r0, [pc, #48]	; (80021dc <MX_GPIO_Init+0x2ec>)
 80021ac:	f001 f888 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80021b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b6:	2300      	movs	r3, #0
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e014      	b.n	80021e8 <MX_GPIO_Init+0x2f8>
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020c00 	.word	0x40020c00
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40022800 	.word	0x40022800
 80021d0:	40021c00 	.word	0x40021c00
 80021d4:	40021800 	.word	0x40021800
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020000 	.word	0x40020000
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ee:	4619      	mov	r1, r3
 80021f0:	48bb      	ldr	r0, [pc, #748]	; (80024e0 <MX_GPIO_Init+0x5f0>)
 80021f2:	f001 f865 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 80021f6:	2340      	movs	r3, #64	; 0x40
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021fa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021fe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002208:	4619      	mov	r1, r3
 800220a:	48b6      	ldr	r0, [pc, #728]	; (80024e4 <MX_GPIO_Init+0x5f4>)
 800220c:	f001 f858 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 8002210:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002222:	230a      	movs	r3, #10
 8002224:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222a:	4619      	mov	r1, r3
 800222c:	48ae      	ldr	r0, [pc, #696]	; (80024e8 <MX_GPIO_Init+0x5f8>)
 800222e:	f001 f847 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
	GPIO_InitStruct.Pin = SAI2_MCLKA_Pin | SAI2_SCKA_Pin | SAI2_FSA_Pin
 8002232:	23f0      	movs	r3, #240	; 0xf0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
			| SAI2_SDA_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002242:	230a      	movs	r3, #10
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224a:	4619      	mov	r1, r3
 800224c:	48a7      	ldr	r0, [pc, #668]	; (80024ec <MX_GPIO_Init+0x5fc>)
 800224e:	f001 f837 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SAI2_SDB_Pin */
	GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002264:	230a      	movs	r3, #10
 8002266:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800226c:	4619      	mov	r1, r3
 800226e:	48a0      	ldr	r0, [pc, #640]	; (80024f0 <MX_GPIO_Init+0x600>)
 8002270:	f001 f826 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002274:	2320      	movs	r3, #32
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002278:	2301      	movs	r3, #1
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002288:	4619      	mov	r1, r3
 800228a:	4896      	ldr	r0, [pc, #600]	; (80024e4 <MX_GPIO_Init+0x5f4>)
 800228c:	f001 f818 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002290:	2308      	movs	r3, #8
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80022a0:	230d      	movs	r3, #13
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a8:	4619      	mov	r1, r3
 80022aa:	488e      	ldr	r0, [pc, #568]	; (80024e4 <MX_GPIO_Init+0x5f4>)
 80022ac:	f001 f808 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 80022b0:	f241 030c 	movw	r3, #4108	; 0x100c
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c6:	4619      	mov	r1, r3
 80022c8:	4888      	ldr	r0, [pc, #544]	; (80024ec <MX_GPIO_Init+0x5fc>)
 80022ca:	f000 fff9 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80022ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d4:	2300      	movs	r3, #0
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80022dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e0:	4619      	mov	r1, r3
 80022e2:	4884      	ldr	r0, [pc, #528]	; (80024f4 <MX_GPIO_Init+0x604>)
 80022e4:	f000 ffec 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80022e8:	2308      	movs	r3, #8
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80022f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fc:	4619      	mov	r1, r3
 80022fe:	487e      	ldr	r0, [pc, #504]	; (80024f8 <MX_GPIO_Init+0x608>)
 8002300:	f000 ffde 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002316:	230d      	movs	r3, #13
 8002318:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231e:	4619      	mov	r1, r3
 8002320:	4873      	ldr	r0, [pc, #460]	; (80024f0 <MX_GPIO_Init+0x600>)
 8002322:	f000 ffcd 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002326:	2310      	movs	r3, #16
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232a:	2300      	movs	r3, #0
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002336:	4619      	mov	r1, r3
 8002338:	486a      	ldr	r0, [pc, #424]	; (80024e4 <MX_GPIO_Init+0x5f4>)
 800233a:	f000 ffc1 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800233e:	2304      	movs	r3, #4
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800234e:	230c      	movs	r3, #12
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002356:	4619      	mov	r1, r3
 8002358:	4862      	ldr	r0, [pc, #392]	; (80024e4 <MX_GPIO_Init+0x5f4>)
 800235a:	f000 ffb1 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800235e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002364:	2300      	movs	r3, #0
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800236c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002370:	4619      	mov	r1, r3
 8002372:	4862      	ldr	r0, [pc, #392]	; (80024fc <MX_GPIO_Init+0x60c>)
 8002374:	f000 ffa4 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002378:	2302      	movs	r3, #2
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2300      	movs	r3, #0
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002388:	2305      	movs	r3, #5
 800238a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002390:	4619      	mov	r1, r3
 8002392:	4856      	ldr	r0, [pc, #344]	; (80024ec <MX_GPIO_Init+0x5fc>)
 8002394:	f000 ff94 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ae:	4619      	mov	r1, r3
 80023b0:	4852      	ldr	r0, [pc, #328]	; (80024fc <MX_GPIO_Init+0x60c>)
 80023b2:	f000 ff85 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
	 DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D3_Pin | DCMI_D0_Pin | DCMI_D2_Pin
 80023b6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			| DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023c8:	230d      	movs	r3, #13
 80023ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d0:	4619      	mov	r1, r3
 80023d2:	484a      	ldr	r0, [pc, #296]	; (80024fc <MX_GPIO_Init+0x60c>)
 80023d4:	f000 ff74 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80023d8:	2301      	movs	r3, #1
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023e8:	2302      	movs	r3, #2
 80023ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f0:	4619      	mov	r1, r3
 80023f2:	483e      	ldr	r0, [pc, #248]	; (80024ec <MX_GPIO_Init+0x5fc>)
 80023f4:	f000 ff64 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80023f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2300      	movs	r3, #0
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800240a:	2301      	movs	r3, #1
 800240c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002412:	4619      	mov	r1, r3
 8002414:	4834      	ldr	r0, [pc, #208]	; (80024e8 <MX_GPIO_Init+0x5f8>)
 8002416:	f000 ff53 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800241a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002420:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800242a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800242e:	4619      	mov	r1, r3
 8002430:	482e      	ldr	r0, [pc, #184]	; (80024ec <MX_GPIO_Init+0x5fc>)
 8002432:	f000 ff45 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8002436:	23c0      	movs	r3, #192	; 0xc0
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002446:	2308      	movs	r3, #8
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244e:	4619      	mov	r1, r3
 8002450:	4828      	ldr	r0, [pc, #160]	; (80024f4 <MX_GPIO_Init+0x604>)
 8002452:	f000 ff35 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002456:	2310      	movs	r3, #16
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002466:	230a      	movs	r3, #10
 8002468:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800246a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246e:	4619      	mov	r1, r3
 8002470:	4822      	ldr	r0, [pc, #136]	; (80024fc <MX_GPIO_Init+0x60c>)
 8002472:	f000 ff25 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8002476:	23c8      	movs	r3, #200	; 0xc8
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	2301      	movs	r3, #1
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248a:	4619      	mov	r1, r3
 800248c:	4818      	ldr	r0, [pc, #96]	; (80024f0 <MX_GPIO_Init+0x600>)
 800248e:	f000 ff17 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
 8002492:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002498:	2303      	movs	r3, #3
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a4:	4619      	mov	r1, r3
 80024a6:	4816      	ldr	r0, [pc, #88]	; (8002500 <MX_GPIO_Init+0x610>)
 80024a8:	f000 ff0a 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 80024ac:	2305      	movs	r3, #5
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80024bc:	230a      	movs	r3, #10
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c4:	4619      	mov	r1, r3
 80024c6:	480b      	ldr	r0, [pc, #44]	; (80024f4 <MX_GPIO_Init+0x604>)
 80024c8:	f000 fefa 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 80024cc:	2332      	movs	r3, #50	; 0x32
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024dc:	230b      	movs	r3, #11
 80024de:	e011      	b.n	8002504 <MX_GPIO_Init+0x614>
 80024e0:	40022400 	.word	0x40022400
 80024e4:	40020c00 	.word	0x40020c00
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40022000 	.word	0x40022000
 80024f0:	40021800 	.word	0x40021800
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40022800 	.word	0x40022800
 80024fc:	40021c00 	.word	0x40021c00
 8002500:	40021400 	.word	0x40021400
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250a:	4619      	mov	r1, r3
 800250c:	4850      	ldr	r0, [pc, #320]	; (8002650 <MX_GPIO_Init+0x760>)
 800250e:	f000 fed7 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002512:	2304      	movs	r3, #4
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251e:	2303      	movs	r3, #3
 8002520:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002522:	2309      	movs	r3, #9
 8002524:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252a:	4619      	mov	r1, r3
 800252c:	4849      	ldr	r0, [pc, #292]	; (8002654 <MX_GPIO_Init+0x764>)
 800252e:	f000 fec7 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 8002532:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002544:	2309      	movs	r3, #9
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254c:	4619      	mov	r1, r3
 800254e:	4842      	ldr	r0, [pc, #264]	; (8002658 <MX_GPIO_Init+0x768>)
 8002550:	f000 feb6 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002554:	2304      	movs	r3, #4
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002558:	2300      	movs	r3, #0
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002564:	4619      	mov	r1, r3
 8002566:	483d      	ldr	r0, [pc, #244]	; (800265c <MX_GPIO_Init+0x76c>)
 8002568:	f000 feaa 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 800256c:	2386      	movs	r3, #134	; 0x86
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800257c:	230b      	movs	r3, #11
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002584:	4619      	mov	r1, r3
 8002586:	4836      	ldr	r0, [pc, #216]	; (8002660 <MX_GPIO_Init+0x770>)
 8002588:	f000 fe9a 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800258c:	2301      	movs	r3, #1
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002590:	2303      	movs	r3, #3
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259c:	4619      	mov	r1, r3
 800259e:	4830      	ldr	r0, [pc, #192]	; (8002660 <MX_GPIO_Init+0x770>)
 80025a0:	f000 fe8e 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 80025a4:	2350      	movs	r3, #80	; 0x50
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b0:	2300      	movs	r3, #0
 80025b2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80025b4:	230d      	movs	r3, #13
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025bc:	4619      	mov	r1, r3
 80025be:	4828      	ldr	r0, [pc, #160]	; (8002660 <MX_GPIO_Init+0x770>)
 80025c0:	f000 fe7e 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
	GPIO_InitStruct.Pin = LCD_SCL_Pin | LCD_SDA_Pin;
 80025c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ca:	2312      	movs	r3, #18
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d2:	2303      	movs	r3, #3
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025d6:	2304      	movs	r3, #4
 80025d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025de:	4619      	mov	r1, r3
 80025e0:	4820      	ldr	r0, [pc, #128]	; (8002664 <MX_GPIO_Init+0x774>)
 80025e2:	f000 fe6d 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 80025e6:	2328      	movs	r3, #40	; 0x28
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80025f6:	230a      	movs	r3, #10
 80025f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025fe:	4619      	mov	r1, r3
 8002600:	4817      	ldr	r0, [pc, #92]	; (8002660 <MX_GPIO_Init+0x770>)
 8002602:	f000 fe5d 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002606:	2340      	movs	r3, #64	; 0x40
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002616:	2309      	movs	r3, #9
 8002618:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800261a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800261e:	4619      	mov	r1, r3
 8002620:	4810      	ldr	r0, [pc, #64]	; (8002664 <MX_GPIO_Init+0x774>)
 8002622:	f000 fe4d 	bl	80032c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8002626:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2300      	movs	r3, #0
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002638:	2305      	movs	r3, #5
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002640:	4619      	mov	r1, r3
 8002642:	4804      	ldr	r0, [pc, #16]	; (8002654 <MX_GPIO_Init+0x764>)
 8002644:	f000 fe3c 	bl	80032c0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002648:	bf00      	nop
 800264a:	3740      	adds	r7, #64	; 0x40
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40020800 	.word	0x40020800
 8002654:	40020400 	.word	0x40020400
 8002658:	40020c00 	.word	0x40020c00
 800265c:	40021800 	.word	0x40021800
 8002660:	40020000 	.word	0x40020000
 8002664:	40021c00 	.word	0x40021c00

08002668 <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 800266e:	463b      	mov	r3, r7
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 800267a:	f000 fcc9 	bl	8003010 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800267e:	2301      	movs	r3, #1
 8002680:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002682:	2300      	movs	r3, #0
 8002684:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x00;
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800268a:	231f      	movs	r3, #31
 800268c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 800268e:	2387      	movs	r3, #135	; 0x87
 8002690:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002692:	2300      	movs	r3, #0
 8002694:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002696:	2300      	movs	r3, #0
 8002698:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800269a:	2301      	movs	r3, #1
 800269c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800269e:	2301      	movs	r3, #1
 80026a0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80026aa:	463b      	mov	r3, r7
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fce7 	bl	8003080 <HAL_MPU_ConfigRegion>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0xC0000000;
 80026b6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80026ba:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80026bc:	2317      	movs	r3, #23
 80026be:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80026c0:	2300      	movs	r3, #0
 80026c2:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80026c8:	2303      	movs	r3, #3
 80026ca:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80026dc:	463b      	mov	r3, r7
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fcce 	bl	8003080 <HAL_MPU_ConfigRegion>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80026e4:	2302      	movs	r3, #2
 80026e6:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0xA0000000;
 80026e8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80026ec:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 80026ee:	230c      	movs	r3, #12
 80026f0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80026fa:	2301      	movs	r3, #1
 80026fc:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80026fe:	2301      	movs	r3, #1
 8002700:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	73bb      	strb	r3, [r7, #14]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002706:	463b      	mov	r3, r7
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fcb9 	bl	8003080 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800270e:	2004      	movs	r0, #4
 8002710:	f000 fc96 	bl	8003040 <HAL_MPU_Enable>

}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002724:	e7fe      	b.n	8002724 <Error_Handler+0x8>
	...

08002728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_MspInit+0x44>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a0e      	ldr	r2, [pc, #56]	; (800276c <HAL_MspInit+0x44>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b0c      	ldr	r3, [pc, #48]	; (800276c <HAL_MspInit+0x44>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_MspInit+0x44>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a08      	ldr	r2, [pc, #32]	; (800276c <HAL_MspInit+0x44>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_MspInit+0x44>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <HAL_DMA2D_MspInit+0x38>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10b      	bne.n	800279a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_DMA2D_MspInit+0x3c>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_DMA2D_MspInit+0x3c>)
 8002788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_DMA2D_MspInit+0x3c>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	4002b000 	.word	0x4002b000
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0ae      	sub	sp, #184	; 0xb8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c8:	f107 0320 	add.w	r3, r7, #32
 80027cc:	2284      	movs	r2, #132	; 0x84
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 faf7 	bl	8005dc4 <memset>
  if(hltdc->Instance==LTDC)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a72      	ldr	r2, [pc, #456]	; (80029a4 <HAL_LTDC_MspInit+0x1f4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	f040 80dc 	bne.w	800299a <HAL_LTDC_MspInit+0x1ea>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80027e2:	2308      	movs	r3, #8
 80027e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80027e6:	2332      	movs	r3, #50	; 0x32
 80027e8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80027ea:	2302      	movs	r3, #2
 80027ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80027ee:	2302      	movs	r3, #2
 80027f0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80027f2:	2300      	movs	r3, #0
 80027f4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80027fa:	2300      	movs	r3, #0
 80027fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027fe:	f107 0320 	add.w	r3, r7, #32
 8002802:	4618      	mov	r0, r3
 8002804:	f002 f802 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 800280e:	f7ff ff85 	bl	800271c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002812:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a64      	ldr	r2, [pc, #400]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800282a:	4b5f      	ldr	r3, [pc, #380]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a5e      	ldr	r2, [pc, #376]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002830:	f043 0310 	orr.w	r3, r3, #16
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b5c      	ldr	r3, [pc, #368]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002842:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800285a:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002872:	4b4d      	ldr	r3, [pc, #308]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a4c      	ldr	r2, [pc, #304]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b4a      	ldr	r3, [pc, #296]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b44      	ldr	r3, [pc, #272]	; (80029a8 <HAL_LTDC_MspInit+0x1f8>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80028a2:	2310      	movs	r3, #16
 80028a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028ba:	230e      	movs	r3, #14
 80028bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80028c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4839      	ldr	r0, [pc, #228]	; (80029ac <HAL_LTDC_MspInit+0x1fc>)
 80028c8:	f000 fcfa 	bl	80032c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80028cc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80028d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028e6:	230e      	movs	r3, #14
 80028e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80028ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028f0:	4619      	mov	r1, r3
 80028f2:	482f      	ldr	r0, [pc, #188]	; (80029b0 <HAL_LTDC_MspInit+0x200>)
 80028f4:	f000 fce4 	bl	80032c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80028f8:	23f7      	movs	r3, #247	; 0xf7
 80028fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002910:	230e      	movs	r3, #14
 8002912:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002916:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800291a:	4619      	mov	r1, r3
 800291c:	4825      	ldr	r0, [pc, #148]	; (80029b4 <HAL_LTDC_MspInit+0x204>)
 800291e:	f000 fccf 	bl	80032c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800293c:	2309      	movs	r3, #9
 800293e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002942:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002946:	4619      	mov	r1, r3
 8002948:	481b      	ldr	r0, [pc, #108]	; (80029b8 <HAL_LTDC_MspInit+0x208>)
 800294a:	f000 fcb9 	bl	80032c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800294e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002968:	230e      	movs	r3, #14
 800296a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800296e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002972:	4619      	mov	r1, r3
 8002974:	4811      	ldr	r0, [pc, #68]	; (80029bc <HAL_LTDC_MspInit+0x20c>)
 8002976:	f000 fca3 	bl	80032c0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	2058      	movs	r0, #88	; 0x58
 8002980:	f000 fb0f 	bl	8002fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002984:	2058      	movs	r0, #88	; 0x58
 8002986:	f000 fb28 	bl	8002fda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	2059      	movs	r0, #89	; 0x59
 8002990:	f000 fb07 	bl	8002fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8002994:	2059      	movs	r0, #89	; 0x59
 8002996:	f000 fb20 	bl	8002fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800299a:	bf00      	nop
 800299c:	37b8      	adds	r7, #184	; 0xb8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40016800 	.word	0x40016800
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40022400 	.word	0x40022400
 80029b4:	40022800 	.word	0x40022800
 80029b8:	40021800 	.word	0x40021800
 80029bc:	40022000 	.word	0x40022000

080029c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b0ac      	sub	sp, #176	; 0xb0
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029d8:	f107 0318 	add.w	r3, r7, #24
 80029dc:	2284      	movs	r2, #132	; 0x84
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 f9ef 	bl	8005dc4 <memset>
  if(huart->Instance==USART1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a32      	ldr	r2, [pc, #200]	; (8002ab4 <HAL_UART_MspInit+0xf4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d15c      	bne.n	8002aaa <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029f0:	2340      	movs	r3, #64	; 0x40
 80029f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029f4:	2300      	movs	r3, #0
 80029f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029f8:	f107 0318 	add.w	r3, r7, #24
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 ff05 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a08:	f7ff fe88 	bl	800271c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <HAL_UART_MspInit+0xf8>)
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <HAL_UART_MspInit+0xf8>)
 8002a12:	f043 0310 	orr.w	r3, r3, #16
 8002a16:	6453      	str	r3, [r2, #68]	; 0x44
 8002a18:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_UART_MspInit+0xf8>)
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a24:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_UART_MspInit+0xf8>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <HAL_UART_MspInit+0xf8>)
 8002a2a:	f043 0302 	orr.w	r3, r3, #2
 8002a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_UART_MspInit+0xf8>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_UART_MspInit+0xf8>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <HAL_UART_MspInit+0xf8>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6313      	str	r3, [r2, #48]	; 0x30
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_UART_MspInit+0xf8>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a6c:	2307      	movs	r3, #7
 8002a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002a72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a76:	4619      	mov	r1, r3
 8002a78:	4810      	ldr	r0, [pc, #64]	; (8002abc <HAL_UART_MspInit+0xfc>)
 8002a7a:	f000 fc21 	bl	80032c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a98:	2307      	movs	r3, #7
 8002a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002a9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4806      	ldr	r0, [pc, #24]	; (8002ac0 <HAL_UART_MspInit+0x100>)
 8002aa6:	f000 fc0b 	bl	80032c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002aaa:	bf00      	nop
 8002aac:	37b0      	adds	r7, #176	; 0xb0
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40011000 	.word	0x40011000
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020400 	.word	0x40020400
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <HAL_FMC_MspInit+0x100>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d16d      	bne.n	8002bbc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002ae0:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <HAL_FMC_MspInit+0x100>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_FMC_MspInit+0x104>)
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <HAL_FMC_MspInit+0x104>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6393      	str	r3, [r2, #56]	; 0x38
 8002af2:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <HAL_FMC_MspInit+0x104>)
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002afe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b02:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b10:	230c      	movs	r3, #12
 8002b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	4619      	mov	r1, r3
 8002b18:	482c      	ldr	r0, [pc, #176]	; (8002bcc <HAL_FMC_MspInit+0x108>)
 8002b1a:	f000 fbd1 	bl	80032c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002b1e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b22:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b30:	230c      	movs	r3, #12
 8002b32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b34:	1d3b      	adds	r3, r7, #4
 8002b36:	4619      	mov	r1, r3
 8002b38:	4825      	ldr	r0, [pc, #148]	; (8002bd0 <HAL_FMC_MspInit+0x10c>)
 8002b3a:	f000 fbc1 	bl	80032c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002b3e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b42:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b50:	230c      	movs	r3, #12
 8002b52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	481e      	ldr	r0, [pc, #120]	; (8002bd4 <HAL_FMC_MspInit+0x110>)
 8002b5a:	f000 fbb1 	bl	80032c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002b5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002b62:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b70:	230c      	movs	r3, #12
 8002b72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	4817      	ldr	r0, [pc, #92]	; (8002bd8 <HAL_FMC_MspInit+0x114>)
 8002b7a:	f000 fba1 	bl	80032c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002b7e:	2328      	movs	r3, #40	; 0x28
 8002b80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b8e:	230c      	movs	r3, #12
 8002b90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b92:	1d3b      	adds	r3, r7, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4811      	ldr	r0, [pc, #68]	; (8002bdc <HAL_FMC_MspInit+0x118>)
 8002b98:	f000 fb92 	bl	80032c0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bac:	230c      	movs	r3, #12
 8002bae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480a      	ldr	r0, [pc, #40]	; (8002be0 <HAL_FMC_MspInit+0x11c>)
 8002bb6:	f000 fb83 	bl	80032c0 <HAL_GPIO_Init>
 8002bba:	e000      	b.n	8002bbe <HAL_FMC_MspInit+0xfa>
    return;
 8002bbc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	200001e4 	.word	0x200001e4
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40021800 	.word	0x40021800
 8002bd4:	40020c00 	.word	0x40020c00
 8002bd8:	40021400 	.word	0x40021400
 8002bdc:	40021c00 	.word	0x40021c00
 8002be0:	40020800 	.word	0x40020800

08002be4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002bec:	f7ff ff6a 	bl	8002ac4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <NMI_Handler+0x4>

08002bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <HardFault_Handler+0x4>

08002c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <MemManage_Handler+0x4>

08002c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c0e:	e7fe      	b.n	8002c0e <BusFault_Handler+0x4>

08002c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <UsageFault_Handler+0x4>

08002c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c44:	f000 f88e 	bl	8002d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <LTDC_IRQHandler+0x10>)
 8002c52:	f000 fdcb 	bl	80037ec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000080 	.word	0x20000080

08002c60 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <LTDC_ER_IRQHandler+0x10>)
 8002c66:	f000 fdc1 	bl	80037ec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000080 	.word	0x20000080

08002c74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <SystemInit+0x20>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <SystemInit+0x20>)
 8002c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c9c:	480d      	ldr	r0, [pc, #52]	; (8002cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c9e:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca4:	e002      	b.n	8002cac <LoopCopyDataInit>

08002ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002caa:	3304      	adds	r3, #4

08002cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb0:	d3f9      	bcc.n	8002ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cb4:	4c0b      	ldr	r4, [pc, #44]	; (8002ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb8:	e001      	b.n	8002cbe <LoopFillZerobss>

08002cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cbc:	3204      	adds	r2, #4

08002cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc0:	d3fb      	bcc.n	8002cba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cc2:	f7ff ffd7 	bl	8002c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cc6:	f003 f885 	bl	8005dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cca:	f7fe fe97 	bl	80019fc <main>
  bx  lr    
 8002cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cd0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002cdc:	08046610 	.word	0x08046610
  ldr r2, =_sbss
 8002ce0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002ce4:	200001ec 	.word	0x200001ec

08002ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce8:	e7fe      	b.n	8002ce8 <ADC_IRQHandler>

08002cea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cee:	2003      	movs	r0, #3
 8002cf0:	f000 f94c 	bl	8002f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f000 f805 	bl	8002d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cfa:	f7ff fd15 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_InitTick+0x54>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_InitTick+0x58>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f967 	bl	8002ff6 <HAL_SYSTICK_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00e      	b.n	8002d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b0f      	cmp	r3, #15
 8002d36:	d80a      	bhi.n	8002d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f000 f92f 	bl	8002fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <HAL_InitTick+0x5c>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e000      	b.n	8002d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000008 	.word	0x20000008
 8002d60:	20000004 	.word	0x20000004

08002d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_IncTick+0x20>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_IncTick+0x24>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4413      	add	r3, r2
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <HAL_IncTick+0x24>)
 8002d76:	6013      	str	r3, [r2, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000008 	.word	0x20000008
 8002d88:	200001e8 	.word	0x200001e8

08002d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_GetTick+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	200001e8 	.word	0x200001e8

08002da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff ffee 	bl	8002d8c <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d005      	beq.n	8002dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_Delay+0x44>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dca:	bf00      	nop
 8002dcc:	f7ff ffde 	bl	8002d8c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d8f7      	bhi.n	8002dcc <HAL_Delay+0x28>
  {
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000008 	.word	0x20000008

08002dec <__NVIC_SetPriorityGrouping>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <__NVIC_SetPriorityGrouping+0x40>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1a:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <__NVIC_SetPriorityGrouping+0x40>)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	60d3      	str	r3, [r2, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00
 8002e30:	05fa0000 	.word	0x05fa0000

08002e34 <__NVIC_GetPriorityGrouping>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <__NVIC_GetPriorityGrouping+0x18>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	f003 0307 	and.w	r3, r3, #7
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_EnableIRQ>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	db0b      	blt.n	8002e7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	f003 021f 	and.w	r2, r3, #31
 8002e68:	4907      	ldr	r1, [pc, #28]	; (8002e88 <__NVIC_EnableIRQ+0x38>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	2001      	movs	r0, #1
 8002e72:	fa00 f202 	lsl.w	r2, r0, r2
 8002e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000e100 	.word	0xe000e100

08002e8c <__NVIC_SetPriority>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	6039      	str	r1, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	db0a      	blt.n	8002eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	490c      	ldr	r1, [pc, #48]	; (8002ed8 <__NVIC_SetPriority+0x4c>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	0112      	lsls	r2, r2, #4
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002eb4:	e00a      	b.n	8002ecc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4908      	ldr	r1, [pc, #32]	; (8002edc <__NVIC_SetPriority+0x50>)
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	3b04      	subs	r3, #4
 8002ec4:	0112      	lsls	r2, r2, #4
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	440b      	add	r3, r1
 8002eca:	761a      	strb	r2, [r3, #24]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000e100 	.word	0xe000e100
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <NVIC_EncodePriority>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f1c3 0307 	rsb	r3, r3, #7
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	bf28      	it	cs
 8002efe:	2304      	movcs	r3, #4
 8002f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3304      	adds	r3, #4
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d902      	bls.n	8002f10 <NVIC_EncodePriority+0x30>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3b03      	subs	r3, #3
 8002f0e:	e000      	b.n	8002f12 <NVIC_EncodePriority+0x32>
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	f04f 32ff 	mov.w	r2, #4294967295
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	401a      	ands	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f28:	f04f 31ff 	mov.w	r1, #4294967295
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	43d9      	mvns	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	4313      	orrs	r3, r2
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3724      	adds	r7, #36	; 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f58:	d301      	bcc.n	8002f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e00f      	b.n	8002f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <SysTick_Config+0x40>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f66:	210f      	movs	r1, #15
 8002f68:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6c:	f7ff ff8e 	bl	8002e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <SysTick_Config+0x40>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f76:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <SysTick_Config+0x40>)
 8002f78:	2207      	movs	r2, #7
 8002f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	e000e010 	.word	0xe000e010

08002f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff29 	bl	8002dec <__NVIC_SetPriorityGrouping>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb4:	f7ff ff3e 	bl	8002e34 <__NVIC_GetPriorityGrouping>
 8002fb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	6978      	ldr	r0, [r7, #20]
 8002fc0:	f7ff ff8e 	bl	8002ee0 <NVIC_EncodePriority>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff5d 	bl	8002e8c <__NVIC_SetPriority>
}
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff31 	bl	8002e50 <__NVIC_EnableIRQ>
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff ffa2 	bl	8002f48 <SysTick_Config>
 8003004:	4603      	mov	r3, r0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003014:	f3bf 8f5f 	dmb	sy
}
 8003018:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <HAL_MPU_Disable+0x28>)
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	4a06      	ldr	r2, [pc, #24]	; (8003038 <HAL_MPU_Disable+0x28>)
 8003020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003024:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_MPU_Disable+0x2c>)
 8003028:	2200      	movs	r2, #0
 800302a:	605a      	str	r2, [r3, #4]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00
 800303c:	e000ed90 	.word	0xe000ed90

08003040 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003048:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <HAL_MPU_Enable+0x38>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_MPU_Enable+0x3c>)
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_MPU_Enable+0x3c>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800305e:	f3bf 8f4f 	dsb	sy
}
 8003062:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003064:	f3bf 8f6f 	isb	sy
}
 8003068:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000ed90 	.word	0xe000ed90
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	785a      	ldrb	r2, [r3, #1]
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_MPU_ConfigRegion+0x84>)
 800308e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d029      	beq.n	80030ec <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003098:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <HAL_MPU_ConfigRegion+0x84>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7b1b      	ldrb	r3, [r3, #12]
 80030a4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	7adb      	ldrb	r3, [r3, #11]
 80030aa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	7a9b      	ldrb	r3, [r3, #10]
 80030b2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7b5b      	ldrb	r3, [r3, #13]
 80030ba:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7b9b      	ldrb	r3, [r3, #14]
 80030c2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7bdb      	ldrb	r3, [r3, #15]
 80030ca:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7a5b      	ldrb	r3, [r3, #9]
 80030d2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7a1b      	ldrb	r3, [r3, #8]
 80030da:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030dc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030e6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030e8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80030ea:	e005      	b.n	80030f8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_MPU_ConfigRegion+0x84>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80030f2:	4b04      	ldr	r3, [pc, #16]	; (8003104 <HAL_MPU_ConfigRegion+0x84>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000ed90 	.word	0xe000ed90

08003108 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e039      	b.n	800318e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fb1e 	bl	8002770 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	f023 0107 	bic.w	r1, r3, #7
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_DMA2D_Init+0x90>)
 8003170:	4013      	ands	r3, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68d1      	ldr	r1, [r2, #12]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	430b      	orrs	r3, r1
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	ffffc000 	.word	0xffffc000

0800319c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_DMA2D_ConfigLayer+0x20>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e079      	b.n	80032b0 <HAL_DMA2D_ConfigLayer+0x114>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	3318      	adds	r3, #24
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80031e6:	4b35      	ldr	r3, [pc, #212]	; (80032bc <HAL_DMA2D_ConfigLayer+0x120>)
 80031e8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b0a      	cmp	r3, #10
 80031f0:	d003      	beq.n	80031fa <HAL_DMA2D_ConfigLayer+0x5e>
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b09      	cmp	r3, #9
 80031f8:	d107      	bne.n	800320a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	e005      	b.n	8003216 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d120      	bne.n	800325e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	43db      	mvns	r3, r3
 8003226:	ea02 0103 	and.w	r1, r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	430a      	orrs	r2, r1
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b0a      	cmp	r3, #10
 8003244:	d003      	beq.n	800324e <HAL_DMA2D_ConfigLayer+0xb2>
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b09      	cmp	r3, #9
 800324c:	d127      	bne.n	800329e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800325a:	629a      	str	r2, [r3, #40]	; 0x28
 800325c:	e01f      	b.n	800329e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43db      	mvns	r3, r3
 8003268:	ea02 0103 	and.w	r1, r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	430a      	orrs	r2, r1
 8003274:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b0a      	cmp	r3, #10
 8003286:	d003      	beq.n	8003290 <HAL_DMA2D_ConfigLayer+0xf4>
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b09      	cmp	r3, #9
 800328e:	d106      	bne.n	800329e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800329c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	ff03000f 	.word	0xff03000f

080032c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e175      	b.n	80035cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032e0:	2201      	movs	r2, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f040 8164 	bne.w	80035c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d005      	beq.n	8003316 <HAL_GPIO_Init+0x56>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d130      	bne.n	8003378 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800334c:	2201      	movs	r2, #1
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 0201 	and.w	r2, r3, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b03      	cmp	r3, #3
 8003382:	d017      	beq.n	80033b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d123      	bne.n	8003408 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	220f      	movs	r2, #15
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	08da      	lsrs	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3208      	adds	r2, #8
 8003402:	69b9      	ldr	r1, [r7, #24]
 8003404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80be 	beq.w	80035c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	4b66      	ldr	r3, [pc, #408]	; (80035e4 <HAL_GPIO_Init+0x324>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	4a65      	ldr	r2, [pc, #404]	; (80035e4 <HAL_GPIO_Init+0x324>)
 8003450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003454:	6453      	str	r3, [r2, #68]	; 0x44
 8003456:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <HAL_GPIO_Init+0x324>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003462:	4a61      	ldr	r2, [pc, #388]	; (80035e8 <HAL_GPIO_Init+0x328>)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	3302      	adds	r3, #2
 800346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	220f      	movs	r2, #15
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a58      	ldr	r2, [pc, #352]	; (80035ec <HAL_GPIO_Init+0x32c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d037      	beq.n	80034fe <HAL_GPIO_Init+0x23e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a57      	ldr	r2, [pc, #348]	; (80035f0 <HAL_GPIO_Init+0x330>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d031      	beq.n	80034fa <HAL_GPIO_Init+0x23a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a56      	ldr	r2, [pc, #344]	; (80035f4 <HAL_GPIO_Init+0x334>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02b      	beq.n	80034f6 <HAL_GPIO_Init+0x236>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a55      	ldr	r2, [pc, #340]	; (80035f8 <HAL_GPIO_Init+0x338>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d025      	beq.n	80034f2 <HAL_GPIO_Init+0x232>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a54      	ldr	r2, [pc, #336]	; (80035fc <HAL_GPIO_Init+0x33c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <HAL_GPIO_Init+0x22e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a53      	ldr	r2, [pc, #332]	; (8003600 <HAL_GPIO_Init+0x340>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d019      	beq.n	80034ea <HAL_GPIO_Init+0x22a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a52      	ldr	r2, [pc, #328]	; (8003604 <HAL_GPIO_Init+0x344>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_GPIO_Init+0x226>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a51      	ldr	r2, [pc, #324]	; (8003608 <HAL_GPIO_Init+0x348>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00d      	beq.n	80034e2 <HAL_GPIO_Init+0x222>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a50      	ldr	r2, [pc, #320]	; (800360c <HAL_GPIO_Init+0x34c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <HAL_GPIO_Init+0x21e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4f      	ldr	r2, [pc, #316]	; (8003610 <HAL_GPIO_Init+0x350>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_GPIO_Init+0x21a>
 80034d6:	2309      	movs	r3, #9
 80034d8:	e012      	b.n	8003500 <HAL_GPIO_Init+0x240>
 80034da:	230a      	movs	r3, #10
 80034dc:	e010      	b.n	8003500 <HAL_GPIO_Init+0x240>
 80034de:	2308      	movs	r3, #8
 80034e0:	e00e      	b.n	8003500 <HAL_GPIO_Init+0x240>
 80034e2:	2307      	movs	r3, #7
 80034e4:	e00c      	b.n	8003500 <HAL_GPIO_Init+0x240>
 80034e6:	2306      	movs	r3, #6
 80034e8:	e00a      	b.n	8003500 <HAL_GPIO_Init+0x240>
 80034ea:	2305      	movs	r3, #5
 80034ec:	e008      	b.n	8003500 <HAL_GPIO_Init+0x240>
 80034ee:	2304      	movs	r3, #4
 80034f0:	e006      	b.n	8003500 <HAL_GPIO_Init+0x240>
 80034f2:	2303      	movs	r3, #3
 80034f4:	e004      	b.n	8003500 <HAL_GPIO_Init+0x240>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e002      	b.n	8003500 <HAL_GPIO_Init+0x240>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_GPIO_Init+0x240>
 80034fe:	2300      	movs	r3, #0
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	f002 0203 	and.w	r2, r2, #3
 8003506:	0092      	lsls	r2, r2, #2
 8003508:	4093      	lsls	r3, r2
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003510:	4935      	ldr	r1, [pc, #212]	; (80035e8 <HAL_GPIO_Init+0x328>)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	3302      	adds	r3, #2
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800351e:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <HAL_GPIO_Init+0x354>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003542:	4a34      	ldr	r2, [pc, #208]	; (8003614 <HAL_GPIO_Init+0x354>)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003548:	4b32      	ldr	r3, [pc, #200]	; (8003614 <HAL_GPIO_Init+0x354>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800356c:	4a29      	ldr	r2, [pc, #164]	; (8003614 <HAL_GPIO_Init+0x354>)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003572:	4b28      	ldr	r3, [pc, #160]	; (8003614 <HAL_GPIO_Init+0x354>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003596:	4a1f      	ldr	r2, [pc, #124]	; (8003614 <HAL_GPIO_Init+0x354>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_GPIO_Init+0x354>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <HAL_GPIO_Init+0x354>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3301      	adds	r3, #1
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2b0f      	cmp	r3, #15
 80035d0:	f67f ae86 	bls.w	80032e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3724      	adds	r7, #36	; 0x24
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	40013800 	.word	0x40013800
 80035ec:	40020000 	.word	0x40020000
 80035f0:	40020400 	.word	0x40020400
 80035f4:	40020800 	.word	0x40020800
 80035f8:	40020c00 	.word	0x40020c00
 80035fc:	40021000 	.word	0x40021000
 8003600:	40021400 	.word	0x40021400
 8003604:	40021800 	.word	0x40021800
 8003608:	40021c00 	.word	0x40021c00
 800360c:	40022000 	.word	0x40022000
 8003610:	40022400 	.word	0x40022400
 8003614:	40013c00 	.word	0x40013c00

08003618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]
 8003624:	4613      	mov	r3, r2
 8003626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003628:	787b      	ldrb	r3, [r7, #1]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003634:	e003      	b.n	800363e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003636:	887b      	ldrh	r3, [r7, #2]
 8003638:	041a      	lsls	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	619a      	str	r2, [r3, #24]
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0bf      	b.n	80037de <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff f89c 	bl	80027b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800368e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6999      	ldr	r1, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80036a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6899      	ldr	r1, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_LTDC_Init+0x19c>)
 80036c0:	400b      	ands	r3, r1
 80036c2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	041b      	lsls	r3, r3, #16
 80036ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6899      	ldr	r1, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68d9      	ldr	r1, [r3, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <HAL_LTDC_Init+0x19c>)
 80036ee:	400b      	ands	r3, r1
 80036f0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68d9      	ldr	r1, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1a      	ldr	r2, [r3, #32]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6919      	ldr	r1, [r3, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <HAL_LTDC_Init+0x19c>)
 800371c:	400b      	ands	r3, r1
 800371e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6919      	ldr	r1, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6959      	ldr	r1, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_LTDC_Init+0x19c>)
 800374a:	400b      	ands	r3, r1
 800374c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	041b      	lsls	r3, r3, #16
 8003754:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6959      	ldr	r1, [r3, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0206 	orr.w	r2, r2, #6
 80037ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	f000f800 	.word	0xf000f800

080037ec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d023      	beq.n	8003856 <HAL_LTDC_IRQHandler+0x6a>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01e      	beq.n	8003856 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0204 	bic.w	r2, r2, #4
 8003826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2204      	movs	r2, #4
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2204      	movs	r2, #4
 8003844:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f86f 	bl	8003934 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d023      	beq.n	80038a8 <HAL_LTDC_IRQHandler+0xbc>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01e      	beq.n	80038a8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0202 	bic.w	r2, r2, #2
 8003878:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2202      	movs	r2, #2
 8003880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003888:	f043 0202 	orr.w	r2, r3, #2
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2204      	movs	r2, #4
 8003896:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f846 	bl	8003934 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01b      	beq.n	80038ea <HAL_LTDC_IRQHandler+0xfe>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d016      	beq.n	80038ea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2201      	movs	r2, #1
 80038d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f82f 	bl	8003948 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01b      	beq.n	800392c <HAL_LTDC_IRQHandler+0x140>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0208 	bic.w	r2, r2, #8
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2208      	movs	r2, #8
 8003914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f818 	bl	800395c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_LTDC_ConfigLayer+0x1a>
 8003986:	2302      	movs	r3, #2
 8003988:	e02c      	b.n	80039e4 <HAL_LTDC_ConfigLayer+0x74>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2134      	movs	r1, #52	; 0x34
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4614      	mov	r4, r2
 80039ae:	461d      	mov	r5, r3
 80039b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f8ad 	bl	8003b24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2201      	movs	r2, #1
 80039d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bdb0      	pop	{r4, r5, r7, pc}

080039ec <HAL_LTDC_SetPixelFormat>:
  *                      This parameter can be one of the following values:
  *                      LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPixelFormat(LTDC_HandleTypeDef *hltdc, uint32_t Pixelformat, uint32_t LayerIdx)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_PIXEL_FORMAT(Pixelformat));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_LTDC_SetPixelFormat+0x1a>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e024      	b.n	8003a50 <HAL_LTDC_SetPixelFormat+0x64>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2234      	movs	r2, #52	; 0x34
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	3338      	adds	r3, #56	; 0x38
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Reconfigure the pixel format */
  pLayerCfg->PixelFormat = Pixelformat;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	611a      	str	r2, [r3, #16]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6979      	ldr	r1, [r7, #20]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f877 	bl	8003b24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_LTDC_SetAddress+0x1a>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e024      	b.n	8003abc <HAL_LTDC_SetAddress+0x64>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2234      	movs	r2, #52	; 0x34
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	3338      	adds	r3, #56	; 0x38
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f841 	bl	8003b24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_LTDC_Reload+0x18>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e01c      	b.n	8003b16 <HAL_LTDC_Reload+0x52>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0208 	orr.w	r2, r2, #8
 8003afa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
	...

08003b24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	0c1b      	lsrs	r3, r3, #16
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	4413      	add	r3, r2
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	01db      	lsls	r3, r3, #7
 8003b50:	4413      	add	r3, r2
 8003b52:	3384      	adds	r3, #132	; 0x84
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	01d2      	lsls	r2, r2, #7
 8003b60:	440a      	add	r2, r1
 8003b62:	3284      	adds	r2, #132	; 0x84
 8003b64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003b68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b7a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b7c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4619      	mov	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	01db      	lsls	r3, r3, #7
 8003b88:	440b      	add	r3, r1
 8003b8a:	3384      	adds	r3, #132	; 0x84
 8003b8c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003b92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba2:	4413      	add	r3, r2
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	01db      	lsls	r3, r3, #7
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3384      	adds	r3, #132	; 0x84
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	01d2      	lsls	r2, r2, #7
 8003bc2:	440a      	add	r2, r1
 8003bc4:	3284      	adds	r2, #132	; 0x84
 8003bc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003bca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bda:	4413      	add	r3, r2
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4619      	mov	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	01db      	lsls	r3, r3, #7
 8003be8:	440b      	add	r3, r1
 8003bea:	3384      	adds	r3, #132	; 0x84
 8003bec:	4619      	mov	r1, r3
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	01db      	lsls	r3, r3, #7
 8003bfe:	4413      	add	r3, r2
 8003c00:	3384      	adds	r3, #132	; 0x84
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	01d2      	lsls	r2, r2, #7
 8003c0e:	440a      	add	r2, r1
 8003c10:	3284      	adds	r2, #132	; 0x84
 8003c12:	f023 0307 	bic.w	r3, r3, #7
 8003c16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	01db      	lsls	r3, r3, #7
 8003c22:	4413      	add	r3, r2
 8003c24:	3384      	adds	r3, #132	; 0x84
 8003c26:	461a      	mov	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	01db      	lsls	r3, r3, #7
 8003c54:	4413      	add	r3, r2
 8003c56:	3384      	adds	r3, #132	; 0x84
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	01db      	lsls	r3, r3, #7
 8003c64:	4413      	add	r3, r2
 8003c66:	3384      	adds	r3, #132	; 0x84
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c74:	461a      	mov	r2, r3
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4619      	mov	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	01db      	lsls	r3, r3, #7
 8003c88:	440b      	add	r3, r1
 8003c8a:	3384      	adds	r3, #132	; 0x84
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	01db      	lsls	r3, r3, #7
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3384      	adds	r3, #132	; 0x84
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	4611      	mov	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	01d2      	lsls	r2, r2, #7
 8003cae:	440a      	add	r2, r1
 8003cb0:	3284      	adds	r2, #132	; 0x84
 8003cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cb6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	01db      	lsls	r3, r3, #7
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3384      	adds	r3, #132	; 0x84
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	01db      	lsls	r3, r3, #7
 8003cd8:	4413      	add	r3, r2
 8003cda:	3384      	adds	r3, #132	; 0x84
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	01db      	lsls	r3, r3, #7
 8003ce8:	440b      	add	r3, r1
 8003cea:	3384      	adds	r3, #132	; 0x84
 8003cec:	4619      	mov	r1, r3
 8003cee:	4b58      	ldr	r3, [pc, #352]	; (8003e50 <LTDC_SetConfig+0x32c>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	68f9      	ldr	r1, [r7, #12]
 8003cfe:	6809      	ldr	r1, [r1, #0]
 8003d00:	4608      	mov	r0, r1
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	01c9      	lsls	r1, r1, #7
 8003d06:	4401      	add	r1, r0
 8003d08:	3184      	adds	r1, #132	; 0x84
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	01db      	lsls	r3, r3, #7
 8003d18:	4413      	add	r3, r2
 8003d1a:	3384      	adds	r3, #132	; 0x84
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	01db      	lsls	r3, r3, #7
 8003d28:	4413      	add	r3, r2
 8003d2a:	3384      	adds	r3, #132	; 0x84
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2300      	movs	r3, #0
 8003d30:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	01db      	lsls	r3, r3, #7
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3384      	adds	r3, #132	; 0x84
 8003d40:	461a      	mov	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003d50:	2304      	movs	r3, #4
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	e01b      	b.n	8003d8e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d102      	bne.n	8003d64 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e014      	b.n	8003d8e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d00b      	beq.n	8003d84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d007      	beq.n	8003d84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d003      	beq.n	8003d84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	d102      	bne.n	8003d8a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003d84:	2302      	movs	r3, #2
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	e001      	b.n	8003d8e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	01db      	lsls	r3, r3, #7
 8003d98:	4413      	add	r3, r2
 8003d9a:	3384      	adds	r3, #132	; 0x84
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	4611      	mov	r1, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	01d2      	lsls	r2, r2, #7
 8003da8:	440a      	add	r2, r1
 8003daa:	3284      	adds	r2, #132	; 0x84
 8003dac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003db0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	1acb      	subs	r3, r1, r3
 8003dc8:	69f9      	ldr	r1, [r7, #28]
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003dd0:	68f9      	ldr	r1, [r7, #12]
 8003dd2:	6809      	ldr	r1, [r1, #0]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	01c9      	lsls	r1, r1, #7
 8003dda:	4401      	add	r1, r0
 8003ddc:	3184      	adds	r1, #132	; 0x84
 8003dde:	4313      	orrs	r3, r2
 8003de0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	01db      	lsls	r3, r3, #7
 8003dec:	4413      	add	r3, r2
 8003dee:	3384      	adds	r3, #132	; 0x84
 8003df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4619      	mov	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	01db      	lsls	r3, r3, #7
 8003dfc:	440b      	add	r3, r1
 8003dfe:	3384      	adds	r3, #132	; 0x84
 8003e00:	4619      	mov	r1, r3
 8003e02:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <LTDC_SetConfig+0x330>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	01db      	lsls	r3, r3, #7
 8003e12:	4413      	add	r3, r2
 8003e14:	3384      	adds	r3, #132	; 0x84
 8003e16:	461a      	mov	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	01db      	lsls	r3, r3, #7
 8003e28:	4413      	add	r3, r2
 8003e2a:	3384      	adds	r3, #132	; 0x84
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	4611      	mov	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	01d2      	lsls	r2, r2, #7
 8003e38:	440a      	add	r2, r1
 8003e3a:	3284      	adds	r2, #132	; 0x84
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6013      	str	r3, [r2, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	fffff8f8 	.word	0xfffff8f8
 8003e54:	fffff800 	.word	0xfffff800

08003e58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e86:	f7fe ff81 	bl	8002d8c <HAL_GetTick>
 8003e8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e8c:	e009      	b.n	8003ea2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e8e:	f7fe ff7d 	bl	8002d8c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e9c:	d901      	bls.n	8003ea2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e022      	b.n	8003ee8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eae:	d1ee      	bne.n	8003e8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ebc:	f7fe ff66 	bl	8002d8c <HAL_GetTick>
 8003ec0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ec2:	e009      	b.n	8003ed8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ec4:	f7fe ff62 	bl	8002d8c <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ed2:	d901      	bls.n	8003ed8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e007      	b.n	8003ee8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ee4:	d1ee      	bne.n	8003ec4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000

08003ef8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f00:	2300      	movs	r3, #0
 8003f02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e291      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 8087 	beq.w	800402a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f1c:	4b96      	ldr	r3, [pc, #600]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d00c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f28:	4b93      	ldr	r3, [pc, #588]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d112      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62>
 8003f34:	4b90      	ldr	r3, [pc, #576]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f40:	d10b      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f42:	4b8d      	ldr	r3, [pc, #564]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d06c      	beq.n	8004028 <HAL_RCC_OscConfig+0x130>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d168      	bne.n	8004028 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e26b      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x7a>
 8003f64:	4b84      	ldr	r3, [pc, #528]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a83      	ldr	r2, [pc, #524]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e02e      	b.n	8003fd0 <HAL_RCC_OscConfig+0xd8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x9c>
 8003f7a:	4b7f      	ldr	r3, [pc, #508]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a7e      	ldr	r2, [pc, #504]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b7c      	ldr	r3, [pc, #496]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a7b      	ldr	r2, [pc, #492]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e01d      	b.n	8003fd0 <HAL_RCC_OscConfig+0xd8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0xc0>
 8003f9e:	4b76      	ldr	r3, [pc, #472]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a75      	ldr	r2, [pc, #468]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	4b73      	ldr	r3, [pc, #460]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a72      	ldr	r2, [pc, #456]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e00b      	b.n	8003fd0 <HAL_RCC_OscConfig+0xd8>
 8003fb8:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a6e      	ldr	r2, [pc, #440]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4b6c      	ldr	r3, [pc, #432]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a6b      	ldr	r2, [pc, #428]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fe fed8 	bl	8002d8c <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fe fed4 	bl	8002d8c <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e21f      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	4b61      	ldr	r3, [pc, #388]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0xe8>
 8003ffe:	e014      	b.n	800402a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fe fec4 	bl	8002d8c <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004008:	f7fe fec0 	bl	8002d8c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e20b      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401a:	4b57      	ldr	r3, [pc, #348]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x110>
 8004026:	e000      	b.n	800402a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d069      	beq.n	800410a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004036:	4b50      	ldr	r3, [pc, #320]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00b      	beq.n	800405a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004042:	4b4d      	ldr	r3, [pc, #308]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b08      	cmp	r3, #8
 800404c:	d11c      	bne.n	8004088 <HAL_RCC_OscConfig+0x190>
 800404e:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d116      	bne.n	8004088 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_RCC_OscConfig+0x17a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d001      	beq.n	8004072 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e1df      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004072:	4b41      	ldr	r3, [pc, #260]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	493d      	ldr	r1, [pc, #244]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	e040      	b.n	800410a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d023      	beq.n	80040d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004090:	4b39      	ldr	r3, [pc, #228]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a38      	ldr	r2, [pc, #224]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fe fe76 	bl	8002d8c <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a4:	f7fe fe72 	bl	8002d8c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e1bd      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b6:	4b30      	ldr	r3, [pc, #192]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c2:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	4929      	ldr	r1, [pc, #164]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]
 80040d6:	e018      	b.n	800410a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d8:	4b27      	ldr	r3, [pc, #156]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a26      	ldr	r2, [pc, #152]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fe fe52 	bl	8002d8c <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fe fe4e 	bl	8002d8c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e199      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fe:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d038      	beq.n	8004188 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d019      	beq.n	8004152 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411e:	4b16      	ldr	r3, [pc, #88]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	4a15      	ldr	r2, [pc, #84]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7fe fe2f 	bl	8002d8c <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004132:	f7fe fe2b 	bl	8002d8c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e176      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x23a>
 8004150:	e01a      	b.n	8004188 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004156:	4a08      	ldr	r2, [pc, #32]	; (8004178 <HAL_RCC_OscConfig+0x280>)
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415e:	f7fe fe15 	bl	8002d8c <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004164:	e00a      	b.n	800417c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004166:	f7fe fe11 	bl	8002d8c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d903      	bls.n	800417c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e15c      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
 8004178:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417c:	4b91      	ldr	r3, [pc, #580]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 800417e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ee      	bne.n	8004166 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80a4 	beq.w	80042de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004196:	4b8b      	ldr	r3, [pc, #556]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10d      	bne.n	80041be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	4a87      	ldr	r2, [pc, #540]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6413      	str	r3, [r2, #64]	; 0x40
 80041ae:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041be:	4b82      	ldr	r3, [pc, #520]	; (80043c8 <HAL_RCC_OscConfig+0x4d0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d118      	bne.n	80041fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041ca:	4b7f      	ldr	r3, [pc, #508]	; (80043c8 <HAL_RCC_OscConfig+0x4d0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a7e      	ldr	r2, [pc, #504]	; (80043c8 <HAL_RCC_OscConfig+0x4d0>)
 80041d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d6:	f7fe fdd9 	bl	8002d8c <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041de:	f7fe fdd5 	bl	8002d8c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b64      	cmp	r3, #100	; 0x64
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e120      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f0:	4b75      	ldr	r3, [pc, #468]	; (80043c8 <HAL_RCC_OscConfig+0x4d0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d106      	bne.n	8004212 <HAL_RCC_OscConfig+0x31a>
 8004204:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	4a6e      	ldr	r2, [pc, #440]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6713      	str	r3, [r2, #112]	; 0x70
 8004210:	e02d      	b.n	800426e <HAL_RCC_OscConfig+0x376>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x33c>
 800421a:	4b6a      	ldr	r3, [pc, #424]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a69      	ldr	r2, [pc, #420]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	6713      	str	r3, [r2, #112]	; 0x70
 8004226:	4b67      	ldr	r3, [pc, #412]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	4a66      	ldr	r2, [pc, #408]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 800422c:	f023 0304 	bic.w	r3, r3, #4
 8004230:	6713      	str	r3, [r2, #112]	; 0x70
 8004232:	e01c      	b.n	800426e <HAL_RCC_OscConfig+0x376>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b05      	cmp	r3, #5
 800423a:	d10c      	bne.n	8004256 <HAL_RCC_OscConfig+0x35e>
 800423c:	4b61      	ldr	r3, [pc, #388]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	4a60      	ldr	r2, [pc, #384]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004242:	f043 0304 	orr.w	r3, r3, #4
 8004246:	6713      	str	r3, [r2, #112]	; 0x70
 8004248:	4b5e      	ldr	r3, [pc, #376]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	4a5d      	ldr	r2, [pc, #372]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	6713      	str	r3, [r2, #112]	; 0x70
 8004254:	e00b      	b.n	800426e <HAL_RCC_OscConfig+0x376>
 8004256:	4b5b      	ldr	r3, [pc, #364]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	4a5a      	ldr	r2, [pc, #360]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	6713      	str	r3, [r2, #112]	; 0x70
 8004262:	4b58      	ldr	r3, [pc, #352]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	4a57      	ldr	r2, [pc, #348]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004268:	f023 0304 	bic.w	r3, r3, #4
 800426c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d015      	beq.n	80042a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004276:	f7fe fd89 	bl	8002d8c <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427c:	e00a      	b.n	8004294 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427e:	f7fe fd85 	bl	8002d8c <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f241 3288 	movw	r2, #5000	; 0x1388
 800428c:	4293      	cmp	r3, r2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e0ce      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004294:	4b4b      	ldr	r3, [pc, #300]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ee      	beq.n	800427e <HAL_RCC_OscConfig+0x386>
 80042a0:	e014      	b.n	80042cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fe fd73 	bl	8002d8c <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fe fd6f 	bl	8002d8c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e0b8      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c0:	4b40      	ldr	r3, [pc, #256]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1ee      	bne.n	80042aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d105      	bne.n	80042de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d2:	4b3c      	ldr	r3, [pc, #240]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	4a3b      	ldr	r2, [pc, #236]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 80042d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 80a4 	beq.w	8004430 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042e8:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 030c 	and.w	r3, r3, #12
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d06b      	beq.n	80043cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d149      	bne.n	8004390 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fc:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a30      	ldr	r2, [pc, #192]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe fd40 	bl	8002d8c <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004310:	f7fe fd3c 	bl	8002d8c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e087      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	019b      	lsls	r3, r3, #6
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	3b01      	subs	r3, #1
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	4313      	orrs	r3, r2
 8004354:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004356:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800435a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fe fd10 	bl	8002d8c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe fd0c 	bl	8002d8c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e057      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x478>
 800438e:	e04f      	b.n	8004430 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0b      	ldr	r2, [pc, #44]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fe fcf6 	bl	8002d8c <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fe fcf2 	bl	8002d8c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e03d      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_RCC_OscConfig+0x4cc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4ac>
 80043c2:	e035      	b.n	8004430 <HAL_RCC_OscConfig+0x538>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <HAL_RCC_OscConfig+0x544>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d028      	beq.n	800442c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d121      	bne.n	800442c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d11a      	bne.n	800442c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004402:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004404:	4293      	cmp	r3, r2
 8004406:	d111      	bne.n	800442c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	3b01      	subs	r3, #1
 8004416:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d107      	bne.n	800442c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800

08004440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0d0      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d910      	bls.n	8004488 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b67      	ldr	r3, [pc, #412]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 020f 	bic.w	r2, r3, #15
 800446e:	4965      	ldr	r1, [pc, #404]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b63      	ldr	r3, [pc, #396]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0b8      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a0:	4b59      	ldr	r3, [pc, #356]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a58      	ldr	r2, [pc, #352]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80044a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b8:	4b53      	ldr	r3, [pc, #332]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a52      	ldr	r2, [pc, #328]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80044be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c4:	4b50      	ldr	r3, [pc, #320]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	494d      	ldr	r1, [pc, #308]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d040      	beq.n	8004564 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d115      	bne.n	8004522 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e07f      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	4b41      	ldr	r3, [pc, #260]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e073      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b3d      	ldr	r3, [pc, #244]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06b      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b39      	ldr	r3, [pc, #228]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4936      	ldr	r1, [pc, #216]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fe fc2a 	bl	8002d8c <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fe fc26 	bl	8002d8c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e053      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004564:	4b27      	ldr	r3, [pc, #156]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d210      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 020f 	bic.w	r2, r3, #15
 800457a:	4922      	ldr	r1, [pc, #136]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b20      	ldr	r3, [pc, #128]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e032      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4916      	ldr	r1, [pc, #88]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	490e      	ldr	r1, [pc, #56]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045d2:	f000 f821 	bl	8004618 <HAL_RCC_GetSysClockFreq>
 80045d6:	4602      	mov	r2, r0
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	490a      	ldr	r1, [pc, #40]	; (800460c <HAL_RCC_ClockConfig+0x1cc>)
 80045e4:	5ccb      	ldrb	r3, [r1, r3]
 80045e6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <HAL_RCC_ClockConfig+0x1d0>)
 80045ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_RCC_ClockConfig+0x1d4>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe fb86 	bl	8002d04 <HAL_InitTick>

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023c00 	.word	0x40023c00
 8004608:	40023800 	.word	0x40023800
 800460c:	08006f8c 	.word	0x08006f8c
 8004610:	20000000 	.word	0x20000000
 8004614:	20000004 	.word	0x20000004

08004618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800461c:	b090      	sub	sp, #64	; 0x40
 800461e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
 8004624:	2300      	movs	r3, #0
 8004626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004628:	2300      	movs	r3, #0
 800462a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004630:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCC_GetSysClockFreq+0x180>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b08      	cmp	r3, #8
 800463a:	d00d      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x40>
 800463c:	2b08      	cmp	r3, #8
 800463e:	f200 80a1 	bhi.w	8004784 <HAL_RCC_GetSysClockFreq+0x16c>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x34>
 8004646:	2b04      	cmp	r3, #4
 8004648:	d003      	beq.n	8004652 <HAL_RCC_GetSysClockFreq+0x3a>
 800464a:	e09b      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800464c:	4b53      	ldr	r3, [pc, #332]	; (800479c <HAL_RCC_GetSysClockFreq+0x184>)
 800464e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004650:	e09b      	b.n	800478a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004652:	4b53      	ldr	r3, [pc, #332]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004656:	e098      	b.n	800478a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004658:	4b4f      	ldr	r3, [pc, #316]	; (8004798 <HAL_RCC_GetSysClockFreq+0x180>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004662:	4b4d      	ldr	r3, [pc, #308]	; (8004798 <HAL_RCC_GetSysClockFreq+0x180>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d028      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800466e:	4b4a      	ldr	r3, [pc, #296]	; (8004798 <HAL_RCC_GetSysClockFreq+0x180>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	099b      	lsrs	r3, r3, #6
 8004674:	2200      	movs	r2, #0
 8004676:	623b      	str	r3, [r7, #32]
 8004678:	627a      	str	r2, [r7, #36]	; 0x24
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004680:	2100      	movs	r1, #0
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004684:	fb03 f201 	mul.w	r2, r3, r1
 8004688:	2300      	movs	r3, #0
 800468a:	fb00 f303 	mul.w	r3, r0, r3
 800468e:	4413      	add	r3, r2
 8004690:	4a43      	ldr	r2, [pc, #268]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004692:	fba0 1202 	umull	r1, r2, r0, r2
 8004696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004698:	460a      	mov	r2, r1
 800469a:	62ba      	str	r2, [r7, #40]	; 0x28
 800469c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800469e:	4413      	add	r3, r2
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	2200      	movs	r2, #0
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	61fa      	str	r2, [r7, #28]
 80046aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046b2:	f7fc fa77 	bl	8000ba4 <__aeabi_uldivmod>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4613      	mov	r3, r2
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046be:	e053      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c0:	4b35      	ldr	r3, [pc, #212]	; (8004798 <HAL_RCC_GetSysClockFreq+0x180>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	099b      	lsrs	r3, r3, #6
 80046c6:	2200      	movs	r2, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	617a      	str	r2, [r7, #20]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046d2:	f04f 0b00 	mov.w	fp, #0
 80046d6:	4652      	mov	r2, sl
 80046d8:	465b      	mov	r3, fp
 80046da:	f04f 0000 	mov.w	r0, #0
 80046de:	f04f 0100 	mov.w	r1, #0
 80046e2:	0159      	lsls	r1, r3, #5
 80046e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e8:	0150      	lsls	r0, r2, #5
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	ebb2 080a 	subs.w	r8, r2, sl
 80046f2:	eb63 090b 	sbc.w	r9, r3, fp
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004702:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004706:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800470a:	ebb2 0408 	subs.w	r4, r2, r8
 800470e:	eb63 0509 	sbc.w	r5, r3, r9
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	00eb      	lsls	r3, r5, #3
 800471c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004720:	00e2      	lsls	r2, r4, #3
 8004722:	4614      	mov	r4, r2
 8004724:	461d      	mov	r5, r3
 8004726:	eb14 030a 	adds.w	r3, r4, sl
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	eb45 030b 	adc.w	r3, r5, fp
 8004730:	607b      	str	r3, [r7, #4]
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800473e:	4629      	mov	r1, r5
 8004740:	028b      	lsls	r3, r1, #10
 8004742:	4621      	mov	r1, r4
 8004744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004748:	4621      	mov	r1, r4
 800474a:	028a      	lsls	r2, r1, #10
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	2200      	movs	r2, #0
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	60fa      	str	r2, [r7, #12]
 8004758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800475c:	f7fc fa22 	bl	8000ba4 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4613      	mov	r3, r2
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_GetSysClockFreq+0x180>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	3301      	adds	r3, #1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004782:	e002      	b.n	800478a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <HAL_RCC_GetSysClockFreq+0x184>)
 8004786:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800478c:	4618      	mov	r0, r3
 800478e:	3740      	adds	r7, #64	; 0x40
 8004790:	46bd      	mov	sp, r7
 8004792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	00f42400 	.word	0x00f42400
 80047a0:	017d7840 	.word	0x017d7840

080047a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047aa:	681b      	ldr	r3, [r3, #0]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000000 	.word	0x20000000

080047bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047c0:	f7ff fff0 	bl	80047a4 <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	0a9b      	lsrs	r3, r3, #10
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4903      	ldr	r1, [pc, #12]	; (80047e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40023800 	.word	0x40023800
 80047e0:	08006f9c 	.word	0x08006f9c

080047e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047e8:	f7ff ffdc 	bl	80047a4 <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0b5b      	lsrs	r3, r3, #13
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4903      	ldr	r1, [pc, #12]	; (8004808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40023800 	.word	0x40023800
 8004808:	08006f9c 	.word	0x08006f9c

0800480c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d012      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004834:	4b69      	ldr	r3, [pc, #420]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a68      	ldr	r2, [pc, #416]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800483e:	6093      	str	r3, [r2, #8]
 8004840:	4b66      	ldr	r3, [pc, #408]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	4964      	ldr	r1, [pc, #400]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004856:	2301      	movs	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d017      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004866:	4b5d      	ldr	r3, [pc, #372]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004874:	4959      	ldr	r1, [pc, #356]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004884:	d101      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004886:	2301      	movs	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004892:	2301      	movs	r3, #1
 8004894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d017      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048a2:	4b4e      	ldr	r3, [pc, #312]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	494a      	ldr	r1, [pc, #296]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c0:	d101      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80048de:	2301      	movs	r3, #1
 80048e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 808b 	beq.w	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f0:	4b3a      	ldr	r3, [pc, #232]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	4a39      	ldr	r2, [pc, #228]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6413      	str	r3, [r2, #64]	; 0x40
 80048fc:	4b37      	ldr	r3, [pc, #220]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004908:	4b35      	ldr	r3, [pc, #212]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a34      	ldr	r2, [pc, #208]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800490e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fe fa3a 	bl	8002d8c <HAL_GetTick>
 8004918:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491c:	f7fe fa36 	bl	8002d8c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	; 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e357      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800492e:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800493a:	4b28      	ldr	r3, [pc, #160]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004942:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d035      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	429a      	cmp	r2, r3
 8004956:	d02e      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004958:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004960:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800496e:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004978:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800497a:	4a18      	ldr	r2, [pc, #96]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004980:	4b16      	ldr	r3, [pc, #88]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d114      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fe f9fe 	bl	8002d8c <HAL_GetTick>
 8004990:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004992:	e00a      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004994:	f7fe f9fa 	bl	8002d8c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e319      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ee      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c2:	d111      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049d2:	400b      	ands	r3, r1
 80049d4:	4901      	ldr	r1, [pc, #4]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
 80049da:	e00b      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049dc:	40023800 	.word	0x40023800
 80049e0:	40007000 	.word	0x40007000
 80049e4:	0ffffcff 	.word	0x0ffffcff
 80049e8:	4baa      	ldr	r3, [pc, #680]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4aa9      	ldr	r2, [pc, #676]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049f2:	6093      	str	r3, [r2, #8]
 80049f4:	4ba7      	ldr	r3, [pc, #668]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a00:	49a4      	ldr	r1, [pc, #656]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d010      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a12:	4ba0      	ldr	r3, [pc, #640]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a18:	4a9e      	ldr	r2, [pc, #632]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a22:	4b9c      	ldr	r3, [pc, #624]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	4999      	ldr	r1, [pc, #612]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a40:	4b94      	ldr	r3, [pc, #592]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a4e:	4991      	ldr	r1, [pc, #580]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a62:	4b8c      	ldr	r3, [pc, #560]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a70:	4988      	ldr	r1, [pc, #544]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a84:	4b83      	ldr	r3, [pc, #524]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a92:	4980      	ldr	r1, [pc, #512]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aa6:	4b7b      	ldr	r3, [pc, #492]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	4977      	ldr	r1, [pc, #476]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ac8:	4b72      	ldr	r3, [pc, #456]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	f023 0203 	bic.w	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	496f      	ldr	r1, [pc, #444]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aea:	4b6a      	ldr	r3, [pc, #424]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af0:	f023 020c 	bic.w	r2, r3, #12
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af8:	4966      	ldr	r1, [pc, #408]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b0c:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	495e      	ldr	r1, [pc, #376]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b2e:	4b59      	ldr	r3, [pc, #356]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	4955      	ldr	r1, [pc, #340]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b50:	4b50      	ldr	r3, [pc, #320]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	494d      	ldr	r1, [pc, #308]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b72:	4b48      	ldr	r3, [pc, #288]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b80:	4944      	ldr	r1, [pc, #272]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b94:	4b3f      	ldr	r3, [pc, #252]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	493c      	ldr	r1, [pc, #240]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004bb6:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc4:	4933      	ldr	r1, [pc, #204]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bd8:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004be6:	492b      	ldr	r1, [pc, #172]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d011      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bfa:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c08:	4922      	ldr	r1, [pc, #136]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c18:	d101      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c3a:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c48:	4912      	ldr	r1, [pc, #72]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c6c:	4909      	ldr	r1, [pc, #36]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d006      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80d9 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c88:	4b02      	ldr	r3, [pc, #8]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a01      	ldr	r2, [pc, #4]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c92:	e001      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004c94:	40023800 	.word	0x40023800
 8004c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9a:	f7fe f877 	bl	8002d8c <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ca2:	f7fe f873 	bl	8002d8c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b64      	cmp	r3, #100	; 0x64
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e194      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cb4:	4b6c      	ldr	r3, [pc, #432]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d021      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11d      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cd4:	4b64      	ldr	r3, [pc, #400]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cda:	0c1b      	lsrs	r3, r3, #16
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ce2:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce8:	0e1b      	lsrs	r3, r3, #24
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	019a      	lsls	r2, r3, #6
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	041b      	lsls	r3, r3, #16
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	061b      	lsls	r3, r3, #24
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	071b      	lsls	r3, r3, #28
 8004d08:	4957      	ldr	r1, [pc, #348]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02e      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3a:	d129      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d3c:	4b4a      	ldr	r3, [pc, #296]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d42:	0c1b      	lsrs	r3, r3, #16
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d4a:	4b47      	ldr	r3, [pc, #284]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d50:	0f1b      	lsrs	r3, r3, #28
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	019a      	lsls	r2, r3, #6
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	041b      	lsls	r3, r3, #16
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	071b      	lsls	r3, r3, #28
 8004d70:	493d      	ldr	r1, [pc, #244]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d78:	4b3b      	ldr	r3, [pc, #236]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d7e:	f023 021f 	bic.w	r2, r3, #31
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	3b01      	subs	r3, #1
 8004d88:	4937      	ldr	r1, [pc, #220]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01d      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d9c:	4b32      	ldr	r3, [pc, #200]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da2:	0e1b      	lsrs	r3, r3, #24
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004daa:	4b2f      	ldr	r3, [pc, #188]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db0:	0f1b      	lsrs	r3, r3, #28
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	019a      	lsls	r2, r3, #6
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	061b      	lsls	r3, r3, #24
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	071b      	lsls	r3, r3, #28
 8004dd0:	4925      	ldr	r1, [pc, #148]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d011      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	019a      	lsls	r2, r3, #6
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	041b      	lsls	r3, r3, #16
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	071b      	lsls	r3, r3, #28
 8004e00:	4919      	ldr	r1, [pc, #100]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e08:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e14:	f7fd ffba 	bl	8002d8c <HAL_GetTick>
 8004e18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e1c:	f7fd ffb6 	bl	8002d8c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e0d7      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e2e:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	f040 80cd 	bne.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4e:	f7fd ff9d 	bl	8002d8c <HAL_GetTick>
 8004e52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e56:	f7fd ff99 	bl	8002d8c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b64      	cmp	r3, #100	; 0x64
 8004e62:	d903      	bls.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0ba      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004e68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e6c:	4b5e      	ldr	r3, [pc, #376]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e78:	d0ed      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02e      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d12a      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ea2:	4b51      	ldr	r3, [pc, #324]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eb0:	4b4d      	ldr	r3, [pc, #308]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	0f1b      	lsrs	r3, r3, #28
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	019a      	lsls	r2, r3, #6
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	061b      	lsls	r3, r3, #24
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	071b      	lsls	r3, r3, #28
 8004ed6:	4944      	ldr	r1, [pc, #272]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ede:	4b42      	ldr	r3, [pc, #264]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	3b01      	subs	r3, #1
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	493d      	ldr	r1, [pc, #244]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d022      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0c:	d11d      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f0e:	4b36      	ldr	r3, [pc, #216]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	0e1b      	lsrs	r3, r3, #24
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f1c:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	0f1b      	lsrs	r3, r3, #28
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	019a      	lsls	r2, r3, #6
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	041b      	lsls	r3, r3, #16
 8004f36:	431a      	orrs	r2, r3
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	061b      	lsls	r3, r3, #24
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	4929      	ldr	r1, [pc, #164]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d028      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f56:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	0e1b      	lsrs	r3, r3, #24
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f64:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	0c1b      	lsrs	r3, r3, #16
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	019a      	lsls	r2, r3, #6
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	061b      	lsls	r3, r3, #24
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	4917      	ldr	r1, [pc, #92]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	4911      	ldr	r1, [pc, #68]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb4:	f7fd feea 	bl	8002d8c <HAL_GetTick>
 8004fb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fbc:	f7fd fee6 	bl	8002d8c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	; 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e007      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fce:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fda:	d1ef      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800

08004fec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e025      	b.n	800504c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7fd fde5 	bl	8002be4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3304      	adds	r3, #4
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f000 fddf 	bl	8005bf0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	461a      	mov	r2, r3
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	f000 fe33 	bl	8005ca8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005066:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d101      	bne.n	8005072 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800506e:	2302      	movs	r3, #2
 8005070:	e021      	b.n	80050b6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005072:	7dfb      	ldrb	r3, [r7, #23]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d002      	beq.n	800507e <HAL_SDRAM_SendCommand+0x2a>
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	2b05      	cmp	r3, #5
 800507c:	d118      	bne.n	80050b0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2202      	movs	r2, #2
 8005082:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fe74 	bl	8005d7c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d104      	bne.n	80050a6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2205      	movs	r2, #5
 80050a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80050a4:	e006      	b.n	80050b4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80050ae:	e001      	b.n	80050b4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e040      	b.n	8005152 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fd fc6d 	bl	80029c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2224      	movs	r2, #36	; 0x24
 80050ea:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0201 	bic.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f973 	bl	80053e8 <UART_SetConfig>
 8005102:	4603      	mov	r3, r0
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e022      	b.n	8005152 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fbcb 	bl	80058b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005128:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005138:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0201 	orr.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fc52 	bl	80059f4 <UART_CheckIdleState>
 8005150:	4603      	mov	r3, r0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b08a      	sub	sp, #40	; 0x28
 800515e:	af02      	add	r7, sp, #8
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516e:	2b20      	cmp	r3, #32
 8005170:	d171      	bne.n	8005256 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_UART_Transmit+0x24>
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e06a      	b.n	8005258 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2221      	movs	r2, #33	; 0x21
 800518e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005190:	f7fd fdfc 	bl	8002d8c <HAL_GetTick>
 8005194:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	88fa      	ldrh	r2, [r7, #6]
 800519a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	88fa      	ldrh	r2, [r7, #6]
 80051a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ae:	d108      	bne.n	80051c2 <HAL_UART_Transmit+0x68>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e003      	b.n	80051ca <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051ca:	e02c      	b.n	8005226 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2200      	movs	r2, #0
 80051d4:	2180      	movs	r1, #128	; 0x80
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fc43 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e038      	b.n	8005258 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	3302      	adds	r3, #2
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	e007      	b.n	8005214 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	781a      	ldrb	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3301      	adds	r3, #1
 8005212:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1cc      	bne.n	80051cc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	2140      	movs	r1, #64	; 0x40
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fc10 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e005      	b.n	8005258 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	e000      	b.n	8005258 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005256:	2302      	movs	r3, #2
  }
}
 8005258:	4618      	mov	r0, r3
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	; 0x28
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005276:	2b20      	cmp	r3, #32
 8005278:	f040 80b1 	bne.w	80053de <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_UART_Receive+0x28>
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e0a9      	b.n	80053e0 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2222      	movs	r2, #34	; 0x22
 8005298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052a2:	f7fd fd73 	bl	8002d8c <HAL_GetTick>
 80052a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	88fa      	ldrh	r2, [r7, #6]
 80052ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	88fa      	ldrh	r2, [r7, #6]
 80052b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c0:	d10e      	bne.n	80052e0 <HAL_UART_Receive+0x80>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d105      	bne.n	80052d6 <HAL_UART_Receive+0x76>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052d4:	e02d      	b.n	8005332 <HAL_UART_Receive+0xd2>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	22ff      	movs	r2, #255	; 0xff
 80052da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052de:	e028      	b.n	8005332 <HAL_UART_Receive+0xd2>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10d      	bne.n	8005304 <HAL_UART_Receive+0xa4>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <HAL_UART_Receive+0x9a>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	22ff      	movs	r2, #255	; 0xff
 80052f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052f8:	e01b      	b.n	8005332 <HAL_UART_Receive+0xd2>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	227f      	movs	r2, #127	; 0x7f
 80052fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005302:	e016      	b.n	8005332 <HAL_UART_Receive+0xd2>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800530c:	d10d      	bne.n	800532a <HAL_UART_Receive+0xca>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d104      	bne.n	8005320 <HAL_UART_Receive+0xc0>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	227f      	movs	r2, #127	; 0x7f
 800531a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800531e:	e008      	b.n	8005332 <HAL_UART_Receive+0xd2>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	223f      	movs	r2, #63	; 0x3f
 8005324:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005328:	e003      	b.n	8005332 <HAL_UART_Receive+0xd2>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005338:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005342:	d108      	bne.n	8005356 <HAL_UART_Receive+0xf6>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800534c:	2300      	movs	r3, #0
 800534e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	e003      	b.n	800535e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800535e:	e032      	b.n	80053c6 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2200      	movs	r2, #0
 8005368:	2120      	movs	r1, #32
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fb79 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e032      	b.n	80053e0 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10c      	bne.n	800539a <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	b29a      	uxth	r2, r3
 8005388:	8a7b      	ldrh	r3, [r7, #18]
 800538a:	4013      	ands	r3, r2
 800538c:	b29a      	uxth	r2, r3
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	3302      	adds	r3, #2
 8005396:	61bb      	str	r3, [r7, #24]
 8005398:	e00c      	b.n	80053b4 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	8a7b      	ldrh	r3, [r7, #18]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	4013      	ands	r3, r2
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3301      	adds	r3, #1
 80053b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1c6      	bne.n	8005360 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	e000      	b.n	80053e0 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80053de:	2302      	movs	r3, #2
  }
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4ba6      	ldr	r3, [pc, #664]	; (80056ac <UART_SetConfig+0x2c4>)
 8005414:	4013      	ands	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	6979      	ldr	r1, [r7, #20]
 800541c:	430b      	orrs	r3, r1
 800541e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	430a      	orrs	r2, r1
 8005458:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a94      	ldr	r2, [pc, #592]	; (80056b0 <UART_SetConfig+0x2c8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d120      	bne.n	80054a6 <UART_SetConfig+0xbe>
 8005464:	4b93      	ldr	r3, [pc, #588]	; (80056b4 <UART_SetConfig+0x2cc>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b03      	cmp	r3, #3
 8005470:	d816      	bhi.n	80054a0 <UART_SetConfig+0xb8>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0x90>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	08005489 	.word	0x08005489
 800547c:	08005495 	.word	0x08005495
 8005480:	0800548f 	.word	0x0800548f
 8005484:	0800549b 	.word	0x0800549b
 8005488:	2301      	movs	r3, #1
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	e150      	b.n	8005730 <UART_SetConfig+0x348>
 800548e:	2302      	movs	r3, #2
 8005490:	77fb      	strb	r3, [r7, #31]
 8005492:	e14d      	b.n	8005730 <UART_SetConfig+0x348>
 8005494:	2304      	movs	r3, #4
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e14a      	b.n	8005730 <UART_SetConfig+0x348>
 800549a:	2308      	movs	r3, #8
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e147      	b.n	8005730 <UART_SetConfig+0x348>
 80054a0:	2310      	movs	r3, #16
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e144      	b.n	8005730 <UART_SetConfig+0x348>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a83      	ldr	r2, [pc, #524]	; (80056b8 <UART_SetConfig+0x2d0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d132      	bne.n	8005516 <UART_SetConfig+0x12e>
 80054b0:	4b80      	ldr	r3, [pc, #512]	; (80056b4 <UART_SetConfig+0x2cc>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	f003 030c 	and.w	r3, r3, #12
 80054ba:	2b0c      	cmp	r3, #12
 80054bc:	d828      	bhi.n	8005510 <UART_SetConfig+0x128>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0xdc>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054f9 	.word	0x080054f9
 80054c8:	08005511 	.word	0x08005511
 80054cc:	08005511 	.word	0x08005511
 80054d0:	08005511 	.word	0x08005511
 80054d4:	08005505 	.word	0x08005505
 80054d8:	08005511 	.word	0x08005511
 80054dc:	08005511 	.word	0x08005511
 80054e0:	08005511 	.word	0x08005511
 80054e4:	080054ff 	.word	0x080054ff
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005511 	.word	0x08005511
 80054f0:	08005511 	.word	0x08005511
 80054f4:	0800550b 	.word	0x0800550b
 80054f8:	2300      	movs	r3, #0
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e118      	b.n	8005730 <UART_SetConfig+0x348>
 80054fe:	2302      	movs	r3, #2
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e115      	b.n	8005730 <UART_SetConfig+0x348>
 8005504:	2304      	movs	r3, #4
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e112      	b.n	8005730 <UART_SetConfig+0x348>
 800550a:	2308      	movs	r3, #8
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e10f      	b.n	8005730 <UART_SetConfig+0x348>
 8005510:	2310      	movs	r3, #16
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e10c      	b.n	8005730 <UART_SetConfig+0x348>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a68      	ldr	r2, [pc, #416]	; (80056bc <UART_SetConfig+0x2d4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d120      	bne.n	8005562 <UART_SetConfig+0x17a>
 8005520:	4b64      	ldr	r3, [pc, #400]	; (80056b4 <UART_SetConfig+0x2cc>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800552a:	2b30      	cmp	r3, #48	; 0x30
 800552c:	d013      	beq.n	8005556 <UART_SetConfig+0x16e>
 800552e:	2b30      	cmp	r3, #48	; 0x30
 8005530:	d814      	bhi.n	800555c <UART_SetConfig+0x174>
 8005532:	2b20      	cmp	r3, #32
 8005534:	d009      	beq.n	800554a <UART_SetConfig+0x162>
 8005536:	2b20      	cmp	r3, #32
 8005538:	d810      	bhi.n	800555c <UART_SetConfig+0x174>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <UART_SetConfig+0x15c>
 800553e:	2b10      	cmp	r3, #16
 8005540:	d006      	beq.n	8005550 <UART_SetConfig+0x168>
 8005542:	e00b      	b.n	800555c <UART_SetConfig+0x174>
 8005544:	2300      	movs	r3, #0
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e0f2      	b.n	8005730 <UART_SetConfig+0x348>
 800554a:	2302      	movs	r3, #2
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e0ef      	b.n	8005730 <UART_SetConfig+0x348>
 8005550:	2304      	movs	r3, #4
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e0ec      	b.n	8005730 <UART_SetConfig+0x348>
 8005556:	2308      	movs	r3, #8
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e0e9      	b.n	8005730 <UART_SetConfig+0x348>
 800555c:	2310      	movs	r3, #16
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e0e6      	b.n	8005730 <UART_SetConfig+0x348>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a56      	ldr	r2, [pc, #344]	; (80056c0 <UART_SetConfig+0x2d8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d120      	bne.n	80055ae <UART_SetConfig+0x1c6>
 800556c:	4b51      	ldr	r3, [pc, #324]	; (80056b4 <UART_SetConfig+0x2cc>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005576:	2bc0      	cmp	r3, #192	; 0xc0
 8005578:	d013      	beq.n	80055a2 <UART_SetConfig+0x1ba>
 800557a:	2bc0      	cmp	r3, #192	; 0xc0
 800557c:	d814      	bhi.n	80055a8 <UART_SetConfig+0x1c0>
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d009      	beq.n	8005596 <UART_SetConfig+0x1ae>
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d810      	bhi.n	80055a8 <UART_SetConfig+0x1c0>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <UART_SetConfig+0x1a8>
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d006      	beq.n	800559c <UART_SetConfig+0x1b4>
 800558e:	e00b      	b.n	80055a8 <UART_SetConfig+0x1c0>
 8005590:	2300      	movs	r3, #0
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e0cc      	b.n	8005730 <UART_SetConfig+0x348>
 8005596:	2302      	movs	r3, #2
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e0c9      	b.n	8005730 <UART_SetConfig+0x348>
 800559c:	2304      	movs	r3, #4
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e0c6      	b.n	8005730 <UART_SetConfig+0x348>
 80055a2:	2308      	movs	r3, #8
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e0c3      	b.n	8005730 <UART_SetConfig+0x348>
 80055a8:	2310      	movs	r3, #16
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e0c0      	b.n	8005730 <UART_SetConfig+0x348>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a44      	ldr	r2, [pc, #272]	; (80056c4 <UART_SetConfig+0x2dc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d125      	bne.n	8005604 <UART_SetConfig+0x21c>
 80055b8:	4b3e      	ldr	r3, [pc, #248]	; (80056b4 <UART_SetConfig+0x2cc>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055c6:	d017      	beq.n	80055f8 <UART_SetConfig+0x210>
 80055c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055cc:	d817      	bhi.n	80055fe <UART_SetConfig+0x216>
 80055ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d2:	d00b      	beq.n	80055ec <UART_SetConfig+0x204>
 80055d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d8:	d811      	bhi.n	80055fe <UART_SetConfig+0x216>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <UART_SetConfig+0x1fe>
 80055de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e2:	d006      	beq.n	80055f2 <UART_SetConfig+0x20a>
 80055e4:	e00b      	b.n	80055fe <UART_SetConfig+0x216>
 80055e6:	2300      	movs	r3, #0
 80055e8:	77fb      	strb	r3, [r7, #31]
 80055ea:	e0a1      	b.n	8005730 <UART_SetConfig+0x348>
 80055ec:	2302      	movs	r3, #2
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e09e      	b.n	8005730 <UART_SetConfig+0x348>
 80055f2:	2304      	movs	r3, #4
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e09b      	b.n	8005730 <UART_SetConfig+0x348>
 80055f8:	2308      	movs	r3, #8
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e098      	b.n	8005730 <UART_SetConfig+0x348>
 80055fe:	2310      	movs	r3, #16
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e095      	b.n	8005730 <UART_SetConfig+0x348>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a2f      	ldr	r2, [pc, #188]	; (80056c8 <UART_SetConfig+0x2e0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d125      	bne.n	800565a <UART_SetConfig+0x272>
 800560e:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <UART_SetConfig+0x2cc>)
 8005610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005614:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005618:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800561c:	d017      	beq.n	800564e <UART_SetConfig+0x266>
 800561e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005622:	d817      	bhi.n	8005654 <UART_SetConfig+0x26c>
 8005624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005628:	d00b      	beq.n	8005642 <UART_SetConfig+0x25a>
 800562a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800562e:	d811      	bhi.n	8005654 <UART_SetConfig+0x26c>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <UART_SetConfig+0x254>
 8005634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005638:	d006      	beq.n	8005648 <UART_SetConfig+0x260>
 800563a:	e00b      	b.n	8005654 <UART_SetConfig+0x26c>
 800563c:	2301      	movs	r3, #1
 800563e:	77fb      	strb	r3, [r7, #31]
 8005640:	e076      	b.n	8005730 <UART_SetConfig+0x348>
 8005642:	2302      	movs	r3, #2
 8005644:	77fb      	strb	r3, [r7, #31]
 8005646:	e073      	b.n	8005730 <UART_SetConfig+0x348>
 8005648:	2304      	movs	r3, #4
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e070      	b.n	8005730 <UART_SetConfig+0x348>
 800564e:	2308      	movs	r3, #8
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e06d      	b.n	8005730 <UART_SetConfig+0x348>
 8005654:	2310      	movs	r3, #16
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e06a      	b.n	8005730 <UART_SetConfig+0x348>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1b      	ldr	r2, [pc, #108]	; (80056cc <UART_SetConfig+0x2e4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d138      	bne.n	80056d6 <UART_SetConfig+0x2ee>
 8005664:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <UART_SetConfig+0x2cc>)
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800566e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005672:	d017      	beq.n	80056a4 <UART_SetConfig+0x2bc>
 8005674:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005678:	d82a      	bhi.n	80056d0 <UART_SetConfig+0x2e8>
 800567a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567e:	d00b      	beq.n	8005698 <UART_SetConfig+0x2b0>
 8005680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005684:	d824      	bhi.n	80056d0 <UART_SetConfig+0x2e8>
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <UART_SetConfig+0x2aa>
 800568a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568e:	d006      	beq.n	800569e <UART_SetConfig+0x2b6>
 8005690:	e01e      	b.n	80056d0 <UART_SetConfig+0x2e8>
 8005692:	2300      	movs	r3, #0
 8005694:	77fb      	strb	r3, [r7, #31]
 8005696:	e04b      	b.n	8005730 <UART_SetConfig+0x348>
 8005698:	2302      	movs	r3, #2
 800569a:	77fb      	strb	r3, [r7, #31]
 800569c:	e048      	b.n	8005730 <UART_SetConfig+0x348>
 800569e:	2304      	movs	r3, #4
 80056a0:	77fb      	strb	r3, [r7, #31]
 80056a2:	e045      	b.n	8005730 <UART_SetConfig+0x348>
 80056a4:	2308      	movs	r3, #8
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e042      	b.n	8005730 <UART_SetConfig+0x348>
 80056aa:	bf00      	nop
 80056ac:	efff69f3 	.word	0xefff69f3
 80056b0:	40011000 	.word	0x40011000
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40004400 	.word	0x40004400
 80056bc:	40004800 	.word	0x40004800
 80056c0:	40004c00 	.word	0x40004c00
 80056c4:	40005000 	.word	0x40005000
 80056c8:	40011400 	.word	0x40011400
 80056cc:	40007800 	.word	0x40007800
 80056d0:	2310      	movs	r3, #16
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e02c      	b.n	8005730 <UART_SetConfig+0x348>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a72      	ldr	r2, [pc, #456]	; (80058a4 <UART_SetConfig+0x4bc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d125      	bne.n	800572c <UART_SetConfig+0x344>
 80056e0:	4b71      	ldr	r3, [pc, #452]	; (80058a8 <UART_SetConfig+0x4c0>)
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056ee:	d017      	beq.n	8005720 <UART_SetConfig+0x338>
 80056f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056f4:	d817      	bhi.n	8005726 <UART_SetConfig+0x33e>
 80056f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fa:	d00b      	beq.n	8005714 <UART_SetConfig+0x32c>
 80056fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005700:	d811      	bhi.n	8005726 <UART_SetConfig+0x33e>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <UART_SetConfig+0x326>
 8005706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800570a:	d006      	beq.n	800571a <UART_SetConfig+0x332>
 800570c:	e00b      	b.n	8005726 <UART_SetConfig+0x33e>
 800570e:	2300      	movs	r3, #0
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e00d      	b.n	8005730 <UART_SetConfig+0x348>
 8005714:	2302      	movs	r3, #2
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e00a      	b.n	8005730 <UART_SetConfig+0x348>
 800571a:	2304      	movs	r3, #4
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e007      	b.n	8005730 <UART_SetConfig+0x348>
 8005720:	2308      	movs	r3, #8
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e004      	b.n	8005730 <UART_SetConfig+0x348>
 8005726:	2310      	movs	r3, #16
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e001      	b.n	8005730 <UART_SetConfig+0x348>
 800572c:	2310      	movs	r3, #16
 800572e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005738:	d15b      	bne.n	80057f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800573a:	7ffb      	ldrb	r3, [r7, #31]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d828      	bhi.n	8005792 <UART_SetConfig+0x3aa>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <UART_SetConfig+0x360>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800576d 	.word	0x0800576d
 800574c:	08005775 	.word	0x08005775
 8005750:	0800577d 	.word	0x0800577d
 8005754:	08005793 	.word	0x08005793
 8005758:	08005783 	.word	0x08005783
 800575c:	08005793 	.word	0x08005793
 8005760:	08005793 	.word	0x08005793
 8005764:	08005793 	.word	0x08005793
 8005768:	0800578b 	.word	0x0800578b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800576c:	f7ff f826 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 8005770:	61b8      	str	r0, [r7, #24]
        break;
 8005772:	e013      	b.n	800579c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7ff f836 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8005778:	61b8      	str	r0, [r7, #24]
        break;
 800577a:	e00f      	b.n	800579c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800577c:	4b4b      	ldr	r3, [pc, #300]	; (80058ac <UART_SetConfig+0x4c4>)
 800577e:	61bb      	str	r3, [r7, #24]
        break;
 8005780:	e00c      	b.n	800579c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005782:	f7fe ff49 	bl	8004618 <HAL_RCC_GetSysClockFreq>
 8005786:	61b8      	str	r0, [r7, #24]
        break;
 8005788:	e008      	b.n	800579c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578e:	61bb      	str	r3, [r7, #24]
        break;
 8005790:	e004      	b.n	800579c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	77bb      	strb	r3, [r7, #30]
        break;
 800579a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d074      	beq.n	800588c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	005a      	lsls	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	441a      	add	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	2b0f      	cmp	r3, #15
 80057bc:	d916      	bls.n	80057ec <UART_SetConfig+0x404>
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c4:	d212      	bcs.n	80057ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f023 030f 	bic.w	r3, r3, #15
 80057ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	b29a      	uxth	r2, r3
 80057dc:	89fb      	ldrh	r3, [r7, #14]
 80057de:	4313      	orrs	r3, r2
 80057e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	89fa      	ldrh	r2, [r7, #14]
 80057e8:	60da      	str	r2, [r3, #12]
 80057ea:	e04f      	b.n	800588c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	77bb      	strb	r3, [r7, #30]
 80057f0:	e04c      	b.n	800588c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057f2:	7ffb      	ldrb	r3, [r7, #31]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d828      	bhi.n	800584a <UART_SetConfig+0x462>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0x418>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005825 	.word	0x08005825
 8005804:	0800582d 	.word	0x0800582d
 8005808:	08005835 	.word	0x08005835
 800580c:	0800584b 	.word	0x0800584b
 8005810:	0800583b 	.word	0x0800583b
 8005814:	0800584b 	.word	0x0800584b
 8005818:	0800584b 	.word	0x0800584b
 800581c:	0800584b 	.word	0x0800584b
 8005820:	08005843 	.word	0x08005843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005824:	f7fe ffca 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 8005828:	61b8      	str	r0, [r7, #24]
        break;
 800582a:	e013      	b.n	8005854 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800582c:	f7fe ffda 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8005830:	61b8      	str	r0, [r7, #24]
        break;
 8005832:	e00f      	b.n	8005854 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005834:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <UART_SetConfig+0x4c4>)
 8005836:	61bb      	str	r3, [r7, #24]
        break;
 8005838:	e00c      	b.n	8005854 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583a:	f7fe feed 	bl	8004618 <HAL_RCC_GetSysClockFreq>
 800583e:	61b8      	str	r0, [r7, #24]
        break;
 8005840:	e008      	b.n	8005854 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005846:	61bb      	str	r3, [r7, #24]
        break;
 8005848:	e004      	b.n	8005854 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	77bb      	strb	r3, [r7, #30]
        break;
 8005852:	bf00      	nop
    }

    if (pclk != 0U)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d018      	beq.n	800588c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	085a      	lsrs	r2, r3, #1
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	441a      	add	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b0f      	cmp	r3, #15
 8005872:	d909      	bls.n	8005888 <UART_SetConfig+0x4a0>
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587a:	d205      	bcs.n	8005888 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	b29a      	uxth	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	e001      	b.n	800588c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005898:	7fbb      	ldrb	r3, [r7, #30]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3720      	adds	r7, #32
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40007c00 	.word	0x40007c00
 80058a8:	40023800 	.word	0x40023800
 80058ac:	00f42400 	.word	0x00f42400

080058b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ae:	d10a      	bne.n	80059c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a04:	f7fd f9c2 	bl	8002d8c <HAL_GetTick>
 8005a08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d10e      	bne.n	8005a36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f81b 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e011      	b.n	8005a5a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b09c      	sub	sp, #112	; 0x70
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a72:	e0a7      	b.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	f000 80a3 	beq.w	8005bc4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7e:	f7fd f985 	bl	8002d8c <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d302      	bcc.n	8005a94 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d13f      	bne.n	8005b14 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aa8:	667b      	str	r3, [r7, #100]	; 0x64
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ab4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ab8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e6      	bne.n	8005a94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ae6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ae8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e068      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d050      	beq.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b30:	d148      	bne.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b8e:	623a      	str	r2, [r7, #32]
 8005b90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	69f9      	ldr	r1, [r7, #28]
 8005b94:	6a3a      	ldr	r2, [r7, #32]
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e5      	bne.n	8005b6e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e010      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	f43f af48 	beq.w	8005a74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3770      	adds	r7, #112	; 0x70
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d121      	bne.n	8005c46 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <FMC_SDRAM_Init+0xb4>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	6851      	ldr	r1, [r2, #4]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	6892      	ldr	r2, [r2, #8]
 8005c12:	4311      	orrs	r1, r2
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	68d2      	ldr	r2, [r2, #12]
 8005c18:	4311      	orrs	r1, r2
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	6912      	ldr	r2, [r2, #16]
 8005c1e:	4311      	orrs	r1, r2
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	6952      	ldr	r2, [r2, #20]
 8005c24:	4311      	orrs	r1, r2
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	6992      	ldr	r2, [r2, #24]
 8005c2a:	4311      	orrs	r1, r2
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	69d2      	ldr	r2, [r2, #28]
 8005c30:	4311      	orrs	r1, r2
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	6a12      	ldr	r2, [r2, #32]
 8005c36:	4311      	orrs	r1, r2
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e026      	b.n	8005c94 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	69d9      	ldr	r1, [r3, #28]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	4319      	orrs	r1, r3
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	4b0e      	ldr	r3, [pc, #56]	; (8005ca4 <FMC_SDRAM_Init+0xb4>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	6851      	ldr	r1, [r2, #4]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	6892      	ldr	r2, [r2, #8]
 8005c74:	4311      	orrs	r1, r2
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	68d2      	ldr	r2, [r2, #12]
 8005c7a:	4311      	orrs	r1, r2
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	6912      	ldr	r2, [r2, #16]
 8005c80:	4311      	orrs	r1, r2
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	6952      	ldr	r2, [r2, #20]
 8005c86:	4311      	orrs	r1, r2
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	6992      	ldr	r2, [r2, #24]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	ffff8000 	.word	0xffff8000

08005ca8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d128      	bne.n	8005d0c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	1e59      	subs	r1, r3, #1
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	4319      	orrs	r1, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	4319      	orrs	r1, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	031b      	lsls	r3, r3, #12
 8005ce4:	4319      	orrs	r1, r3
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	4319      	orrs	r1, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	051b      	lsls	r3, r3, #20
 8005cf8:	4319      	orrs	r1, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	430b      	orrs	r3, r1
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	609a      	str	r2, [r3, #8]
 8005d0a:	e02d      	b.n	8005d68 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	4b19      	ldr	r3, [pc, #100]	; (8005d78 <FMC_SDRAM_Timing_Init+0xd0>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	68d2      	ldr	r2, [r2, #12]
 8005d18:	3a01      	subs	r2, #1
 8005d1a:	0311      	lsls	r1, r2, #12
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	6952      	ldr	r2, [r2, #20]
 8005d20:	3a01      	subs	r2, #1
 8005d22:	0512      	lsls	r2, r2, #20
 8005d24:	430a      	orrs	r2, r1
 8005d26:	431a      	orrs	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	1e59      	subs	r1, r3, #1
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	4319      	orrs	r1, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	4319      	orrs	r1, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	4319      	orrs	r1, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	061b      	lsls	r3, r3, #24
 8005d60:	430b      	orrs	r3, r1
 8005d62:	431a      	orrs	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	ff0f0fff 	.word	0xff0f0fff

08005d7c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <FMC_SDRAM_SendCommand+0x44>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	6811      	ldr	r1, [r2, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	6852      	ldr	r2, [r2, #4]
 8005d98:	4311      	orrs	r1, r2
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	6892      	ldr	r2, [r2, #8]
 8005d9e:	3a01      	subs	r2, #1
 8005da0:	0152      	lsls	r2, r2, #5
 8005da2:	4311      	orrs	r1, r2
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	68d2      	ldr	r2, [r2, #12]
 8005da8:	0252      	lsls	r2, r2, #9
 8005daa:	430a      	orrs	r2, r1
 8005dac:	431a      	orrs	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	ffc00000 	.word	0xffc00000

08005dc4 <memset>:
 8005dc4:	4402      	add	r2, r0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d100      	bne.n	8005dce <memset+0xa>
 8005dcc:	4770      	bx	lr
 8005dce:	f803 1b01 	strb.w	r1, [r3], #1
 8005dd2:	e7f9      	b.n	8005dc8 <memset+0x4>

08005dd4 <__libc_init_array>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	4d0d      	ldr	r5, [pc, #52]	; (8005e0c <__libc_init_array+0x38>)
 8005dd8:	4c0d      	ldr	r4, [pc, #52]	; (8005e10 <__libc_init_array+0x3c>)
 8005dda:	1b64      	subs	r4, r4, r5
 8005ddc:	10a4      	asrs	r4, r4, #2
 8005dde:	2600      	movs	r6, #0
 8005de0:	42a6      	cmp	r6, r4
 8005de2:	d109      	bne.n	8005df8 <__libc_init_array+0x24>
 8005de4:	4d0b      	ldr	r5, [pc, #44]	; (8005e14 <__libc_init_array+0x40>)
 8005de6:	4c0c      	ldr	r4, [pc, #48]	; (8005e18 <__libc_init_array+0x44>)
 8005de8:	f001 f8ae 	bl	8006f48 <_init>
 8005dec:	1b64      	subs	r4, r4, r5
 8005dee:	10a4      	asrs	r4, r4, #2
 8005df0:	2600      	movs	r6, #0
 8005df2:	42a6      	cmp	r6, r4
 8005df4:	d105      	bne.n	8005e02 <__libc_init_array+0x2e>
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfc:	4798      	blx	r3
 8005dfe:	3601      	adds	r6, #1
 8005e00:	e7ee      	b.n	8005de0 <__libc_init_array+0xc>
 8005e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e06:	4798      	blx	r3
 8005e08:	3601      	adds	r6, #1
 8005e0a:	e7f2      	b.n	8005df2 <__libc_init_array+0x1e>
 8005e0c:	08046608 	.word	0x08046608
 8005e10:	08046608 	.word	0x08046608
 8005e14:	08046608 	.word	0x08046608
 8005e18:	0804660c 	.word	0x0804660c
 8005e1c:	00000000 	.word	0x00000000

08005e20 <cos>:
 8005e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e22:	ec53 2b10 	vmov	r2, r3, d0
 8005e26:	4826      	ldr	r0, [pc, #152]	; (8005ec0 <cos+0xa0>)
 8005e28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005e2c:	4281      	cmp	r1, r0
 8005e2e:	dc06      	bgt.n	8005e3e <cos+0x1e>
 8005e30:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005eb8 <cos+0x98>
 8005e34:	b005      	add	sp, #20
 8005e36:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e3a:	f000 b89d 	b.w	8005f78 <__kernel_cos>
 8005e3e:	4821      	ldr	r0, [pc, #132]	; (8005ec4 <cos+0xa4>)
 8005e40:	4281      	cmp	r1, r0
 8005e42:	dd09      	ble.n	8005e58 <cos+0x38>
 8005e44:	ee10 0a10 	vmov	r0, s0
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f7fa f9e1 	bl	8000210 <__aeabi_dsub>
 8005e4e:	ec41 0b10 	vmov	d0, r0, r1
 8005e52:	b005      	add	sp, #20
 8005e54:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e58:	4668      	mov	r0, sp
 8005e5a:	f000 fa15 	bl	8006288 <__ieee754_rem_pio2>
 8005e5e:	f000 0003 	and.w	r0, r0, #3
 8005e62:	2801      	cmp	r0, #1
 8005e64:	d00b      	beq.n	8005e7e <cos+0x5e>
 8005e66:	2802      	cmp	r0, #2
 8005e68:	d016      	beq.n	8005e98 <cos+0x78>
 8005e6a:	b9e0      	cbnz	r0, 8005ea6 <cos+0x86>
 8005e6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e70:	ed9d 0b00 	vldr	d0, [sp]
 8005e74:	f000 f880 	bl	8005f78 <__kernel_cos>
 8005e78:	ec51 0b10 	vmov	r0, r1, d0
 8005e7c:	e7e7      	b.n	8005e4e <cos+0x2e>
 8005e7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e82:	ed9d 0b00 	vldr	d0, [sp]
 8005e86:	f000 f93f 	bl	8006108 <__kernel_sin>
 8005e8a:	ec53 2b10 	vmov	r2, r3, d0
 8005e8e:	ee10 0a10 	vmov	r0, s0
 8005e92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e96:	e7da      	b.n	8005e4e <cos+0x2e>
 8005e98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005e9c:	ed9d 0b00 	vldr	d0, [sp]
 8005ea0:	f000 f86a 	bl	8005f78 <__kernel_cos>
 8005ea4:	e7f1      	b.n	8005e8a <cos+0x6a>
 8005ea6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005eaa:	ed9d 0b00 	vldr	d0, [sp]
 8005eae:	2001      	movs	r0, #1
 8005eb0:	f000 f92a 	bl	8006108 <__kernel_sin>
 8005eb4:	e7e0      	b.n	8005e78 <cos+0x58>
 8005eb6:	bf00      	nop
	...
 8005ec0:	3fe921fb 	.word	0x3fe921fb
 8005ec4:	7fefffff 	.word	0x7fefffff

08005ec8 <sin>:
 8005ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005eca:	ec53 2b10 	vmov	r2, r3, d0
 8005ece:	4828      	ldr	r0, [pc, #160]	; (8005f70 <sin+0xa8>)
 8005ed0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005ed4:	4281      	cmp	r1, r0
 8005ed6:	dc07      	bgt.n	8005ee8 <sin+0x20>
 8005ed8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005f68 <sin+0xa0>
 8005edc:	2000      	movs	r0, #0
 8005ede:	b005      	add	sp, #20
 8005ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ee4:	f000 b910 	b.w	8006108 <__kernel_sin>
 8005ee8:	4822      	ldr	r0, [pc, #136]	; (8005f74 <sin+0xac>)
 8005eea:	4281      	cmp	r1, r0
 8005eec:	dd09      	ble.n	8005f02 <sin+0x3a>
 8005eee:	ee10 0a10 	vmov	r0, s0
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	f7fa f98c 	bl	8000210 <__aeabi_dsub>
 8005ef8:	ec41 0b10 	vmov	d0, r0, r1
 8005efc:	b005      	add	sp, #20
 8005efe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f02:	4668      	mov	r0, sp
 8005f04:	f000 f9c0 	bl	8006288 <__ieee754_rem_pio2>
 8005f08:	f000 0003 	and.w	r0, r0, #3
 8005f0c:	2801      	cmp	r0, #1
 8005f0e:	d00c      	beq.n	8005f2a <sin+0x62>
 8005f10:	2802      	cmp	r0, #2
 8005f12:	d011      	beq.n	8005f38 <sin+0x70>
 8005f14:	b9f0      	cbnz	r0, 8005f54 <sin+0x8c>
 8005f16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f1a:	ed9d 0b00 	vldr	d0, [sp]
 8005f1e:	2001      	movs	r0, #1
 8005f20:	f000 f8f2 	bl	8006108 <__kernel_sin>
 8005f24:	ec51 0b10 	vmov	r0, r1, d0
 8005f28:	e7e6      	b.n	8005ef8 <sin+0x30>
 8005f2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f2e:	ed9d 0b00 	vldr	d0, [sp]
 8005f32:	f000 f821 	bl	8005f78 <__kernel_cos>
 8005f36:	e7f5      	b.n	8005f24 <sin+0x5c>
 8005f38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f3c:	ed9d 0b00 	vldr	d0, [sp]
 8005f40:	2001      	movs	r0, #1
 8005f42:	f000 f8e1 	bl	8006108 <__kernel_sin>
 8005f46:	ec53 2b10 	vmov	r2, r3, d0
 8005f4a:	ee10 0a10 	vmov	r0, s0
 8005f4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005f52:	e7d1      	b.n	8005ef8 <sin+0x30>
 8005f54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f58:	ed9d 0b00 	vldr	d0, [sp]
 8005f5c:	f000 f80c 	bl	8005f78 <__kernel_cos>
 8005f60:	e7f1      	b.n	8005f46 <sin+0x7e>
 8005f62:	bf00      	nop
 8005f64:	f3af 8000 	nop.w
	...
 8005f70:	3fe921fb 	.word	0x3fe921fb
 8005f74:	7fefffff 	.word	0x7fefffff

08005f78 <__kernel_cos>:
 8005f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	ec57 6b10 	vmov	r6, r7, d0
 8005f80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005f84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005f88:	ed8d 1b00 	vstr	d1, [sp]
 8005f8c:	da07      	bge.n	8005f9e <__kernel_cos+0x26>
 8005f8e:	ee10 0a10 	vmov	r0, s0
 8005f92:	4639      	mov	r1, r7
 8005f94:	f7fa fd8e 	bl	8000ab4 <__aeabi_d2iz>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	f000 8088 	beq.w	80060ae <__kernel_cos+0x136>
 8005f9e:	4632      	mov	r2, r6
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	f7fa faeb 	bl	8000580 <__aeabi_dmul>
 8005faa:	4b51      	ldr	r3, [pc, #324]	; (80060f0 <__kernel_cos+0x178>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	f7fa fae5 	bl	8000580 <__aeabi_dmul>
 8005fb6:	a340      	add	r3, pc, #256	; (adr r3, 80060b8 <__kernel_cos+0x140>)
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	4682      	mov	sl, r0
 8005fbe:	468b      	mov	fp, r1
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	f7fa fadc 	bl	8000580 <__aeabi_dmul>
 8005fc8:	a33d      	add	r3, pc, #244	; (adr r3, 80060c0 <__kernel_cos+0x148>)
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f7fa f921 	bl	8000214 <__adddf3>
 8005fd2:	4622      	mov	r2, r4
 8005fd4:	462b      	mov	r3, r5
 8005fd6:	f7fa fad3 	bl	8000580 <__aeabi_dmul>
 8005fda:	a33b      	add	r3, pc, #236	; (adr r3, 80060c8 <__kernel_cos+0x150>)
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f7fa f916 	bl	8000210 <__aeabi_dsub>
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	462b      	mov	r3, r5
 8005fe8:	f7fa faca 	bl	8000580 <__aeabi_dmul>
 8005fec:	a338      	add	r3, pc, #224	; (adr r3, 80060d0 <__kernel_cos+0x158>)
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	f7fa f90f 	bl	8000214 <__adddf3>
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	f7fa fac1 	bl	8000580 <__aeabi_dmul>
 8005ffe:	a336      	add	r3, pc, #216	; (adr r3, 80060d8 <__kernel_cos+0x160>)
 8006000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006004:	f7fa f904 	bl	8000210 <__aeabi_dsub>
 8006008:	4622      	mov	r2, r4
 800600a:	462b      	mov	r3, r5
 800600c:	f7fa fab8 	bl	8000580 <__aeabi_dmul>
 8006010:	a333      	add	r3, pc, #204	; (adr r3, 80060e0 <__kernel_cos+0x168>)
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f7fa f8fd 	bl	8000214 <__adddf3>
 800601a:	4622      	mov	r2, r4
 800601c:	462b      	mov	r3, r5
 800601e:	f7fa faaf 	bl	8000580 <__aeabi_dmul>
 8006022:	4622      	mov	r2, r4
 8006024:	462b      	mov	r3, r5
 8006026:	f7fa faab 	bl	8000580 <__aeabi_dmul>
 800602a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800602e:	4604      	mov	r4, r0
 8006030:	460d      	mov	r5, r1
 8006032:	4630      	mov	r0, r6
 8006034:	4639      	mov	r1, r7
 8006036:	f7fa faa3 	bl	8000580 <__aeabi_dmul>
 800603a:	460b      	mov	r3, r1
 800603c:	4602      	mov	r2, r0
 800603e:	4629      	mov	r1, r5
 8006040:	4620      	mov	r0, r4
 8006042:	f7fa f8e5 	bl	8000210 <__aeabi_dsub>
 8006046:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <__kernel_cos+0x17c>)
 8006048:	4598      	cmp	r8, r3
 800604a:	4606      	mov	r6, r0
 800604c:	460f      	mov	r7, r1
 800604e:	dc10      	bgt.n	8006072 <__kernel_cos+0xfa>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4650      	mov	r0, sl
 8006056:	4659      	mov	r1, fp
 8006058:	f7fa f8da 	bl	8000210 <__aeabi_dsub>
 800605c:	460b      	mov	r3, r1
 800605e:	4926      	ldr	r1, [pc, #152]	; (80060f8 <__kernel_cos+0x180>)
 8006060:	4602      	mov	r2, r0
 8006062:	2000      	movs	r0, #0
 8006064:	f7fa f8d4 	bl	8000210 <__aeabi_dsub>
 8006068:	ec41 0b10 	vmov	d0, r0, r1
 800606c:	b003      	add	sp, #12
 800606e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006072:	4b22      	ldr	r3, [pc, #136]	; (80060fc <__kernel_cos+0x184>)
 8006074:	4920      	ldr	r1, [pc, #128]	; (80060f8 <__kernel_cos+0x180>)
 8006076:	4598      	cmp	r8, r3
 8006078:	bfcc      	ite	gt
 800607a:	4d21      	ldrgt	r5, [pc, #132]	; (8006100 <__kernel_cos+0x188>)
 800607c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006080:	2400      	movs	r4, #0
 8006082:	4622      	mov	r2, r4
 8006084:	462b      	mov	r3, r5
 8006086:	2000      	movs	r0, #0
 8006088:	f7fa f8c2 	bl	8000210 <__aeabi_dsub>
 800608c:	4622      	mov	r2, r4
 800608e:	4680      	mov	r8, r0
 8006090:	4689      	mov	r9, r1
 8006092:	462b      	mov	r3, r5
 8006094:	4650      	mov	r0, sl
 8006096:	4659      	mov	r1, fp
 8006098:	f7fa f8ba 	bl	8000210 <__aeabi_dsub>
 800609c:	4632      	mov	r2, r6
 800609e:	463b      	mov	r3, r7
 80060a0:	f7fa f8b6 	bl	8000210 <__aeabi_dsub>
 80060a4:	4602      	mov	r2, r0
 80060a6:	460b      	mov	r3, r1
 80060a8:	4640      	mov	r0, r8
 80060aa:	4649      	mov	r1, r9
 80060ac:	e7da      	b.n	8006064 <__kernel_cos+0xec>
 80060ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80060e8 <__kernel_cos+0x170>
 80060b2:	e7db      	b.n	800606c <__kernel_cos+0xf4>
 80060b4:	f3af 8000 	nop.w
 80060b8:	be8838d4 	.word	0xbe8838d4
 80060bc:	bda8fae9 	.word	0xbda8fae9
 80060c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80060c4:	3e21ee9e 	.word	0x3e21ee9e
 80060c8:	809c52ad 	.word	0x809c52ad
 80060cc:	3e927e4f 	.word	0x3e927e4f
 80060d0:	19cb1590 	.word	0x19cb1590
 80060d4:	3efa01a0 	.word	0x3efa01a0
 80060d8:	16c15177 	.word	0x16c15177
 80060dc:	3f56c16c 	.word	0x3f56c16c
 80060e0:	5555554c 	.word	0x5555554c
 80060e4:	3fa55555 	.word	0x3fa55555
 80060e8:	00000000 	.word	0x00000000
 80060ec:	3ff00000 	.word	0x3ff00000
 80060f0:	3fe00000 	.word	0x3fe00000
 80060f4:	3fd33332 	.word	0x3fd33332
 80060f8:	3ff00000 	.word	0x3ff00000
 80060fc:	3fe90000 	.word	0x3fe90000
 8006100:	3fd20000 	.word	0x3fd20000
 8006104:	00000000 	.word	0x00000000

08006108 <__kernel_sin>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	ed2d 8b04 	vpush	{d8-d9}
 8006110:	eeb0 8a41 	vmov.f32	s16, s2
 8006114:	eef0 8a61 	vmov.f32	s17, s3
 8006118:	ec55 4b10 	vmov	r4, r5, d0
 800611c:	b083      	sub	sp, #12
 800611e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006122:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006126:	9001      	str	r0, [sp, #4]
 8006128:	da06      	bge.n	8006138 <__kernel_sin+0x30>
 800612a:	ee10 0a10 	vmov	r0, s0
 800612e:	4629      	mov	r1, r5
 8006130:	f7fa fcc0 	bl	8000ab4 <__aeabi_d2iz>
 8006134:	2800      	cmp	r0, #0
 8006136:	d051      	beq.n	80061dc <__kernel_sin+0xd4>
 8006138:	4622      	mov	r2, r4
 800613a:	462b      	mov	r3, r5
 800613c:	4620      	mov	r0, r4
 800613e:	4629      	mov	r1, r5
 8006140:	f7fa fa1e 	bl	8000580 <__aeabi_dmul>
 8006144:	4682      	mov	sl, r0
 8006146:	468b      	mov	fp, r1
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f7fa fa16 	bl	8000580 <__aeabi_dmul>
 8006154:	a341      	add	r3, pc, #260	; (adr r3, 800625c <__kernel_sin+0x154>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	4680      	mov	r8, r0
 800615c:	4689      	mov	r9, r1
 800615e:	4650      	mov	r0, sl
 8006160:	4659      	mov	r1, fp
 8006162:	f7fa fa0d 	bl	8000580 <__aeabi_dmul>
 8006166:	a33f      	add	r3, pc, #252	; (adr r3, 8006264 <__kernel_sin+0x15c>)
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f7fa f850 	bl	8000210 <__aeabi_dsub>
 8006170:	4652      	mov	r2, sl
 8006172:	465b      	mov	r3, fp
 8006174:	f7fa fa04 	bl	8000580 <__aeabi_dmul>
 8006178:	a33c      	add	r3, pc, #240	; (adr r3, 800626c <__kernel_sin+0x164>)
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f7fa f849 	bl	8000214 <__adddf3>
 8006182:	4652      	mov	r2, sl
 8006184:	465b      	mov	r3, fp
 8006186:	f7fa f9fb 	bl	8000580 <__aeabi_dmul>
 800618a:	a33a      	add	r3, pc, #232	; (adr r3, 8006274 <__kernel_sin+0x16c>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f7fa f83e 	bl	8000210 <__aeabi_dsub>
 8006194:	4652      	mov	r2, sl
 8006196:	465b      	mov	r3, fp
 8006198:	f7fa f9f2 	bl	8000580 <__aeabi_dmul>
 800619c:	a337      	add	r3, pc, #220	; (adr r3, 800627c <__kernel_sin+0x174>)
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	f7fa f837 	bl	8000214 <__adddf3>
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	4606      	mov	r6, r0
 80061aa:	460f      	mov	r7, r1
 80061ac:	b9eb      	cbnz	r3, 80061ea <__kernel_sin+0xe2>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4650      	mov	r0, sl
 80061b4:	4659      	mov	r1, fp
 80061b6:	f7fa f9e3 	bl	8000580 <__aeabi_dmul>
 80061ba:	a325      	add	r3, pc, #148	; (adr r3, 8006250 <__kernel_sin+0x148>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f7fa f826 	bl	8000210 <__aeabi_dsub>
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	f7fa f9da 	bl	8000580 <__aeabi_dmul>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4620      	mov	r0, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	f7fa f81e 	bl	8000214 <__adddf3>
 80061d8:	4604      	mov	r4, r0
 80061da:	460d      	mov	r5, r1
 80061dc:	ec45 4b10 	vmov	d0, r4, r5
 80061e0:	b003      	add	sp, #12
 80061e2:	ecbd 8b04 	vpop	{d8-d9}
 80061e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ea:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <__kernel_sin+0x150>)
 80061ec:	ec51 0b18 	vmov	r0, r1, d8
 80061f0:	2200      	movs	r2, #0
 80061f2:	f7fa f9c5 	bl	8000580 <__aeabi_dmul>
 80061f6:	4632      	mov	r2, r6
 80061f8:	ec41 0b19 	vmov	d9, r0, r1
 80061fc:	463b      	mov	r3, r7
 80061fe:	4640      	mov	r0, r8
 8006200:	4649      	mov	r1, r9
 8006202:	f7fa f9bd 	bl	8000580 <__aeabi_dmul>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	ec51 0b19 	vmov	r0, r1, d9
 800620e:	f7f9 ffff 	bl	8000210 <__aeabi_dsub>
 8006212:	4652      	mov	r2, sl
 8006214:	465b      	mov	r3, fp
 8006216:	f7fa f9b3 	bl	8000580 <__aeabi_dmul>
 800621a:	ec53 2b18 	vmov	r2, r3, d8
 800621e:	f7f9 fff7 	bl	8000210 <__aeabi_dsub>
 8006222:	a30b      	add	r3, pc, #44	; (adr r3, 8006250 <__kernel_sin+0x148>)
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	4606      	mov	r6, r0
 800622a:	460f      	mov	r7, r1
 800622c:	4640      	mov	r0, r8
 800622e:	4649      	mov	r1, r9
 8006230:	f7fa f9a6 	bl	8000580 <__aeabi_dmul>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4630      	mov	r0, r6
 800623a:	4639      	mov	r1, r7
 800623c:	f7f9 ffea 	bl	8000214 <__adddf3>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f7f9 ffe2 	bl	8000210 <__aeabi_dsub>
 800624c:	e7c4      	b.n	80061d8 <__kernel_sin+0xd0>
 800624e:	bf00      	nop
 8006250:	55555549 	.word	0x55555549
 8006254:	3fc55555 	.word	0x3fc55555
 8006258:	3fe00000 	.word	0x3fe00000
 800625c:	5acfd57c 	.word	0x5acfd57c
 8006260:	3de5d93a 	.word	0x3de5d93a
 8006264:	8a2b9ceb 	.word	0x8a2b9ceb
 8006268:	3e5ae5e6 	.word	0x3e5ae5e6
 800626c:	57b1fe7d 	.word	0x57b1fe7d
 8006270:	3ec71de3 	.word	0x3ec71de3
 8006274:	19c161d5 	.word	0x19c161d5
 8006278:	3f2a01a0 	.word	0x3f2a01a0
 800627c:	1110f8a6 	.word	0x1110f8a6
 8006280:	3f811111 	.word	0x3f811111
 8006284:	00000000 	.word	0x00000000

08006288 <__ieee754_rem_pio2>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	ed2d 8b02 	vpush	{d8}
 8006290:	ec55 4b10 	vmov	r4, r5, d0
 8006294:	4bca      	ldr	r3, [pc, #808]	; (80065c0 <__ieee754_rem_pio2+0x338>)
 8006296:	b08b      	sub	sp, #44	; 0x2c
 8006298:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800629c:	4598      	cmp	r8, r3
 800629e:	4682      	mov	sl, r0
 80062a0:	9502      	str	r5, [sp, #8]
 80062a2:	dc08      	bgt.n	80062b6 <__ieee754_rem_pio2+0x2e>
 80062a4:	2200      	movs	r2, #0
 80062a6:	2300      	movs	r3, #0
 80062a8:	ed80 0b00 	vstr	d0, [r0]
 80062ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80062b0:	f04f 0b00 	mov.w	fp, #0
 80062b4:	e028      	b.n	8006308 <__ieee754_rem_pio2+0x80>
 80062b6:	4bc3      	ldr	r3, [pc, #780]	; (80065c4 <__ieee754_rem_pio2+0x33c>)
 80062b8:	4598      	cmp	r8, r3
 80062ba:	dc78      	bgt.n	80063ae <__ieee754_rem_pio2+0x126>
 80062bc:	9b02      	ldr	r3, [sp, #8]
 80062be:	4ec2      	ldr	r6, [pc, #776]	; (80065c8 <__ieee754_rem_pio2+0x340>)
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	ee10 0a10 	vmov	r0, s0
 80062c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006588 <__ieee754_rem_pio2+0x300>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	4629      	mov	r1, r5
 80062ce:	dd39      	ble.n	8006344 <__ieee754_rem_pio2+0xbc>
 80062d0:	f7f9 ff9e 	bl	8000210 <__aeabi_dsub>
 80062d4:	45b0      	cmp	r8, r6
 80062d6:	4604      	mov	r4, r0
 80062d8:	460d      	mov	r5, r1
 80062da:	d01b      	beq.n	8006314 <__ieee754_rem_pio2+0x8c>
 80062dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006590 <__ieee754_rem_pio2+0x308>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7f9 ff95 	bl	8000210 <__aeabi_dsub>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	e9ca 2300 	strd	r2, r3, [sl]
 80062ee:	4620      	mov	r0, r4
 80062f0:	4629      	mov	r1, r5
 80062f2:	f7f9 ff8d 	bl	8000210 <__aeabi_dsub>
 80062f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006590 <__ieee754_rem_pio2+0x308>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7f9 ff88 	bl	8000210 <__aeabi_dsub>
 8006300:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006304:	f04f 0b01 	mov.w	fp, #1
 8006308:	4658      	mov	r0, fp
 800630a:	b00b      	add	sp, #44	; 0x2c
 800630c:	ecbd 8b02 	vpop	{d8}
 8006310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006314:	a3a0      	add	r3, pc, #640	; (adr r3, 8006598 <__ieee754_rem_pio2+0x310>)
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	f7f9 ff79 	bl	8000210 <__aeabi_dsub>
 800631e:	a3a0      	add	r3, pc, #640	; (adr r3, 80065a0 <__ieee754_rem_pio2+0x318>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	4604      	mov	r4, r0
 8006326:	460d      	mov	r5, r1
 8006328:	f7f9 ff72 	bl	8000210 <__aeabi_dsub>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	e9ca 2300 	strd	r2, r3, [sl]
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	f7f9 ff6a 	bl	8000210 <__aeabi_dsub>
 800633c:	a398      	add	r3, pc, #608	; (adr r3, 80065a0 <__ieee754_rem_pio2+0x318>)
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	e7db      	b.n	80062fc <__ieee754_rem_pio2+0x74>
 8006344:	f7f9 ff66 	bl	8000214 <__adddf3>
 8006348:	45b0      	cmp	r8, r6
 800634a:	4604      	mov	r4, r0
 800634c:	460d      	mov	r5, r1
 800634e:	d016      	beq.n	800637e <__ieee754_rem_pio2+0xf6>
 8006350:	a38f      	add	r3, pc, #572	; (adr r3, 8006590 <__ieee754_rem_pio2+0x308>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f7f9 ff5d 	bl	8000214 <__adddf3>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	e9ca 2300 	strd	r2, r3, [sl]
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	f7f9 ff53 	bl	8000210 <__aeabi_dsub>
 800636a:	a389      	add	r3, pc, #548	; (adr r3, 8006590 <__ieee754_rem_pio2+0x308>)
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f7f9 ff50 	bl	8000214 <__adddf3>
 8006374:	f04f 3bff 	mov.w	fp, #4294967295
 8006378:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800637c:	e7c4      	b.n	8006308 <__ieee754_rem_pio2+0x80>
 800637e:	a386      	add	r3, pc, #536	; (adr r3, 8006598 <__ieee754_rem_pio2+0x310>)
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f7f9 ff46 	bl	8000214 <__adddf3>
 8006388:	a385      	add	r3, pc, #532	; (adr r3, 80065a0 <__ieee754_rem_pio2+0x318>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	4604      	mov	r4, r0
 8006390:	460d      	mov	r5, r1
 8006392:	f7f9 ff3f 	bl	8000214 <__adddf3>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	e9ca 2300 	strd	r2, r3, [sl]
 800639e:	4620      	mov	r0, r4
 80063a0:	4629      	mov	r1, r5
 80063a2:	f7f9 ff35 	bl	8000210 <__aeabi_dsub>
 80063a6:	a37e      	add	r3, pc, #504	; (adr r3, 80065a0 <__ieee754_rem_pio2+0x318>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	e7e0      	b.n	8006370 <__ieee754_rem_pio2+0xe8>
 80063ae:	4b87      	ldr	r3, [pc, #540]	; (80065cc <__ieee754_rem_pio2+0x344>)
 80063b0:	4598      	cmp	r8, r3
 80063b2:	f300 80d8 	bgt.w	8006566 <__ieee754_rem_pio2+0x2de>
 80063b6:	f000 f96d 	bl	8006694 <fabs>
 80063ba:	ec55 4b10 	vmov	r4, r5, d0
 80063be:	ee10 0a10 	vmov	r0, s0
 80063c2:	a379      	add	r3, pc, #484	; (adr r3, 80065a8 <__ieee754_rem_pio2+0x320>)
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7fa f8d9 	bl	8000580 <__aeabi_dmul>
 80063ce:	4b80      	ldr	r3, [pc, #512]	; (80065d0 <__ieee754_rem_pio2+0x348>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	f7f9 ff1f 	bl	8000214 <__adddf3>
 80063d6:	f7fa fb6d 	bl	8000ab4 <__aeabi_d2iz>
 80063da:	4683      	mov	fp, r0
 80063dc:	f7fa f866 	bl	80004ac <__aeabi_i2d>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	ec43 2b18 	vmov	d8, r2, r3
 80063e8:	a367      	add	r3, pc, #412	; (adr r3, 8006588 <__ieee754_rem_pio2+0x300>)
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	f7fa f8c7 	bl	8000580 <__aeabi_dmul>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7f9 ff09 	bl	8000210 <__aeabi_dsub>
 80063fe:	a364      	add	r3, pc, #400	; (adr r3, 8006590 <__ieee754_rem_pio2+0x308>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	4606      	mov	r6, r0
 8006406:	460f      	mov	r7, r1
 8006408:	ec51 0b18 	vmov	r0, r1, d8
 800640c:	f7fa f8b8 	bl	8000580 <__aeabi_dmul>
 8006410:	f1bb 0f1f 	cmp.w	fp, #31
 8006414:	4604      	mov	r4, r0
 8006416:	460d      	mov	r5, r1
 8006418:	dc0d      	bgt.n	8006436 <__ieee754_rem_pio2+0x1ae>
 800641a:	4b6e      	ldr	r3, [pc, #440]	; (80065d4 <__ieee754_rem_pio2+0x34c>)
 800641c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006424:	4543      	cmp	r3, r8
 8006426:	d006      	beq.n	8006436 <__ieee754_rem_pio2+0x1ae>
 8006428:	4622      	mov	r2, r4
 800642a:	462b      	mov	r3, r5
 800642c:	4630      	mov	r0, r6
 800642e:	4639      	mov	r1, r7
 8006430:	f7f9 feee 	bl	8000210 <__aeabi_dsub>
 8006434:	e00e      	b.n	8006454 <__ieee754_rem_pio2+0x1cc>
 8006436:	462b      	mov	r3, r5
 8006438:	4622      	mov	r2, r4
 800643a:	4630      	mov	r0, r6
 800643c:	4639      	mov	r1, r7
 800643e:	f7f9 fee7 	bl	8000210 <__aeabi_dsub>
 8006442:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800644c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006450:	2b10      	cmp	r3, #16
 8006452:	dc02      	bgt.n	800645a <__ieee754_rem_pio2+0x1d2>
 8006454:	e9ca 0100 	strd	r0, r1, [sl]
 8006458:	e039      	b.n	80064ce <__ieee754_rem_pio2+0x246>
 800645a:	a34f      	add	r3, pc, #316	; (adr r3, 8006598 <__ieee754_rem_pio2+0x310>)
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	ec51 0b18 	vmov	r0, r1, d8
 8006464:	f7fa f88c 	bl	8000580 <__aeabi_dmul>
 8006468:	4604      	mov	r4, r0
 800646a:	460d      	mov	r5, r1
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4630      	mov	r0, r6
 8006472:	4639      	mov	r1, r7
 8006474:	f7f9 fecc 	bl	8000210 <__aeabi_dsub>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4680      	mov	r8, r0
 800647e:	4689      	mov	r9, r1
 8006480:	4630      	mov	r0, r6
 8006482:	4639      	mov	r1, r7
 8006484:	f7f9 fec4 	bl	8000210 <__aeabi_dsub>
 8006488:	4622      	mov	r2, r4
 800648a:	462b      	mov	r3, r5
 800648c:	f7f9 fec0 	bl	8000210 <__aeabi_dsub>
 8006490:	a343      	add	r3, pc, #268	; (adr r3, 80065a0 <__ieee754_rem_pio2+0x318>)
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	4604      	mov	r4, r0
 8006498:	460d      	mov	r5, r1
 800649a:	ec51 0b18 	vmov	r0, r1, d8
 800649e:	f7fa f86f 	bl	8000580 <__aeabi_dmul>
 80064a2:	4622      	mov	r2, r4
 80064a4:	462b      	mov	r3, r5
 80064a6:	f7f9 feb3 	bl	8000210 <__aeabi_dsub>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4604      	mov	r4, r0
 80064b0:	460d      	mov	r5, r1
 80064b2:	4640      	mov	r0, r8
 80064b4:	4649      	mov	r1, r9
 80064b6:	f7f9 feab 	bl	8000210 <__aeabi_dsub>
 80064ba:	9a03      	ldr	r2, [sp, #12]
 80064bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b31      	cmp	r3, #49	; 0x31
 80064c4:	dc24      	bgt.n	8006510 <__ieee754_rem_pio2+0x288>
 80064c6:	e9ca 0100 	strd	r0, r1, [sl]
 80064ca:	4646      	mov	r6, r8
 80064cc:	464f      	mov	r7, r9
 80064ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80064d2:	4630      	mov	r0, r6
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	4639      	mov	r1, r7
 80064da:	f7f9 fe99 	bl	8000210 <__aeabi_dsub>
 80064de:	462b      	mov	r3, r5
 80064e0:	4622      	mov	r2, r4
 80064e2:	f7f9 fe95 	bl	8000210 <__aeabi_dsub>
 80064e6:	9b02      	ldr	r3, [sp, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80064ee:	f6bf af0b 	bge.w	8006308 <__ieee754_rem_pio2+0x80>
 80064f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80064f6:	f8ca 3004 	str.w	r3, [sl, #4]
 80064fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064fe:	f8ca 8000 	str.w	r8, [sl]
 8006502:	f8ca 0008 	str.w	r0, [sl, #8]
 8006506:	f8ca 300c 	str.w	r3, [sl, #12]
 800650a:	f1cb 0b00 	rsb	fp, fp, #0
 800650e:	e6fb      	b.n	8006308 <__ieee754_rem_pio2+0x80>
 8006510:	a327      	add	r3, pc, #156	; (adr r3, 80065b0 <__ieee754_rem_pio2+0x328>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	ec51 0b18 	vmov	r0, r1, d8
 800651a:	f7fa f831 	bl	8000580 <__aeabi_dmul>
 800651e:	4604      	mov	r4, r0
 8006520:	460d      	mov	r5, r1
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4640      	mov	r0, r8
 8006528:	4649      	mov	r1, r9
 800652a:	f7f9 fe71 	bl	8000210 <__aeabi_dsub>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4606      	mov	r6, r0
 8006534:	460f      	mov	r7, r1
 8006536:	4640      	mov	r0, r8
 8006538:	4649      	mov	r1, r9
 800653a:	f7f9 fe69 	bl	8000210 <__aeabi_dsub>
 800653e:	4622      	mov	r2, r4
 8006540:	462b      	mov	r3, r5
 8006542:	f7f9 fe65 	bl	8000210 <__aeabi_dsub>
 8006546:	a31c      	add	r3, pc, #112	; (adr r3, 80065b8 <__ieee754_rem_pio2+0x330>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	4604      	mov	r4, r0
 800654e:	460d      	mov	r5, r1
 8006550:	ec51 0b18 	vmov	r0, r1, d8
 8006554:	f7fa f814 	bl	8000580 <__aeabi_dmul>
 8006558:	4622      	mov	r2, r4
 800655a:	462b      	mov	r3, r5
 800655c:	f7f9 fe58 	bl	8000210 <__aeabi_dsub>
 8006560:	4604      	mov	r4, r0
 8006562:	460d      	mov	r5, r1
 8006564:	e760      	b.n	8006428 <__ieee754_rem_pio2+0x1a0>
 8006566:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <__ieee754_rem_pio2+0x350>)
 8006568:	4598      	cmp	r8, r3
 800656a:	dd37      	ble.n	80065dc <__ieee754_rem_pio2+0x354>
 800656c:	ee10 2a10 	vmov	r2, s0
 8006570:	462b      	mov	r3, r5
 8006572:	4620      	mov	r0, r4
 8006574:	4629      	mov	r1, r5
 8006576:	f7f9 fe4b 	bl	8000210 <__aeabi_dsub>
 800657a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800657e:	e9ca 0100 	strd	r0, r1, [sl]
 8006582:	e695      	b.n	80062b0 <__ieee754_rem_pio2+0x28>
 8006584:	f3af 8000 	nop.w
 8006588:	54400000 	.word	0x54400000
 800658c:	3ff921fb 	.word	0x3ff921fb
 8006590:	1a626331 	.word	0x1a626331
 8006594:	3dd0b461 	.word	0x3dd0b461
 8006598:	1a600000 	.word	0x1a600000
 800659c:	3dd0b461 	.word	0x3dd0b461
 80065a0:	2e037073 	.word	0x2e037073
 80065a4:	3ba3198a 	.word	0x3ba3198a
 80065a8:	6dc9c883 	.word	0x6dc9c883
 80065ac:	3fe45f30 	.word	0x3fe45f30
 80065b0:	2e000000 	.word	0x2e000000
 80065b4:	3ba3198a 	.word	0x3ba3198a
 80065b8:	252049c1 	.word	0x252049c1
 80065bc:	397b839a 	.word	0x397b839a
 80065c0:	3fe921fb 	.word	0x3fe921fb
 80065c4:	4002d97b 	.word	0x4002d97b
 80065c8:	3ff921fb 	.word	0x3ff921fb
 80065cc:	413921fb 	.word	0x413921fb
 80065d0:	3fe00000 	.word	0x3fe00000
 80065d4:	08046424 	.word	0x08046424
 80065d8:	7fefffff 	.word	0x7fefffff
 80065dc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80065e0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80065e4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80065e8:	4620      	mov	r0, r4
 80065ea:	460d      	mov	r5, r1
 80065ec:	f7fa fa62 	bl	8000ab4 <__aeabi_d2iz>
 80065f0:	f7f9 ff5c 	bl	80004ac <__aeabi_i2d>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4620      	mov	r0, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006600:	f7f9 fe06 	bl	8000210 <__aeabi_dsub>
 8006604:	4b21      	ldr	r3, [pc, #132]	; (800668c <__ieee754_rem_pio2+0x404>)
 8006606:	2200      	movs	r2, #0
 8006608:	f7f9 ffba 	bl	8000580 <__aeabi_dmul>
 800660c:	460d      	mov	r5, r1
 800660e:	4604      	mov	r4, r0
 8006610:	f7fa fa50 	bl	8000ab4 <__aeabi_d2iz>
 8006614:	f7f9 ff4a 	bl	80004ac <__aeabi_i2d>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006624:	f7f9 fdf4 	bl	8000210 <__aeabi_dsub>
 8006628:	4b18      	ldr	r3, [pc, #96]	; (800668c <__ieee754_rem_pio2+0x404>)
 800662a:	2200      	movs	r2, #0
 800662c:	f7f9 ffa8 	bl	8000580 <__aeabi_dmul>
 8006630:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006634:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006638:	2703      	movs	r7, #3
 800663a:	2400      	movs	r4, #0
 800663c:	2500      	movs	r5, #0
 800663e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006642:	4622      	mov	r2, r4
 8006644:	462b      	mov	r3, r5
 8006646:	46b9      	mov	r9, r7
 8006648:	3f01      	subs	r7, #1
 800664a:	f7fa fa01 	bl	8000a50 <__aeabi_dcmpeq>
 800664e:	2800      	cmp	r0, #0
 8006650:	d1f5      	bne.n	800663e <__ieee754_rem_pio2+0x3b6>
 8006652:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <__ieee754_rem_pio2+0x408>)
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	2302      	movs	r3, #2
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	4632      	mov	r2, r6
 800665c:	464b      	mov	r3, r9
 800665e:	4651      	mov	r1, sl
 8006660:	a804      	add	r0, sp, #16
 8006662:	f000 f8a1 	bl	80067a8 <__kernel_rem_pio2>
 8006666:	9b02      	ldr	r3, [sp, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	4683      	mov	fp, r0
 800666c:	f6bf ae4c 	bge.w	8006308 <__ieee754_rem_pio2+0x80>
 8006670:	e9da 2100 	ldrd	r2, r1, [sl]
 8006674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006678:	e9ca 2300 	strd	r2, r3, [sl]
 800667c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006680:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006684:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006688:	e73f      	b.n	800650a <__ieee754_rem_pio2+0x282>
 800668a:	bf00      	nop
 800668c:	41700000 	.word	0x41700000
 8006690:	080464a4 	.word	0x080464a4

08006694 <fabs>:
 8006694:	ec51 0b10 	vmov	r0, r1, d0
 8006698:	ee10 2a10 	vmov	r2, s0
 800669c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80066a0:	ec43 2b10 	vmov	d0, r2, r3
 80066a4:	4770      	bx	lr
	...

080066a8 <scalbn>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	ec55 4b10 	vmov	r4, r5, d0
 80066ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80066b2:	4606      	mov	r6, r0
 80066b4:	462b      	mov	r3, r5
 80066b6:	b999      	cbnz	r1, 80066e0 <scalbn+0x38>
 80066b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80066bc:	4323      	orrs	r3, r4
 80066be:	d03f      	beq.n	8006740 <scalbn+0x98>
 80066c0:	4b35      	ldr	r3, [pc, #212]	; (8006798 <scalbn+0xf0>)
 80066c2:	4629      	mov	r1, r5
 80066c4:	ee10 0a10 	vmov	r0, s0
 80066c8:	2200      	movs	r2, #0
 80066ca:	f7f9 ff59 	bl	8000580 <__aeabi_dmul>
 80066ce:	4b33      	ldr	r3, [pc, #204]	; (800679c <scalbn+0xf4>)
 80066d0:	429e      	cmp	r6, r3
 80066d2:	4604      	mov	r4, r0
 80066d4:	460d      	mov	r5, r1
 80066d6:	da10      	bge.n	80066fa <scalbn+0x52>
 80066d8:	a327      	add	r3, pc, #156	; (adr r3, 8006778 <scalbn+0xd0>)
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	e01f      	b.n	8006720 <scalbn+0x78>
 80066e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80066e4:	4291      	cmp	r1, r2
 80066e6:	d10c      	bne.n	8006702 <scalbn+0x5a>
 80066e8:	ee10 2a10 	vmov	r2, s0
 80066ec:	4620      	mov	r0, r4
 80066ee:	4629      	mov	r1, r5
 80066f0:	f7f9 fd90 	bl	8000214 <__adddf3>
 80066f4:	4604      	mov	r4, r0
 80066f6:	460d      	mov	r5, r1
 80066f8:	e022      	b.n	8006740 <scalbn+0x98>
 80066fa:	460b      	mov	r3, r1
 80066fc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006700:	3936      	subs	r1, #54	; 0x36
 8006702:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006706:	4296      	cmp	r6, r2
 8006708:	dd0d      	ble.n	8006726 <scalbn+0x7e>
 800670a:	2d00      	cmp	r5, #0
 800670c:	a11c      	add	r1, pc, #112	; (adr r1, 8006780 <scalbn+0xd8>)
 800670e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006712:	da02      	bge.n	800671a <scalbn+0x72>
 8006714:	a11c      	add	r1, pc, #112	; (adr r1, 8006788 <scalbn+0xe0>)
 8006716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800671a:	a319      	add	r3, pc, #100	; (adr r3, 8006780 <scalbn+0xd8>)
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	f7f9 ff2e 	bl	8000580 <__aeabi_dmul>
 8006724:	e7e6      	b.n	80066f4 <scalbn+0x4c>
 8006726:	1872      	adds	r2, r6, r1
 8006728:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800672c:	428a      	cmp	r2, r1
 800672e:	dcec      	bgt.n	800670a <scalbn+0x62>
 8006730:	2a00      	cmp	r2, #0
 8006732:	dd08      	ble.n	8006746 <scalbn+0x9e>
 8006734:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006738:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800673c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006740:	ec45 4b10 	vmov	d0, r4, r5
 8006744:	bd70      	pop	{r4, r5, r6, pc}
 8006746:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800674a:	da08      	bge.n	800675e <scalbn+0xb6>
 800674c:	2d00      	cmp	r5, #0
 800674e:	a10a      	add	r1, pc, #40	; (adr r1, 8006778 <scalbn+0xd0>)
 8006750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006754:	dac0      	bge.n	80066d8 <scalbn+0x30>
 8006756:	a10e      	add	r1, pc, #56	; (adr r1, 8006790 <scalbn+0xe8>)
 8006758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800675c:	e7bc      	b.n	80066d8 <scalbn+0x30>
 800675e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006762:	3236      	adds	r2, #54	; 0x36
 8006764:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006768:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800676c:	4620      	mov	r0, r4
 800676e:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <scalbn+0xf8>)
 8006770:	2200      	movs	r2, #0
 8006772:	e7d5      	b.n	8006720 <scalbn+0x78>
 8006774:	f3af 8000 	nop.w
 8006778:	c2f8f359 	.word	0xc2f8f359
 800677c:	01a56e1f 	.word	0x01a56e1f
 8006780:	8800759c 	.word	0x8800759c
 8006784:	7e37e43c 	.word	0x7e37e43c
 8006788:	8800759c 	.word	0x8800759c
 800678c:	fe37e43c 	.word	0xfe37e43c
 8006790:	c2f8f359 	.word	0xc2f8f359
 8006794:	81a56e1f 	.word	0x81a56e1f
 8006798:	43500000 	.word	0x43500000
 800679c:	ffff3cb0 	.word	0xffff3cb0
 80067a0:	3c900000 	.word	0x3c900000
 80067a4:	00000000 	.word	0x00000000

080067a8 <__kernel_rem_pio2>:
 80067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	ed2d 8b02 	vpush	{d8}
 80067b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80067b4:	f112 0f14 	cmn.w	r2, #20
 80067b8:	9306      	str	r3, [sp, #24]
 80067ba:	9104      	str	r1, [sp, #16]
 80067bc:	4bc2      	ldr	r3, [pc, #776]	; (8006ac8 <__kernel_rem_pio2+0x320>)
 80067be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80067c0:	9009      	str	r0, [sp, #36]	; 0x24
 80067c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	9b06      	ldr	r3, [sp, #24]
 80067ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80067ce:	bfa8      	it	ge
 80067d0:	1ed4      	subge	r4, r2, #3
 80067d2:	9305      	str	r3, [sp, #20]
 80067d4:	bfb2      	itee	lt
 80067d6:	2400      	movlt	r4, #0
 80067d8:	2318      	movge	r3, #24
 80067da:	fb94 f4f3 	sdivge	r4, r4, r3
 80067de:	f06f 0317 	mvn.w	r3, #23
 80067e2:	fb04 3303 	mla	r3, r4, r3, r3
 80067e6:	eb03 0a02 	add.w	sl, r3, r2
 80067ea:	9b00      	ldr	r3, [sp, #0]
 80067ec:	9a05      	ldr	r2, [sp, #20]
 80067ee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006ab8 <__kernel_rem_pio2+0x310>
 80067f2:	eb03 0802 	add.w	r8, r3, r2
 80067f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80067f8:	1aa7      	subs	r7, r4, r2
 80067fa:	ae20      	add	r6, sp, #128	; 0x80
 80067fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006800:	2500      	movs	r5, #0
 8006802:	4545      	cmp	r5, r8
 8006804:	dd13      	ble.n	800682e <__kernel_rem_pio2+0x86>
 8006806:	9b06      	ldr	r3, [sp, #24]
 8006808:	aa20      	add	r2, sp, #128	; 0x80
 800680a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800680e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	9b00      	ldr	r3, [sp, #0]
 8006818:	4598      	cmp	r8, r3
 800681a:	dc31      	bgt.n	8006880 <__kernel_rem_pio2+0xd8>
 800681c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006ab8 <__kernel_rem_pio2+0x310>
 8006820:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006824:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006828:	462f      	mov	r7, r5
 800682a:	2600      	movs	r6, #0
 800682c:	e01b      	b.n	8006866 <__kernel_rem_pio2+0xbe>
 800682e:	42ef      	cmn	r7, r5
 8006830:	d407      	bmi.n	8006842 <__kernel_rem_pio2+0x9a>
 8006832:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006836:	f7f9 fe39 	bl	80004ac <__aeabi_i2d>
 800683a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800683e:	3501      	adds	r5, #1
 8006840:	e7df      	b.n	8006802 <__kernel_rem_pio2+0x5a>
 8006842:	ec51 0b18 	vmov	r0, r1, d8
 8006846:	e7f8      	b.n	800683a <__kernel_rem_pio2+0x92>
 8006848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800684c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006850:	f7f9 fe96 	bl	8000580 <__aeabi_dmul>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800685c:	f7f9 fcda 	bl	8000214 <__adddf3>
 8006860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006864:	3601      	adds	r6, #1
 8006866:	9b05      	ldr	r3, [sp, #20]
 8006868:	429e      	cmp	r6, r3
 800686a:	f1a7 0708 	sub.w	r7, r7, #8
 800686e:	ddeb      	ble.n	8006848 <__kernel_rem_pio2+0xa0>
 8006870:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006874:	f108 0801 	add.w	r8, r8, #1
 8006878:	ecab 7b02 	vstmia	fp!, {d7}
 800687c:	3508      	adds	r5, #8
 800687e:	e7ca      	b.n	8006816 <__kernel_rem_pio2+0x6e>
 8006880:	9b00      	ldr	r3, [sp, #0]
 8006882:	aa0c      	add	r2, sp, #48	; 0x30
 8006884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006888:	930b      	str	r3, [sp, #44]	; 0x2c
 800688a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800688c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006890:	9c00      	ldr	r4, [sp, #0]
 8006892:	930a      	str	r3, [sp, #40]	; 0x28
 8006894:	00e3      	lsls	r3, r4, #3
 8006896:	9308      	str	r3, [sp, #32]
 8006898:	ab98      	add	r3, sp, #608	; 0x260
 800689a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800689e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80068a2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80068a6:	ab70      	add	r3, sp, #448	; 0x1c0
 80068a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80068ac:	46c3      	mov	fp, r8
 80068ae:	46a1      	mov	r9, r4
 80068b0:	f1b9 0f00 	cmp.w	r9, #0
 80068b4:	f1a5 0508 	sub.w	r5, r5, #8
 80068b8:	dc77      	bgt.n	80069aa <__kernel_rem_pio2+0x202>
 80068ba:	ec47 6b10 	vmov	d0, r6, r7
 80068be:	4650      	mov	r0, sl
 80068c0:	f7ff fef2 	bl	80066a8 <scalbn>
 80068c4:	ec57 6b10 	vmov	r6, r7, d0
 80068c8:	2200      	movs	r2, #0
 80068ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80068ce:	ee10 0a10 	vmov	r0, s0
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7f9 fe54 	bl	8000580 <__aeabi_dmul>
 80068d8:	ec41 0b10 	vmov	d0, r0, r1
 80068dc:	f000 fab4 	bl	8006e48 <floor>
 80068e0:	4b7a      	ldr	r3, [pc, #488]	; (8006acc <__kernel_rem_pio2+0x324>)
 80068e2:	ec51 0b10 	vmov	r0, r1, d0
 80068e6:	2200      	movs	r2, #0
 80068e8:	f7f9 fe4a 	bl	8000580 <__aeabi_dmul>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	f7f9 fc8c 	bl	8000210 <__aeabi_dsub>
 80068f8:	460f      	mov	r7, r1
 80068fa:	4606      	mov	r6, r0
 80068fc:	f7fa f8da 	bl	8000ab4 <__aeabi_d2iz>
 8006900:	9002      	str	r0, [sp, #8]
 8006902:	f7f9 fdd3 	bl	80004ac <__aeabi_i2d>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4630      	mov	r0, r6
 800690c:	4639      	mov	r1, r7
 800690e:	f7f9 fc7f 	bl	8000210 <__aeabi_dsub>
 8006912:	f1ba 0f00 	cmp.w	sl, #0
 8006916:	4606      	mov	r6, r0
 8006918:	460f      	mov	r7, r1
 800691a:	dd6d      	ble.n	80069f8 <__kernel_rem_pio2+0x250>
 800691c:	1e61      	subs	r1, r4, #1
 800691e:	ab0c      	add	r3, sp, #48	; 0x30
 8006920:	9d02      	ldr	r5, [sp, #8]
 8006922:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006926:	f1ca 0018 	rsb	r0, sl, #24
 800692a:	fa43 f200 	asr.w	r2, r3, r0
 800692e:	4415      	add	r5, r2
 8006930:	4082      	lsls	r2, r0
 8006932:	1a9b      	subs	r3, r3, r2
 8006934:	aa0c      	add	r2, sp, #48	; 0x30
 8006936:	9502      	str	r5, [sp, #8]
 8006938:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800693c:	f1ca 0217 	rsb	r2, sl, #23
 8006940:	fa43 fb02 	asr.w	fp, r3, r2
 8006944:	f1bb 0f00 	cmp.w	fp, #0
 8006948:	dd65      	ble.n	8006a16 <__kernel_rem_pio2+0x26e>
 800694a:	9b02      	ldr	r3, [sp, #8]
 800694c:	2200      	movs	r2, #0
 800694e:	3301      	adds	r3, #1
 8006950:	9302      	str	r3, [sp, #8]
 8006952:	4615      	mov	r5, r2
 8006954:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006958:	4294      	cmp	r4, r2
 800695a:	f300 809f 	bgt.w	8006a9c <__kernel_rem_pio2+0x2f4>
 800695e:	f1ba 0f00 	cmp.w	sl, #0
 8006962:	dd07      	ble.n	8006974 <__kernel_rem_pio2+0x1cc>
 8006964:	f1ba 0f01 	cmp.w	sl, #1
 8006968:	f000 80c1 	beq.w	8006aee <__kernel_rem_pio2+0x346>
 800696c:	f1ba 0f02 	cmp.w	sl, #2
 8006970:	f000 80c7 	beq.w	8006b02 <__kernel_rem_pio2+0x35a>
 8006974:	f1bb 0f02 	cmp.w	fp, #2
 8006978:	d14d      	bne.n	8006a16 <__kernel_rem_pio2+0x26e>
 800697a:	4632      	mov	r2, r6
 800697c:	463b      	mov	r3, r7
 800697e:	4954      	ldr	r1, [pc, #336]	; (8006ad0 <__kernel_rem_pio2+0x328>)
 8006980:	2000      	movs	r0, #0
 8006982:	f7f9 fc45 	bl	8000210 <__aeabi_dsub>
 8006986:	4606      	mov	r6, r0
 8006988:	460f      	mov	r7, r1
 800698a:	2d00      	cmp	r5, #0
 800698c:	d043      	beq.n	8006a16 <__kernel_rem_pio2+0x26e>
 800698e:	4650      	mov	r0, sl
 8006990:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006ac0 <__kernel_rem_pio2+0x318>
 8006994:	f7ff fe88 	bl	80066a8 <scalbn>
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	ec53 2b10 	vmov	r2, r3, d0
 80069a0:	f7f9 fc36 	bl	8000210 <__aeabi_dsub>
 80069a4:	4606      	mov	r6, r0
 80069a6:	460f      	mov	r7, r1
 80069a8:	e035      	b.n	8006a16 <__kernel_rem_pio2+0x26e>
 80069aa:	4b4a      	ldr	r3, [pc, #296]	; (8006ad4 <__kernel_rem_pio2+0x32c>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	4630      	mov	r0, r6
 80069b0:	4639      	mov	r1, r7
 80069b2:	f7f9 fde5 	bl	8000580 <__aeabi_dmul>
 80069b6:	f7fa f87d 	bl	8000ab4 <__aeabi_d2iz>
 80069ba:	f7f9 fd77 	bl	80004ac <__aeabi_i2d>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	ec43 2b18 	vmov	d8, r2, r3
 80069c6:	4b44      	ldr	r3, [pc, #272]	; (8006ad8 <__kernel_rem_pio2+0x330>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	f7f9 fdd9 	bl	8000580 <__aeabi_dmul>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4630      	mov	r0, r6
 80069d4:	4639      	mov	r1, r7
 80069d6:	f7f9 fc1b 	bl	8000210 <__aeabi_dsub>
 80069da:	f7fa f86b 	bl	8000ab4 <__aeabi_d2iz>
 80069de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069e2:	f84b 0b04 	str.w	r0, [fp], #4
 80069e6:	ec51 0b18 	vmov	r0, r1, d8
 80069ea:	f7f9 fc13 	bl	8000214 <__adddf3>
 80069ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	e75b      	b.n	80068b0 <__kernel_rem_pio2+0x108>
 80069f8:	d106      	bne.n	8006a08 <__kernel_rem_pio2+0x260>
 80069fa:	1e63      	subs	r3, r4, #1
 80069fc:	aa0c      	add	r2, sp, #48	; 0x30
 80069fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a02:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006a06:	e79d      	b.n	8006944 <__kernel_rem_pio2+0x19c>
 8006a08:	4b34      	ldr	r3, [pc, #208]	; (8006adc <__kernel_rem_pio2+0x334>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f7fa f83e 	bl	8000a8c <__aeabi_dcmpge>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d140      	bne.n	8006a96 <__kernel_rem_pio2+0x2ee>
 8006a14:	4683      	mov	fp, r0
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	f7fa f817 	bl	8000a50 <__aeabi_dcmpeq>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	f000 80c1 	beq.w	8006baa <__kernel_rem_pio2+0x402>
 8006a28:	1e65      	subs	r5, r4, #1
 8006a2a:	462b      	mov	r3, r5
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	9900      	ldr	r1, [sp, #0]
 8006a30:	428b      	cmp	r3, r1
 8006a32:	da6d      	bge.n	8006b10 <__kernel_rem_pio2+0x368>
 8006a34:	2a00      	cmp	r2, #0
 8006a36:	f000 808a 	beq.w	8006b4e <__kernel_rem_pio2+0x3a6>
 8006a3a:	ab0c      	add	r3, sp, #48	; 0x30
 8006a3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006a40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 80ae 	beq.w	8006ba6 <__kernel_rem_pio2+0x3fe>
 8006a4a:	4650      	mov	r0, sl
 8006a4c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006ac0 <__kernel_rem_pio2+0x318>
 8006a50:	f7ff fe2a 	bl	80066a8 <scalbn>
 8006a54:	1c6b      	adds	r3, r5, #1
 8006a56:	00da      	lsls	r2, r3, #3
 8006a58:	9205      	str	r2, [sp, #20]
 8006a5a:	ec57 6b10 	vmov	r6, r7, d0
 8006a5e:	aa70      	add	r2, sp, #448	; 0x1c0
 8006a60:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006ad4 <__kernel_rem_pio2+0x32c>
 8006a64:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006a68:	462c      	mov	r4, r5
 8006a6a:	f04f 0800 	mov.w	r8, #0
 8006a6e:	2c00      	cmp	r4, #0
 8006a70:	f280 80d4 	bge.w	8006c1c <__kernel_rem_pio2+0x474>
 8006a74:	462c      	mov	r4, r5
 8006a76:	2c00      	cmp	r4, #0
 8006a78:	f2c0 8102 	blt.w	8006c80 <__kernel_rem_pio2+0x4d8>
 8006a7c:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <__kernel_rem_pio2+0x338>)
 8006a7e:	461e      	mov	r6, r3
 8006a80:	ab70      	add	r3, sp, #448	; 0x1c0
 8006a82:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006a86:	1b2b      	subs	r3, r5, r4
 8006a88:	f04f 0900 	mov.w	r9, #0
 8006a8c:	f04f 0a00 	mov.w	sl, #0
 8006a90:	2700      	movs	r7, #0
 8006a92:	9306      	str	r3, [sp, #24]
 8006a94:	e0e6      	b.n	8006c64 <__kernel_rem_pio2+0x4bc>
 8006a96:	f04f 0b02 	mov.w	fp, #2
 8006a9a:	e756      	b.n	800694a <__kernel_rem_pio2+0x1a2>
 8006a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006aa0:	bb05      	cbnz	r5, 8006ae4 <__kernel_rem_pio2+0x33c>
 8006aa2:	b123      	cbz	r3, 8006aae <__kernel_rem_pio2+0x306>
 8006aa4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006aa8:	f8c8 3000 	str.w	r3, [r8]
 8006aac:	2301      	movs	r3, #1
 8006aae:	3201      	adds	r2, #1
 8006ab0:	f108 0804 	add.w	r8, r8, #4
 8006ab4:	461d      	mov	r5, r3
 8006ab6:	e74f      	b.n	8006958 <__kernel_rem_pio2+0x1b0>
	...
 8006ac4:	3ff00000 	.word	0x3ff00000
 8006ac8:	080465f0 	.word	0x080465f0
 8006acc:	40200000 	.word	0x40200000
 8006ad0:	3ff00000 	.word	0x3ff00000
 8006ad4:	3e700000 	.word	0x3e700000
 8006ad8:	41700000 	.word	0x41700000
 8006adc:	3fe00000 	.word	0x3fe00000
 8006ae0:	080465b0 	.word	0x080465b0
 8006ae4:	1acb      	subs	r3, r1, r3
 8006ae6:	f8c8 3000 	str.w	r3, [r8]
 8006aea:	462b      	mov	r3, r5
 8006aec:	e7df      	b.n	8006aae <__kernel_rem_pio2+0x306>
 8006aee:	1e62      	subs	r2, r4, #1
 8006af0:	ab0c      	add	r3, sp, #48	; 0x30
 8006af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006afa:	a90c      	add	r1, sp, #48	; 0x30
 8006afc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006b00:	e738      	b.n	8006974 <__kernel_rem_pio2+0x1cc>
 8006b02:	1e62      	subs	r2, r4, #1
 8006b04:	ab0c      	add	r3, sp, #48	; 0x30
 8006b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006b0e:	e7f4      	b.n	8006afa <__kernel_rem_pio2+0x352>
 8006b10:	a90c      	add	r1, sp, #48	; 0x30
 8006b12:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006b16:	3b01      	subs	r3, #1
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	e788      	b.n	8006a2e <__kernel_rem_pio2+0x286>
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006b22:	2900      	cmp	r1, #0
 8006b24:	d0fa      	beq.n	8006b1c <__kernel_rem_pio2+0x374>
 8006b26:	9a08      	ldr	r2, [sp, #32]
 8006b28:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006b2c:	446a      	add	r2, sp
 8006b2e:	3a98      	subs	r2, #152	; 0x98
 8006b30:	9208      	str	r2, [sp, #32]
 8006b32:	9a06      	ldr	r2, [sp, #24]
 8006b34:	a920      	add	r1, sp, #128	; 0x80
 8006b36:	18a2      	adds	r2, r4, r2
 8006b38:	18e3      	adds	r3, r4, r3
 8006b3a:	f104 0801 	add.w	r8, r4, #1
 8006b3e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006b42:	9302      	str	r3, [sp, #8]
 8006b44:	9b02      	ldr	r3, [sp, #8]
 8006b46:	4543      	cmp	r3, r8
 8006b48:	da04      	bge.n	8006b54 <__kernel_rem_pio2+0x3ac>
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	e6a2      	b.n	8006894 <__kernel_rem_pio2+0xec>
 8006b4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b50:	2301      	movs	r3, #1
 8006b52:	e7e4      	b.n	8006b1e <__kernel_rem_pio2+0x376>
 8006b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b56:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006b5a:	f7f9 fca7 	bl	80004ac <__aeabi_i2d>
 8006b5e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b64:	46ab      	mov	fp, r5
 8006b66:	461c      	mov	r4, r3
 8006b68:	f04f 0900 	mov.w	r9, #0
 8006b6c:	2600      	movs	r6, #0
 8006b6e:	2700      	movs	r7, #0
 8006b70:	9b05      	ldr	r3, [sp, #20]
 8006b72:	4599      	cmp	r9, r3
 8006b74:	dd06      	ble.n	8006b84 <__kernel_rem_pio2+0x3dc>
 8006b76:	9b08      	ldr	r3, [sp, #32]
 8006b78:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006b7c:	f108 0801 	add.w	r8, r8, #1
 8006b80:	9308      	str	r3, [sp, #32]
 8006b82:	e7df      	b.n	8006b44 <__kernel_rem_pio2+0x39c>
 8006b84:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006b88:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006b8c:	f7f9 fcf8 	bl	8000580 <__aeabi_dmul>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4630      	mov	r0, r6
 8006b96:	4639      	mov	r1, r7
 8006b98:	f7f9 fb3c 	bl	8000214 <__adddf3>
 8006b9c:	f109 0901 	add.w	r9, r9, #1
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	460f      	mov	r7, r1
 8006ba4:	e7e4      	b.n	8006b70 <__kernel_rem_pio2+0x3c8>
 8006ba6:	3d01      	subs	r5, #1
 8006ba8:	e747      	b.n	8006a3a <__kernel_rem_pio2+0x292>
 8006baa:	ec47 6b10 	vmov	d0, r6, r7
 8006bae:	f1ca 0000 	rsb	r0, sl, #0
 8006bb2:	f7ff fd79 	bl	80066a8 <scalbn>
 8006bb6:	ec57 6b10 	vmov	r6, r7, d0
 8006bba:	4ba0      	ldr	r3, [pc, #640]	; (8006e3c <__kernel_rem_pio2+0x694>)
 8006bbc:	ee10 0a10 	vmov	r0, s0
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	4639      	mov	r1, r7
 8006bc4:	f7f9 ff62 	bl	8000a8c <__aeabi_dcmpge>
 8006bc8:	b1f8      	cbz	r0, 8006c0a <__kernel_rem_pio2+0x462>
 8006bca:	4b9d      	ldr	r3, [pc, #628]	; (8006e40 <__kernel_rem_pio2+0x698>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4630      	mov	r0, r6
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	f7f9 fcd5 	bl	8000580 <__aeabi_dmul>
 8006bd6:	f7f9 ff6d 	bl	8000ab4 <__aeabi_d2iz>
 8006bda:	4680      	mov	r8, r0
 8006bdc:	f7f9 fc66 	bl	80004ac <__aeabi_i2d>
 8006be0:	4b96      	ldr	r3, [pc, #600]	; (8006e3c <__kernel_rem_pio2+0x694>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	f7f9 fccc 	bl	8000580 <__aeabi_dmul>
 8006be8:	460b      	mov	r3, r1
 8006bea:	4602      	mov	r2, r0
 8006bec:	4639      	mov	r1, r7
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7f9 fb0e 	bl	8000210 <__aeabi_dsub>
 8006bf4:	f7f9 ff5e 	bl	8000ab4 <__aeabi_d2iz>
 8006bf8:	1c65      	adds	r5, r4, #1
 8006bfa:	ab0c      	add	r3, sp, #48	; 0x30
 8006bfc:	f10a 0a18 	add.w	sl, sl, #24
 8006c00:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006c04:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006c08:	e71f      	b.n	8006a4a <__kernel_rem_pio2+0x2a2>
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	f7f9 ff51 	bl	8000ab4 <__aeabi_d2iz>
 8006c12:	ab0c      	add	r3, sp, #48	; 0x30
 8006c14:	4625      	mov	r5, r4
 8006c16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006c1a:	e716      	b.n	8006a4a <__kernel_rem_pio2+0x2a2>
 8006c1c:	ab0c      	add	r3, sp, #48	; 0x30
 8006c1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006c22:	f7f9 fc43 	bl	80004ac <__aeabi_i2d>
 8006c26:	4632      	mov	r2, r6
 8006c28:	463b      	mov	r3, r7
 8006c2a:	f7f9 fca9 	bl	8000580 <__aeabi_dmul>
 8006c2e:	4642      	mov	r2, r8
 8006c30:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006c34:	464b      	mov	r3, r9
 8006c36:	4630      	mov	r0, r6
 8006c38:	4639      	mov	r1, r7
 8006c3a:	f7f9 fca1 	bl	8000580 <__aeabi_dmul>
 8006c3e:	3c01      	subs	r4, #1
 8006c40:	4606      	mov	r6, r0
 8006c42:	460f      	mov	r7, r1
 8006c44:	e713      	b.n	8006a6e <__kernel_rem_pio2+0x2c6>
 8006c46:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006c4a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006c4e:	f7f9 fc97 	bl	8000580 <__aeabi_dmul>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4648      	mov	r0, r9
 8006c58:	4651      	mov	r1, sl
 8006c5a:	f7f9 fadb 	bl	8000214 <__adddf3>
 8006c5e:	3701      	adds	r7, #1
 8006c60:	4681      	mov	r9, r0
 8006c62:	468a      	mov	sl, r1
 8006c64:	9b00      	ldr	r3, [sp, #0]
 8006c66:	429f      	cmp	r7, r3
 8006c68:	dc02      	bgt.n	8006c70 <__kernel_rem_pio2+0x4c8>
 8006c6a:	9b06      	ldr	r3, [sp, #24]
 8006c6c:	429f      	cmp	r7, r3
 8006c6e:	ddea      	ble.n	8006c46 <__kernel_rem_pio2+0x49e>
 8006c70:	9a06      	ldr	r2, [sp, #24]
 8006c72:	ab48      	add	r3, sp, #288	; 0x120
 8006c74:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006c78:	e9c6 9a00 	strd	r9, sl, [r6]
 8006c7c:	3c01      	subs	r4, #1
 8006c7e:	e6fa      	b.n	8006a76 <__kernel_rem_pio2+0x2ce>
 8006c80:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	dc0b      	bgt.n	8006c9e <__kernel_rem_pio2+0x4f6>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	dc39      	bgt.n	8006cfe <__kernel_rem_pio2+0x556>
 8006c8a:	d05d      	beq.n	8006d48 <__kernel_rem_pio2+0x5a0>
 8006c8c:	9b02      	ldr	r3, [sp, #8]
 8006c8e:	f003 0007 	and.w	r0, r3, #7
 8006c92:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006c96:	ecbd 8b02 	vpop	{d8}
 8006c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d1f3      	bne.n	8006c8c <__kernel_rem_pio2+0x4e4>
 8006ca4:	9b05      	ldr	r3, [sp, #20]
 8006ca6:	9500      	str	r5, [sp, #0]
 8006ca8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006cac:	eb0d 0403 	add.w	r4, sp, r3
 8006cb0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006cb4:	46a2      	mov	sl, r4
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f1aa 0a08 	sub.w	sl, sl, #8
 8006cbe:	dc69      	bgt.n	8006d94 <__kernel_rem_pio2+0x5ec>
 8006cc0:	46aa      	mov	sl, r5
 8006cc2:	f1ba 0f01 	cmp.w	sl, #1
 8006cc6:	f1a4 0408 	sub.w	r4, r4, #8
 8006cca:	f300 8083 	bgt.w	8006dd4 <__kernel_rem_pio2+0x62c>
 8006cce:	9c05      	ldr	r4, [sp, #20]
 8006cd0:	ab48      	add	r3, sp, #288	; 0x120
 8006cd2:	441c      	add	r4, r3
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	2d01      	cmp	r5, #1
 8006cda:	f300 809a 	bgt.w	8006e12 <__kernel_rem_pio2+0x66a>
 8006cde:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006ce2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006ce6:	f1bb 0f00 	cmp.w	fp, #0
 8006cea:	f040 8098 	bne.w	8006e1e <__kernel_rem_pio2+0x676>
 8006cee:	9b04      	ldr	r3, [sp, #16]
 8006cf0:	e9c3 7800 	strd	r7, r8, [r3]
 8006cf4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006cf8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006cfc:	e7c6      	b.n	8006c8c <__kernel_rem_pio2+0x4e4>
 8006cfe:	9e05      	ldr	r6, [sp, #20]
 8006d00:	ab48      	add	r3, sp, #288	; 0x120
 8006d02:	441e      	add	r6, r3
 8006d04:	462c      	mov	r4, r5
 8006d06:	2000      	movs	r0, #0
 8006d08:	2100      	movs	r1, #0
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	da33      	bge.n	8006d76 <__kernel_rem_pio2+0x5ce>
 8006d0e:	f1bb 0f00 	cmp.w	fp, #0
 8006d12:	d036      	beq.n	8006d82 <__kernel_rem_pio2+0x5da>
 8006d14:	4602      	mov	r2, r0
 8006d16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d1a:	9c04      	ldr	r4, [sp, #16]
 8006d1c:	e9c4 2300 	strd	r2, r3, [r4]
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006d28:	f7f9 fa72 	bl	8000210 <__aeabi_dsub>
 8006d2c:	ae4a      	add	r6, sp, #296	; 0x128
 8006d2e:	2401      	movs	r4, #1
 8006d30:	42a5      	cmp	r5, r4
 8006d32:	da29      	bge.n	8006d88 <__kernel_rem_pio2+0x5e0>
 8006d34:	f1bb 0f00 	cmp.w	fp, #0
 8006d38:	d002      	beq.n	8006d40 <__kernel_rem_pio2+0x598>
 8006d3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d3e:	4619      	mov	r1, r3
 8006d40:	9b04      	ldr	r3, [sp, #16]
 8006d42:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006d46:	e7a1      	b.n	8006c8c <__kernel_rem_pio2+0x4e4>
 8006d48:	9c05      	ldr	r4, [sp, #20]
 8006d4a:	ab48      	add	r3, sp, #288	; 0x120
 8006d4c:	441c      	add	r4, r3
 8006d4e:	2000      	movs	r0, #0
 8006d50:	2100      	movs	r1, #0
 8006d52:	2d00      	cmp	r5, #0
 8006d54:	da09      	bge.n	8006d6a <__kernel_rem_pio2+0x5c2>
 8006d56:	f1bb 0f00 	cmp.w	fp, #0
 8006d5a:	d002      	beq.n	8006d62 <__kernel_rem_pio2+0x5ba>
 8006d5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d60:	4619      	mov	r1, r3
 8006d62:	9b04      	ldr	r3, [sp, #16]
 8006d64:	e9c3 0100 	strd	r0, r1, [r3]
 8006d68:	e790      	b.n	8006c8c <__kernel_rem_pio2+0x4e4>
 8006d6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d6e:	f7f9 fa51 	bl	8000214 <__adddf3>
 8006d72:	3d01      	subs	r5, #1
 8006d74:	e7ed      	b.n	8006d52 <__kernel_rem_pio2+0x5aa>
 8006d76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006d7a:	f7f9 fa4b 	bl	8000214 <__adddf3>
 8006d7e:	3c01      	subs	r4, #1
 8006d80:	e7c3      	b.n	8006d0a <__kernel_rem_pio2+0x562>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	e7c8      	b.n	8006d1a <__kernel_rem_pio2+0x572>
 8006d88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006d8c:	f7f9 fa42 	bl	8000214 <__adddf3>
 8006d90:	3401      	adds	r4, #1
 8006d92:	e7cd      	b.n	8006d30 <__kernel_rem_pio2+0x588>
 8006d94:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d98:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006d9c:	9b00      	ldr	r3, [sp, #0]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	4632      	mov	r2, r6
 8006da4:	463b      	mov	r3, r7
 8006da6:	4640      	mov	r0, r8
 8006da8:	4649      	mov	r1, r9
 8006daa:	f7f9 fa33 	bl	8000214 <__adddf3>
 8006dae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fa29 	bl	8000210 <__aeabi_dsub>
 8006dbe:	4632      	mov	r2, r6
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	f7f9 fa27 	bl	8000214 <__adddf3>
 8006dc6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006dca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006dce:	ed8a 7b00 	vstr	d7, [sl]
 8006dd2:	e770      	b.n	8006cb6 <__kernel_rem_pio2+0x50e>
 8006dd4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006dd8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006ddc:	4640      	mov	r0, r8
 8006dde:	4632      	mov	r2, r6
 8006de0:	463b      	mov	r3, r7
 8006de2:	4649      	mov	r1, r9
 8006de4:	f7f9 fa16 	bl	8000214 <__adddf3>
 8006de8:	e9cd 0100 	strd	r0, r1, [sp]
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4640      	mov	r0, r8
 8006df2:	4649      	mov	r1, r9
 8006df4:	f7f9 fa0c 	bl	8000210 <__aeabi_dsub>
 8006df8:	4632      	mov	r2, r6
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	f7f9 fa0a 	bl	8000214 <__adddf3>
 8006e00:	ed9d 7b00 	vldr	d7, [sp]
 8006e04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006e08:	ed84 7b00 	vstr	d7, [r4]
 8006e0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e10:	e757      	b.n	8006cc2 <__kernel_rem_pio2+0x51a>
 8006e12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e16:	f7f9 f9fd 	bl	8000214 <__adddf3>
 8006e1a:	3d01      	subs	r5, #1
 8006e1c:	e75c      	b.n	8006cd8 <__kernel_rem_pio2+0x530>
 8006e1e:	9b04      	ldr	r3, [sp, #16]
 8006e20:	9a04      	ldr	r2, [sp, #16]
 8006e22:	601f      	str	r7, [r3, #0]
 8006e24:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006e28:	605c      	str	r4, [r3, #4]
 8006e2a:	609d      	str	r5, [r3, #8]
 8006e2c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e30:	60d3      	str	r3, [r2, #12]
 8006e32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e36:	6110      	str	r0, [r2, #16]
 8006e38:	6153      	str	r3, [r2, #20]
 8006e3a:	e727      	b.n	8006c8c <__kernel_rem_pio2+0x4e4>
 8006e3c:	41700000 	.word	0x41700000
 8006e40:	3e700000 	.word	0x3e700000
 8006e44:	00000000 	.word	0x00000000

08006e48 <floor>:
 8006e48:	ec51 0b10 	vmov	r0, r1, d0
 8006e4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e54:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006e58:	2e13      	cmp	r6, #19
 8006e5a:	ee10 5a10 	vmov	r5, s0
 8006e5e:	ee10 8a10 	vmov	r8, s0
 8006e62:	460c      	mov	r4, r1
 8006e64:	dc31      	bgt.n	8006eca <floor+0x82>
 8006e66:	2e00      	cmp	r6, #0
 8006e68:	da14      	bge.n	8006e94 <floor+0x4c>
 8006e6a:	a333      	add	r3, pc, #204	; (adr r3, 8006f38 <floor+0xf0>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 f9d0 	bl	8000214 <__adddf3>
 8006e74:	2200      	movs	r2, #0
 8006e76:	2300      	movs	r3, #0
 8006e78:	f7f9 fe12 	bl	8000aa0 <__aeabi_dcmpgt>
 8006e7c:	b138      	cbz	r0, 8006e8e <floor+0x46>
 8006e7e:	2c00      	cmp	r4, #0
 8006e80:	da53      	bge.n	8006f2a <floor+0xe2>
 8006e82:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006e86:	4325      	orrs	r5, r4
 8006e88:	d052      	beq.n	8006f30 <floor+0xe8>
 8006e8a:	4c2d      	ldr	r4, [pc, #180]	; (8006f40 <floor+0xf8>)
 8006e8c:	2500      	movs	r5, #0
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4628      	mov	r0, r5
 8006e92:	e024      	b.n	8006ede <floor+0x96>
 8006e94:	4f2b      	ldr	r7, [pc, #172]	; (8006f44 <floor+0xfc>)
 8006e96:	4137      	asrs	r7, r6
 8006e98:	ea01 0307 	and.w	r3, r1, r7
 8006e9c:	4303      	orrs	r3, r0
 8006e9e:	d01e      	beq.n	8006ede <floor+0x96>
 8006ea0:	a325      	add	r3, pc, #148	; (adr r3, 8006f38 <floor+0xf0>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f7f9 f9b5 	bl	8000214 <__adddf3>
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2300      	movs	r3, #0
 8006eae:	f7f9 fdf7 	bl	8000aa0 <__aeabi_dcmpgt>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d0eb      	beq.n	8006e8e <floor+0x46>
 8006eb6:	2c00      	cmp	r4, #0
 8006eb8:	bfbe      	ittt	lt
 8006eba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006ebe:	4133      	asrlt	r3, r6
 8006ec0:	18e4      	addlt	r4, r4, r3
 8006ec2:	ea24 0407 	bic.w	r4, r4, r7
 8006ec6:	2500      	movs	r5, #0
 8006ec8:	e7e1      	b.n	8006e8e <floor+0x46>
 8006eca:	2e33      	cmp	r6, #51	; 0x33
 8006ecc:	dd0b      	ble.n	8006ee6 <floor+0x9e>
 8006ece:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006ed2:	d104      	bne.n	8006ede <floor+0x96>
 8006ed4:	ee10 2a10 	vmov	r2, s0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	f7f9 f99b 	bl	8000214 <__adddf3>
 8006ede:	ec41 0b10 	vmov	d0, r0, r1
 8006ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006eea:	f04f 37ff 	mov.w	r7, #4294967295
 8006eee:	40df      	lsrs	r7, r3
 8006ef0:	4238      	tst	r0, r7
 8006ef2:	d0f4      	beq.n	8006ede <floor+0x96>
 8006ef4:	a310      	add	r3, pc, #64	; (adr r3, 8006f38 <floor+0xf0>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 f98b 	bl	8000214 <__adddf3>
 8006efe:	2200      	movs	r2, #0
 8006f00:	2300      	movs	r3, #0
 8006f02:	f7f9 fdcd 	bl	8000aa0 <__aeabi_dcmpgt>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d0c1      	beq.n	8006e8e <floor+0x46>
 8006f0a:	2c00      	cmp	r4, #0
 8006f0c:	da0a      	bge.n	8006f24 <floor+0xdc>
 8006f0e:	2e14      	cmp	r6, #20
 8006f10:	d101      	bne.n	8006f16 <floor+0xce>
 8006f12:	3401      	adds	r4, #1
 8006f14:	e006      	b.n	8006f24 <floor+0xdc>
 8006f16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	40b3      	lsls	r3, r6
 8006f1e:	441d      	add	r5, r3
 8006f20:	45a8      	cmp	r8, r5
 8006f22:	d8f6      	bhi.n	8006f12 <floor+0xca>
 8006f24:	ea25 0507 	bic.w	r5, r5, r7
 8006f28:	e7b1      	b.n	8006e8e <floor+0x46>
 8006f2a:	2500      	movs	r5, #0
 8006f2c:	462c      	mov	r4, r5
 8006f2e:	e7ae      	b.n	8006e8e <floor+0x46>
 8006f30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006f34:	e7ab      	b.n	8006e8e <floor+0x46>
 8006f36:	bf00      	nop
 8006f38:	8800759c 	.word	0x8800759c
 8006f3c:	7e37e43c 	.word	0x7e37e43c
 8006f40:	bff00000 	.word	0xbff00000
 8006f44:	000fffff 	.word	0x000fffff

08006f48 <_init>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr

08006f54 <_fini>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	bf00      	nop
 8006f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5a:	bc08      	pop	{r3}
 8006f5c:	469e      	mov	lr, r3
 8006f5e:	4770      	bx	lr
